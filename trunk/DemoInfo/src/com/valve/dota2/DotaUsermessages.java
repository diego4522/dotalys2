// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_usermessages.proto

package com.valve.dota2;

public final class DotaUsermessages {
  private DotaUsermessages() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.valve.dota2.EDotaUserMessages}
   */
  public enum EDotaUserMessages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DOTA_UM_AddUnitToSelection = 64;</code>
     */
    DOTA_UM_AddUnitToSelection(0, 64),
    /**
     * <code>DOTA_UM_AIDebugLine = 65;</code>
     */
    DOTA_UM_AIDebugLine(1, 65),
    /**
     * <code>DOTA_UM_ChatEvent = 66;</code>
     */
    DOTA_UM_ChatEvent(2, 66),
    /**
     * <code>DOTA_UM_CombatHeroPositions = 67;</code>
     */
    DOTA_UM_CombatHeroPositions(3, 67),
    /**
     * <code>DOTA_UM_CombatLogData = 68;</code>
     */
    DOTA_UM_CombatLogData(4, 68),
    /**
     * <code>DOTA_UM_CombatLogShowDeath = 70;</code>
     */
    DOTA_UM_CombatLogShowDeath(5, 70),
    /**
     * <code>DOTA_UM_CreateLinearProjectile = 71;</code>
     */
    DOTA_UM_CreateLinearProjectile(6, 71),
    /**
     * <code>DOTA_UM_DestroyLinearProjectile = 72;</code>
     */
    DOTA_UM_DestroyLinearProjectile(7, 72),
    /**
     * <code>DOTA_UM_DodgeTrackingProjectiles = 73;</code>
     */
    DOTA_UM_DodgeTrackingProjectiles(8, 73),
    /**
     * <code>DOTA_UM_GlobalLightColor = 74;</code>
     */
    DOTA_UM_GlobalLightColor(9, 74),
    /**
     * <code>DOTA_UM_GlobalLightDirection = 75;</code>
     */
    DOTA_UM_GlobalLightDirection(10, 75),
    /**
     * <code>DOTA_UM_InvalidCommand = 76;</code>
     */
    DOTA_UM_InvalidCommand(11, 76),
    /**
     * <code>DOTA_UM_LocationPing = 77;</code>
     */
    DOTA_UM_LocationPing(12, 77),
    /**
     * <code>DOTA_UM_MapLine = 78;</code>
     */
    DOTA_UM_MapLine(13, 78),
    /**
     * <code>DOTA_UM_MiniKillCamInfo = 79;</code>
     */
    DOTA_UM_MiniKillCamInfo(14, 79),
    /**
     * <code>DOTA_UM_MinimapDebugPoint = 80;</code>
     */
    DOTA_UM_MinimapDebugPoint(15, 80),
    /**
     * <code>DOTA_UM_MinimapEvent = 81;</code>
     */
    DOTA_UM_MinimapEvent(16, 81),
    /**
     * <code>DOTA_UM_NevermoreRequiem = 82;</code>
     */
    DOTA_UM_NevermoreRequiem(17, 82),
    /**
     * <code>DOTA_UM_OverheadEvent = 83;</code>
     */
    DOTA_UM_OverheadEvent(18, 83),
    /**
     * <code>DOTA_UM_SetNextAutobuyItem = 84;</code>
     */
    DOTA_UM_SetNextAutobuyItem(19, 84),
    /**
     * <code>DOTA_UM_SharedCooldown = 85;</code>
     */
    DOTA_UM_SharedCooldown(20, 85),
    /**
     * <code>DOTA_UM_SpectatorPlayerClick = 86;</code>
     */
    DOTA_UM_SpectatorPlayerClick(21, 86),
    /**
     * <code>DOTA_UM_TutorialTipInfo = 87;</code>
     */
    DOTA_UM_TutorialTipInfo(22, 87),
    /**
     * <code>DOTA_UM_UnitEvent = 88;</code>
     */
    DOTA_UM_UnitEvent(23, 88),
    /**
     * <code>DOTA_UM_ParticleManager = 89;</code>
     */
    DOTA_UM_ParticleManager(24, 89),
    /**
     * <code>DOTA_UM_BotChat = 90;</code>
     */
    DOTA_UM_BotChat(25, 90),
    /**
     * <code>DOTA_UM_HudError = 91;</code>
     */
    DOTA_UM_HudError(26, 91),
    /**
     * <code>DOTA_UM_ItemPurchased = 92;</code>
     */
    DOTA_UM_ItemPurchased(27, 92),
    /**
     * <code>DOTA_UM_Ping = 93;</code>
     */
    DOTA_UM_Ping(28, 93),
    /**
     * <code>DOTA_UM_ItemFound = 94;</code>
     */
    DOTA_UM_ItemFound(29, 94),
    ;

    /**
     * <code>DOTA_UM_AddUnitToSelection = 64;</code>
     */
    public static final int DOTA_UM_AddUnitToSelection_VALUE = 64;
    /**
     * <code>DOTA_UM_AIDebugLine = 65;</code>
     */
    public static final int DOTA_UM_AIDebugLine_VALUE = 65;
    /**
     * <code>DOTA_UM_ChatEvent = 66;</code>
     */
    public static final int DOTA_UM_ChatEvent_VALUE = 66;
    /**
     * <code>DOTA_UM_CombatHeroPositions = 67;</code>
     */
    public static final int DOTA_UM_CombatHeroPositions_VALUE = 67;
    /**
     * <code>DOTA_UM_CombatLogData = 68;</code>
     */
    public static final int DOTA_UM_CombatLogData_VALUE = 68;
    /**
     * <code>DOTA_UM_CombatLogShowDeath = 70;</code>
     */
    public static final int DOTA_UM_CombatLogShowDeath_VALUE = 70;
    /**
     * <code>DOTA_UM_CreateLinearProjectile = 71;</code>
     */
    public static final int DOTA_UM_CreateLinearProjectile_VALUE = 71;
    /**
     * <code>DOTA_UM_DestroyLinearProjectile = 72;</code>
     */
    public static final int DOTA_UM_DestroyLinearProjectile_VALUE = 72;
    /**
     * <code>DOTA_UM_DodgeTrackingProjectiles = 73;</code>
     */
    public static final int DOTA_UM_DodgeTrackingProjectiles_VALUE = 73;
    /**
     * <code>DOTA_UM_GlobalLightColor = 74;</code>
     */
    public static final int DOTA_UM_GlobalLightColor_VALUE = 74;
    /**
     * <code>DOTA_UM_GlobalLightDirection = 75;</code>
     */
    public static final int DOTA_UM_GlobalLightDirection_VALUE = 75;
    /**
     * <code>DOTA_UM_InvalidCommand = 76;</code>
     */
    public static final int DOTA_UM_InvalidCommand_VALUE = 76;
    /**
     * <code>DOTA_UM_LocationPing = 77;</code>
     */
    public static final int DOTA_UM_LocationPing_VALUE = 77;
    /**
     * <code>DOTA_UM_MapLine = 78;</code>
     */
    public static final int DOTA_UM_MapLine_VALUE = 78;
    /**
     * <code>DOTA_UM_MiniKillCamInfo = 79;</code>
     */
    public static final int DOTA_UM_MiniKillCamInfo_VALUE = 79;
    /**
     * <code>DOTA_UM_MinimapDebugPoint = 80;</code>
     */
    public static final int DOTA_UM_MinimapDebugPoint_VALUE = 80;
    /**
     * <code>DOTA_UM_MinimapEvent = 81;</code>
     */
    public static final int DOTA_UM_MinimapEvent_VALUE = 81;
    /**
     * <code>DOTA_UM_NevermoreRequiem = 82;</code>
     */
    public static final int DOTA_UM_NevermoreRequiem_VALUE = 82;
    /**
     * <code>DOTA_UM_OverheadEvent = 83;</code>
     */
    public static final int DOTA_UM_OverheadEvent_VALUE = 83;
    /**
     * <code>DOTA_UM_SetNextAutobuyItem = 84;</code>
     */
    public static final int DOTA_UM_SetNextAutobuyItem_VALUE = 84;
    /**
     * <code>DOTA_UM_SharedCooldown = 85;</code>
     */
    public static final int DOTA_UM_SharedCooldown_VALUE = 85;
    /**
     * <code>DOTA_UM_SpectatorPlayerClick = 86;</code>
     */
    public static final int DOTA_UM_SpectatorPlayerClick_VALUE = 86;
    /**
     * <code>DOTA_UM_TutorialTipInfo = 87;</code>
     */
    public static final int DOTA_UM_TutorialTipInfo_VALUE = 87;
    /**
     * <code>DOTA_UM_UnitEvent = 88;</code>
     */
    public static final int DOTA_UM_UnitEvent_VALUE = 88;
    /**
     * <code>DOTA_UM_ParticleManager = 89;</code>
     */
    public static final int DOTA_UM_ParticleManager_VALUE = 89;
    /**
     * <code>DOTA_UM_BotChat = 90;</code>
     */
    public static final int DOTA_UM_BotChat_VALUE = 90;
    /**
     * <code>DOTA_UM_HudError = 91;</code>
     */
    public static final int DOTA_UM_HudError_VALUE = 91;
    /**
     * <code>DOTA_UM_ItemPurchased = 92;</code>
     */
    public static final int DOTA_UM_ItemPurchased_VALUE = 92;
    /**
     * <code>DOTA_UM_Ping = 93;</code>
     */
    public static final int DOTA_UM_Ping_VALUE = 93;
    /**
     * <code>DOTA_UM_ItemFound = 94;</code>
     */
    public static final int DOTA_UM_ItemFound_VALUE = 94;


    public final int getNumber() { return value; }

    public static EDotaUserMessages valueOf(int value) {
      switch (value) {
        case 64: return DOTA_UM_AddUnitToSelection;
        case 65: return DOTA_UM_AIDebugLine;
        case 66: return DOTA_UM_ChatEvent;
        case 67: return DOTA_UM_CombatHeroPositions;
        case 68: return DOTA_UM_CombatLogData;
        case 70: return DOTA_UM_CombatLogShowDeath;
        case 71: return DOTA_UM_CreateLinearProjectile;
        case 72: return DOTA_UM_DestroyLinearProjectile;
        case 73: return DOTA_UM_DodgeTrackingProjectiles;
        case 74: return DOTA_UM_GlobalLightColor;
        case 75: return DOTA_UM_GlobalLightDirection;
        case 76: return DOTA_UM_InvalidCommand;
        case 77: return DOTA_UM_LocationPing;
        case 78: return DOTA_UM_MapLine;
        case 79: return DOTA_UM_MiniKillCamInfo;
        case 80: return DOTA_UM_MinimapDebugPoint;
        case 81: return DOTA_UM_MinimapEvent;
        case 82: return DOTA_UM_NevermoreRequiem;
        case 83: return DOTA_UM_OverheadEvent;
        case 84: return DOTA_UM_SetNextAutobuyItem;
        case 85: return DOTA_UM_SharedCooldown;
        case 86: return DOTA_UM_SpectatorPlayerClick;
        case 87: return DOTA_UM_TutorialTipInfo;
        case 88: return DOTA_UM_UnitEvent;
        case 89: return DOTA_UM_ParticleManager;
        case 90: return DOTA_UM_BotChat;
        case 91: return DOTA_UM_HudError;
        case 92: return DOTA_UM_ItemPurchased;
        case 93: return DOTA_UM_Ping;
        case 94: return DOTA_UM_ItemFound;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EDotaUserMessages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EDotaUserMessages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EDotaUserMessages>() {
            public EDotaUserMessages findValueByNumber(int number) {
              return EDotaUserMessages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.getDescriptor().getEnumTypes().get(0);
    }

    private static final EDotaUserMessages[] VALUES = values();

    public static EDotaUserMessages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EDotaUserMessages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.valve.dota2.EDotaUserMessages)
  }

  /**
   * Protobuf enum {@code com.valve.dota2.DOTA_CHAT_MESSAGE}
   */
  public enum DOTA_CHAT_MESSAGE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CHAT_MESSAGE_INVALID = -1;</code>
     */
    CHAT_MESSAGE_INVALID(0, -1),
    /**
     * <code>CHAT_MESSAGE_HERO_KILL = 0;</code>
     */
    CHAT_MESSAGE_HERO_KILL(1, 0),
    /**
     * <code>CHAT_MESSAGE_HERO_DENY = 1;</code>
     */
    CHAT_MESSAGE_HERO_DENY(2, 1),
    /**
     * <code>CHAT_MESSAGE_BARRACKS_KILL = 2;</code>
     */
    CHAT_MESSAGE_BARRACKS_KILL(3, 2),
    /**
     * <code>CHAT_MESSAGE_TOWER_KILL = 3;</code>
     */
    CHAT_MESSAGE_TOWER_KILL(4, 3),
    /**
     * <code>CHAT_MESSAGE_TOWER_DENY = 4;</code>
     */
    CHAT_MESSAGE_TOWER_DENY(5, 4),
    /**
     * <code>CHAT_MESSAGE_FIRSTBLOOD = 5;</code>
     */
    CHAT_MESSAGE_FIRSTBLOOD(6, 5),
    /**
     * <code>CHAT_MESSAGE_STREAK_KILL = 6;</code>
     */
    CHAT_MESSAGE_STREAK_KILL(7, 6),
    /**
     * <code>CHAT_MESSAGE_BUYBACK = 7;</code>
     */
    CHAT_MESSAGE_BUYBACK(8, 7),
    /**
     * <code>CHAT_MESSAGE_AEGIS = 8;</code>
     */
    CHAT_MESSAGE_AEGIS(9, 8),
    /**
     * <code>CHAT_MESSAGE_ROSHAN_KILL = 9;</code>
     */
    CHAT_MESSAGE_ROSHAN_KILL(10, 9),
    /**
     * <code>CHAT_MESSAGE_COURIER_LOST = 10;</code>
     */
    CHAT_MESSAGE_COURIER_LOST(11, 10),
    /**
     * <code>CHAT_MESSAGE_COURIER_RESPAWNED = 11;</code>
     */
    CHAT_MESSAGE_COURIER_RESPAWNED(12, 11),
    /**
     * <code>CHAT_MESSAGE_GLYPH_USED = 12;</code>
     */
    CHAT_MESSAGE_GLYPH_USED(13, 12),
    /**
     * <code>CHAT_MESSAGE_ITEM_PURCHASE = 13;</code>
     */
    CHAT_MESSAGE_ITEM_PURCHASE(14, 13),
    /**
     * <code>CHAT_MESSAGE_CONNECT = 14;</code>
     */
    CHAT_MESSAGE_CONNECT(15, 14),
    /**
     * <code>CHAT_MESSAGE_DISCONNECT = 15;</code>
     */
    CHAT_MESSAGE_DISCONNECT(16, 15),
    /**
     * <code>CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT = 16;</code>
     */
    CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT(17, 16),
    /**
     * <code>CHAT_MESSAGE_DISCONNECT_TIME_REMAINING = 17;</code>
     */
    CHAT_MESSAGE_DISCONNECT_TIME_REMAINING(18, 17),
    /**
     * <code>CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL = 18;</code>
     */
    CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL(19, 18),
    /**
     * <code>CHAT_MESSAGE_RECONNECT = 19;</code>
     */
    CHAT_MESSAGE_RECONNECT(20, 19),
    /**
     * <code>CHAT_MESSAGE_ABANDON = 20;</code>
     */
    CHAT_MESSAGE_ABANDON(21, 20),
    /**
     * <code>CHAT_MESSAGE_SAFE_TO_LEAVE = 21;</code>
     */
    CHAT_MESSAGE_SAFE_TO_LEAVE(22, 21),
    /**
     * <code>CHAT_MESSAGE_RUNE_PICKUP = 22;</code>
     */
    CHAT_MESSAGE_RUNE_PICKUP(23, 22),
    /**
     * <code>CHAT_MESSAGE_RUNE_BOTTLE = 23;</code>
     */
    CHAT_MESSAGE_RUNE_BOTTLE(24, 23),
    /**
     * <code>CHAT_MESSAGE_INTHEBAG = 24;</code>
     */
    CHAT_MESSAGE_INTHEBAG(25, 24),
    /**
     * <code>CHAT_MESSAGE_SECRETSHOP = 25;</code>
     */
    CHAT_MESSAGE_SECRETSHOP(26, 25),
    /**
     * <code>CHAT_MESSAGE_ITEM_AUTOPURCHASED = 26;</code>
     */
    CHAT_MESSAGE_ITEM_AUTOPURCHASED(27, 26),
    /**
     * <code>CHAT_MESSAGE_ITEMS_COMBINED = 27;</code>
     */
    CHAT_MESSAGE_ITEMS_COMBINED(28, 27),
    /**
     * <code>CHAT_MESSAGE_SUPER_CREEPS = 28;</code>
     */
    CHAT_MESSAGE_SUPER_CREEPS(29, 28),
    /**
     * <code>CHAT_MESSAGE_CANT_USE_ACTION_ITEM = 29;</code>
     */
    CHAT_MESSAGE_CANT_USE_ACTION_ITEM(30, 29),
    /**
     * <code>CHAT_MESSAGE_CHARGES_EXHAUSTED = 30;</code>
     */
    CHAT_MESSAGE_CHARGES_EXHAUSTED(31, 30),
    /**
     * <code>CHAT_MESSAGE_CANTPAUSE = 31;</code>
     */
    CHAT_MESSAGE_CANTPAUSE(32, 31),
    /**
     * <code>CHAT_MESSAGE_NOPAUSESLEFT = 32;</code>
     */
    CHAT_MESSAGE_NOPAUSESLEFT(33, 32),
    /**
     * <code>CHAT_MESSAGE_CANTPAUSEYET = 33;</code>
     */
    CHAT_MESSAGE_CANTPAUSEYET(34, 33),
    /**
     * <code>CHAT_MESSAGE_PAUSED = 34;</code>
     */
    CHAT_MESSAGE_PAUSED(35, 34),
    /**
     * <code>CHAT_MESSAGE_UNPAUSE_COUNTDOWN = 35;</code>
     */
    CHAT_MESSAGE_UNPAUSE_COUNTDOWN(36, 35),
    /**
     * <code>CHAT_MESSAGE_UNPAUSED = 36;</code>
     */
    CHAT_MESSAGE_UNPAUSED(37, 36),
    /**
     * <code>CHAT_MESSAGE_AUTO_UNPAUSED = 37;</code>
     */
    CHAT_MESSAGE_AUTO_UNPAUSED(38, 37),
    /**
     * <code>CHAT_MESSAGE_YOUPAUSED = 38;</code>
     */
    CHAT_MESSAGE_YOUPAUSED(39, 38),
    /**
     * <code>CHAT_MESSAGE_CANTUNPAUSETEAM = 39;</code>
     */
    CHAT_MESSAGE_CANTUNPAUSETEAM(40, 39),
    /**
     * <code>CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER = 40;</code>
     */
    CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER(41, 40),
    /**
     * <code>CHAT_MESSAGE_VOICE_TEXT_BANNED = 41;</code>
     */
    CHAT_MESSAGE_VOICE_TEXT_BANNED(42, 41),
    /**
     * <code>CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME = 42;</code>
     */
    CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME(43, 42),
    /**
     * <code>CHAT_MESSAGE_REPORT_REMINDER = 43;</code>
     */
    CHAT_MESSAGE_REPORT_REMINDER(44, 43),
    /**
     * <code>CHAT_MESSAGE_ECON_ITEM = 44;</code>
     */
    CHAT_MESSAGE_ECON_ITEM(45, 44),
    /**
     * <code>CHAT_MESSAGE_TAUNT = 45;</code>
     */
    CHAT_MESSAGE_TAUNT(46, 45),
    /**
     * <code>CHAT_MESSAGE_RANDOM = 46;</code>
     */
    CHAT_MESSAGE_RANDOM(47, 46),
    /**
     * <code>CHAT_MESSAGE_RD_TURN = 47;</code>
     */
    CHAT_MESSAGE_RD_TURN(48, 47),
    ;

    /**
     * <code>CHAT_MESSAGE_INVALID = -1;</code>
     */
    public static final int CHAT_MESSAGE_INVALID_VALUE = -1;
    /**
     * <code>CHAT_MESSAGE_HERO_KILL = 0;</code>
     */
    public static final int CHAT_MESSAGE_HERO_KILL_VALUE = 0;
    /**
     * <code>CHAT_MESSAGE_HERO_DENY = 1;</code>
     */
    public static final int CHAT_MESSAGE_HERO_DENY_VALUE = 1;
    /**
     * <code>CHAT_MESSAGE_BARRACKS_KILL = 2;</code>
     */
    public static final int CHAT_MESSAGE_BARRACKS_KILL_VALUE = 2;
    /**
     * <code>CHAT_MESSAGE_TOWER_KILL = 3;</code>
     */
    public static final int CHAT_MESSAGE_TOWER_KILL_VALUE = 3;
    /**
     * <code>CHAT_MESSAGE_TOWER_DENY = 4;</code>
     */
    public static final int CHAT_MESSAGE_TOWER_DENY_VALUE = 4;
    /**
     * <code>CHAT_MESSAGE_FIRSTBLOOD = 5;</code>
     */
    public static final int CHAT_MESSAGE_FIRSTBLOOD_VALUE = 5;
    /**
     * <code>CHAT_MESSAGE_STREAK_KILL = 6;</code>
     */
    public static final int CHAT_MESSAGE_STREAK_KILL_VALUE = 6;
    /**
     * <code>CHAT_MESSAGE_BUYBACK = 7;</code>
     */
    public static final int CHAT_MESSAGE_BUYBACK_VALUE = 7;
    /**
     * <code>CHAT_MESSAGE_AEGIS = 8;</code>
     */
    public static final int CHAT_MESSAGE_AEGIS_VALUE = 8;
    /**
     * <code>CHAT_MESSAGE_ROSHAN_KILL = 9;</code>
     */
    public static final int CHAT_MESSAGE_ROSHAN_KILL_VALUE = 9;
    /**
     * <code>CHAT_MESSAGE_COURIER_LOST = 10;</code>
     */
    public static final int CHAT_MESSAGE_COURIER_LOST_VALUE = 10;
    /**
     * <code>CHAT_MESSAGE_COURIER_RESPAWNED = 11;</code>
     */
    public static final int CHAT_MESSAGE_COURIER_RESPAWNED_VALUE = 11;
    /**
     * <code>CHAT_MESSAGE_GLYPH_USED = 12;</code>
     */
    public static final int CHAT_MESSAGE_GLYPH_USED_VALUE = 12;
    /**
     * <code>CHAT_MESSAGE_ITEM_PURCHASE = 13;</code>
     */
    public static final int CHAT_MESSAGE_ITEM_PURCHASE_VALUE = 13;
    /**
     * <code>CHAT_MESSAGE_CONNECT = 14;</code>
     */
    public static final int CHAT_MESSAGE_CONNECT_VALUE = 14;
    /**
     * <code>CHAT_MESSAGE_DISCONNECT = 15;</code>
     */
    public static final int CHAT_MESSAGE_DISCONNECT_VALUE = 15;
    /**
     * <code>CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT = 16;</code>
     */
    public static final int CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT_VALUE = 16;
    /**
     * <code>CHAT_MESSAGE_DISCONNECT_TIME_REMAINING = 17;</code>
     */
    public static final int CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_VALUE = 17;
    /**
     * <code>CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL = 18;</code>
     */
    public static final int CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL_VALUE = 18;
    /**
     * <code>CHAT_MESSAGE_RECONNECT = 19;</code>
     */
    public static final int CHAT_MESSAGE_RECONNECT_VALUE = 19;
    /**
     * <code>CHAT_MESSAGE_ABANDON = 20;</code>
     */
    public static final int CHAT_MESSAGE_ABANDON_VALUE = 20;
    /**
     * <code>CHAT_MESSAGE_SAFE_TO_LEAVE = 21;</code>
     */
    public static final int CHAT_MESSAGE_SAFE_TO_LEAVE_VALUE = 21;
    /**
     * <code>CHAT_MESSAGE_RUNE_PICKUP = 22;</code>
     */
    public static final int CHAT_MESSAGE_RUNE_PICKUP_VALUE = 22;
    /**
     * <code>CHAT_MESSAGE_RUNE_BOTTLE = 23;</code>
     */
    public static final int CHAT_MESSAGE_RUNE_BOTTLE_VALUE = 23;
    /**
     * <code>CHAT_MESSAGE_INTHEBAG = 24;</code>
     */
    public static final int CHAT_MESSAGE_INTHEBAG_VALUE = 24;
    /**
     * <code>CHAT_MESSAGE_SECRETSHOP = 25;</code>
     */
    public static final int CHAT_MESSAGE_SECRETSHOP_VALUE = 25;
    /**
     * <code>CHAT_MESSAGE_ITEM_AUTOPURCHASED = 26;</code>
     */
    public static final int CHAT_MESSAGE_ITEM_AUTOPURCHASED_VALUE = 26;
    /**
     * <code>CHAT_MESSAGE_ITEMS_COMBINED = 27;</code>
     */
    public static final int CHAT_MESSAGE_ITEMS_COMBINED_VALUE = 27;
    /**
     * <code>CHAT_MESSAGE_SUPER_CREEPS = 28;</code>
     */
    public static final int CHAT_MESSAGE_SUPER_CREEPS_VALUE = 28;
    /**
     * <code>CHAT_MESSAGE_CANT_USE_ACTION_ITEM = 29;</code>
     */
    public static final int CHAT_MESSAGE_CANT_USE_ACTION_ITEM_VALUE = 29;
    /**
     * <code>CHAT_MESSAGE_CHARGES_EXHAUSTED = 30;</code>
     */
    public static final int CHAT_MESSAGE_CHARGES_EXHAUSTED_VALUE = 30;
    /**
     * <code>CHAT_MESSAGE_CANTPAUSE = 31;</code>
     */
    public static final int CHAT_MESSAGE_CANTPAUSE_VALUE = 31;
    /**
     * <code>CHAT_MESSAGE_NOPAUSESLEFT = 32;</code>
     */
    public static final int CHAT_MESSAGE_NOPAUSESLEFT_VALUE = 32;
    /**
     * <code>CHAT_MESSAGE_CANTPAUSEYET = 33;</code>
     */
    public static final int CHAT_MESSAGE_CANTPAUSEYET_VALUE = 33;
    /**
     * <code>CHAT_MESSAGE_PAUSED = 34;</code>
     */
    public static final int CHAT_MESSAGE_PAUSED_VALUE = 34;
    /**
     * <code>CHAT_MESSAGE_UNPAUSE_COUNTDOWN = 35;</code>
     */
    public static final int CHAT_MESSAGE_UNPAUSE_COUNTDOWN_VALUE = 35;
    /**
     * <code>CHAT_MESSAGE_UNPAUSED = 36;</code>
     */
    public static final int CHAT_MESSAGE_UNPAUSED_VALUE = 36;
    /**
     * <code>CHAT_MESSAGE_AUTO_UNPAUSED = 37;</code>
     */
    public static final int CHAT_MESSAGE_AUTO_UNPAUSED_VALUE = 37;
    /**
     * <code>CHAT_MESSAGE_YOUPAUSED = 38;</code>
     */
    public static final int CHAT_MESSAGE_YOUPAUSED_VALUE = 38;
    /**
     * <code>CHAT_MESSAGE_CANTUNPAUSETEAM = 39;</code>
     */
    public static final int CHAT_MESSAGE_CANTUNPAUSETEAM_VALUE = 39;
    /**
     * <code>CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER = 40;</code>
     */
    public static final int CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER_VALUE = 40;
    /**
     * <code>CHAT_MESSAGE_VOICE_TEXT_BANNED = 41;</code>
     */
    public static final int CHAT_MESSAGE_VOICE_TEXT_BANNED_VALUE = 41;
    /**
     * <code>CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME = 42;</code>
     */
    public static final int CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME_VALUE = 42;
    /**
     * <code>CHAT_MESSAGE_REPORT_REMINDER = 43;</code>
     */
    public static final int CHAT_MESSAGE_REPORT_REMINDER_VALUE = 43;
    /**
     * <code>CHAT_MESSAGE_ECON_ITEM = 44;</code>
     */
    public static final int CHAT_MESSAGE_ECON_ITEM_VALUE = 44;
    /**
     * <code>CHAT_MESSAGE_TAUNT = 45;</code>
     */
    public static final int CHAT_MESSAGE_TAUNT_VALUE = 45;
    /**
     * <code>CHAT_MESSAGE_RANDOM = 46;</code>
     */
    public static final int CHAT_MESSAGE_RANDOM_VALUE = 46;
    /**
     * <code>CHAT_MESSAGE_RD_TURN = 47;</code>
     */
    public static final int CHAT_MESSAGE_RD_TURN_VALUE = 47;


    public final int getNumber() { return value; }

    public static DOTA_CHAT_MESSAGE valueOf(int value) {
      switch (value) {
        case -1: return CHAT_MESSAGE_INVALID;
        case 0: return CHAT_MESSAGE_HERO_KILL;
        case 1: return CHAT_MESSAGE_HERO_DENY;
        case 2: return CHAT_MESSAGE_BARRACKS_KILL;
        case 3: return CHAT_MESSAGE_TOWER_KILL;
        case 4: return CHAT_MESSAGE_TOWER_DENY;
        case 5: return CHAT_MESSAGE_FIRSTBLOOD;
        case 6: return CHAT_MESSAGE_STREAK_KILL;
        case 7: return CHAT_MESSAGE_BUYBACK;
        case 8: return CHAT_MESSAGE_AEGIS;
        case 9: return CHAT_MESSAGE_ROSHAN_KILL;
        case 10: return CHAT_MESSAGE_COURIER_LOST;
        case 11: return CHAT_MESSAGE_COURIER_RESPAWNED;
        case 12: return CHAT_MESSAGE_GLYPH_USED;
        case 13: return CHAT_MESSAGE_ITEM_PURCHASE;
        case 14: return CHAT_MESSAGE_CONNECT;
        case 15: return CHAT_MESSAGE_DISCONNECT;
        case 16: return CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT;
        case 17: return CHAT_MESSAGE_DISCONNECT_TIME_REMAINING;
        case 18: return CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL;
        case 19: return CHAT_MESSAGE_RECONNECT;
        case 20: return CHAT_MESSAGE_ABANDON;
        case 21: return CHAT_MESSAGE_SAFE_TO_LEAVE;
        case 22: return CHAT_MESSAGE_RUNE_PICKUP;
        case 23: return CHAT_MESSAGE_RUNE_BOTTLE;
        case 24: return CHAT_MESSAGE_INTHEBAG;
        case 25: return CHAT_MESSAGE_SECRETSHOP;
        case 26: return CHAT_MESSAGE_ITEM_AUTOPURCHASED;
        case 27: return CHAT_MESSAGE_ITEMS_COMBINED;
        case 28: return CHAT_MESSAGE_SUPER_CREEPS;
        case 29: return CHAT_MESSAGE_CANT_USE_ACTION_ITEM;
        case 30: return CHAT_MESSAGE_CHARGES_EXHAUSTED;
        case 31: return CHAT_MESSAGE_CANTPAUSE;
        case 32: return CHAT_MESSAGE_NOPAUSESLEFT;
        case 33: return CHAT_MESSAGE_CANTPAUSEYET;
        case 34: return CHAT_MESSAGE_PAUSED;
        case 35: return CHAT_MESSAGE_UNPAUSE_COUNTDOWN;
        case 36: return CHAT_MESSAGE_UNPAUSED;
        case 37: return CHAT_MESSAGE_AUTO_UNPAUSED;
        case 38: return CHAT_MESSAGE_YOUPAUSED;
        case 39: return CHAT_MESSAGE_CANTUNPAUSETEAM;
        case 40: return CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER;
        case 41: return CHAT_MESSAGE_VOICE_TEXT_BANNED;
        case 42: return CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME;
        case 43: return CHAT_MESSAGE_REPORT_REMINDER;
        case 44: return CHAT_MESSAGE_ECON_ITEM;
        case 45: return CHAT_MESSAGE_TAUNT;
        case 46: return CHAT_MESSAGE_RANDOM;
        case 47: return CHAT_MESSAGE_RD_TURN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DOTA_CHAT_MESSAGE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<DOTA_CHAT_MESSAGE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DOTA_CHAT_MESSAGE>() {
            public DOTA_CHAT_MESSAGE findValueByNumber(int number) {
              return DOTA_CHAT_MESSAGE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.getDescriptor().getEnumTypes().get(1);
    }

    private static final DOTA_CHAT_MESSAGE[] VALUES = values();

    public static DOTA_CHAT_MESSAGE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private DOTA_CHAT_MESSAGE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.valve.dota2.DOTA_CHAT_MESSAGE)
  }

  /**
   * Protobuf enum {@code com.valve.dota2.EDotaEntityMessages}
   */
  public enum EDotaEntityMessages
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DOTA_UNIT_SPEECH = 0;</code>
     */
    DOTA_UNIT_SPEECH(0, 0),
    /**
     * <code>DOTA_UNIT_SPEECH_MUTE = 1;</code>
     */
    DOTA_UNIT_SPEECH_MUTE(1, 1),
    /**
     * <code>DOTA_UNIT_ADD_GESTURE = 2;</code>
     */
    DOTA_UNIT_ADD_GESTURE(2, 2),
    /**
     * <code>DOTA_UNIT_REMOVE_GESTURE = 3;</code>
     */
    DOTA_UNIT_REMOVE_GESTURE(3, 3),
    /**
     * <code>DOTA_UNIT_REMOVE_ALL_GESTURES = 4;</code>
     */
    DOTA_UNIT_REMOVE_ALL_GESTURES(4, 4),
    /**
     * <code>DOTA_UNIT_FADE_GESTURE = 6;</code>
     */
    DOTA_UNIT_FADE_GESTURE(5, 6),
    ;

    /**
     * <code>DOTA_UNIT_SPEECH = 0;</code>
     */
    public static final int DOTA_UNIT_SPEECH_VALUE = 0;
    /**
     * <code>DOTA_UNIT_SPEECH_MUTE = 1;</code>
     */
    public static final int DOTA_UNIT_SPEECH_MUTE_VALUE = 1;
    /**
     * <code>DOTA_UNIT_ADD_GESTURE = 2;</code>
     */
    public static final int DOTA_UNIT_ADD_GESTURE_VALUE = 2;
    /**
     * <code>DOTA_UNIT_REMOVE_GESTURE = 3;</code>
     */
    public static final int DOTA_UNIT_REMOVE_GESTURE_VALUE = 3;
    /**
     * <code>DOTA_UNIT_REMOVE_ALL_GESTURES = 4;</code>
     */
    public static final int DOTA_UNIT_REMOVE_ALL_GESTURES_VALUE = 4;
    /**
     * <code>DOTA_UNIT_FADE_GESTURE = 6;</code>
     */
    public static final int DOTA_UNIT_FADE_GESTURE_VALUE = 6;


    public final int getNumber() { return value; }

    public static EDotaEntityMessages valueOf(int value) {
      switch (value) {
        case 0: return DOTA_UNIT_SPEECH;
        case 1: return DOTA_UNIT_SPEECH_MUTE;
        case 2: return DOTA_UNIT_ADD_GESTURE;
        case 3: return DOTA_UNIT_REMOVE_GESTURE;
        case 4: return DOTA_UNIT_REMOVE_ALL_GESTURES;
        case 6: return DOTA_UNIT_FADE_GESTURE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EDotaEntityMessages>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EDotaEntityMessages>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EDotaEntityMessages>() {
            public EDotaEntityMessages findValueByNumber(int number) {
              return EDotaEntityMessages.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.getDescriptor().getEnumTypes().get(2);
    }

    private static final EDotaEntityMessages[] VALUES = values();

    public static EDotaEntityMessages valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EDotaEntityMessages(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.valve.dota2.EDotaEntityMessages)
  }

  /**
   * Protobuf enum {@code com.valve.dota2.DOTA_PARTICLE_MESSAGE}
   */
  public enum DOTA_PARTICLE_MESSAGE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_CREATE = 0;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_CREATE(0, 0),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE = 1;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE(1, 1),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD = 2;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD(2, 2),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION = 3;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION(3, 3),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK = 4;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK(4, 4),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT = 5;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT(5, 5),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET = 6;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET(6, 6),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_DESTROY = 7;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_DESTROY(7, 7),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING = 8;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING(8, 8),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_RELEASE = 9;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_RELEASE(9, 9),
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_LATENCY = 10;</code>
     */
    DOTA_PARTICLE_MANAGER_EVENT_LATENCY(10, 10),
    ;

    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_CREATE = 0;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_CREATE_VALUE = 0;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE = 1;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_UPDATE_VALUE = 1;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD = 2;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD_VALUE = 2;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION = 3;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION_VALUE = 3;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK = 4;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK_VALUE = 4;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT = 5;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT_VALUE = 5;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET = 6;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET_VALUE = 6;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_DESTROY = 7;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_DESTROY_VALUE = 7;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING = 8;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING_VALUE = 8;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_RELEASE = 9;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_RELEASE_VALUE = 9;
    /**
     * <code>DOTA_PARTICLE_MANAGER_EVENT_LATENCY = 10;</code>
     */
    public static final int DOTA_PARTICLE_MANAGER_EVENT_LATENCY_VALUE = 10;


    public final int getNumber() { return value; }

    public static DOTA_PARTICLE_MESSAGE valueOf(int value) {
      switch (value) {
        case 0: return DOTA_PARTICLE_MANAGER_EVENT_CREATE;
        case 1: return DOTA_PARTICLE_MANAGER_EVENT_UPDATE;
        case 2: return DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD;
        case 3: return DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION;
        case 4: return DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK;
        case 5: return DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT;
        case 6: return DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET;
        case 7: return DOTA_PARTICLE_MANAGER_EVENT_DESTROY;
        case 8: return DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING;
        case 9: return DOTA_PARTICLE_MANAGER_EVENT_RELEASE;
        case 10: return DOTA_PARTICLE_MANAGER_EVENT_LATENCY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DOTA_PARTICLE_MESSAGE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<DOTA_PARTICLE_MESSAGE>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DOTA_PARTICLE_MESSAGE>() {
            public DOTA_PARTICLE_MESSAGE findValueByNumber(int number) {
              return DOTA_PARTICLE_MESSAGE.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.getDescriptor().getEnumTypes().get(3);
    }

    private static final DOTA_PARTICLE_MESSAGE[] VALUES = values();

    public static DOTA_PARTICLE_MESSAGE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private DOTA_PARTICLE_MESSAGE(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.valve.dota2.DOTA_PARTICLE_MESSAGE)
  }

  /**
   * Protobuf enum {@code com.valve.dota2.DOTA_OVERHEAD_ALERT}
   *
   * <pre>
   * If you modify this, make sure you update g_OverheadMessageType!
   * </pre>
   */
  public enum DOTA_OVERHEAD_ALERT
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>OVERHEAD_ALERT_GOLD = 0;</code>
     */
    OVERHEAD_ALERT_GOLD(0, 0),
    /**
     * <code>OVERHEAD_ALERT_DENY = 1;</code>
     */
    OVERHEAD_ALERT_DENY(1, 1),
    /**
     * <code>OVERHEAD_ALERT_CRITICAL = 2;</code>
     */
    OVERHEAD_ALERT_CRITICAL(2, 2),
    /**
     * <code>OVERHEAD_ALERT_XP = 3;</code>
     */
    OVERHEAD_ALERT_XP(3, 3),
    /**
     * <code>OVERHEAD_ALERT_BONUS_SPELL_DAMAGE = 4;</code>
     */
    OVERHEAD_ALERT_BONUS_SPELL_DAMAGE(4, 4),
    /**
     * <code>OVERHEAD_ALERT_MISS = 5;</code>
     */
    OVERHEAD_ALERT_MISS(5, 5),
    /**
     * <code>OVERHEAD_ALERT_DAMAGE = 6;</code>
     */
    OVERHEAD_ALERT_DAMAGE(6, 6),
    /**
     * <code>OVERHEAD_ALERT_EVADE = 7;</code>
     */
    OVERHEAD_ALERT_EVADE(7, 7),
    /**
     * <code>OVERHEAD_ALERT_BLOCK = 8;</code>
     */
    OVERHEAD_ALERT_BLOCK(8, 8),
    /**
     * <code>OVERHEAD_ALERT_BONUS_POISON_DAMAGE = 9;</code>
     */
    OVERHEAD_ALERT_BONUS_POISON_DAMAGE(9, 9),
    ;

    /**
     * <code>OVERHEAD_ALERT_GOLD = 0;</code>
     */
    public static final int OVERHEAD_ALERT_GOLD_VALUE = 0;
    /**
     * <code>OVERHEAD_ALERT_DENY = 1;</code>
     */
    public static final int OVERHEAD_ALERT_DENY_VALUE = 1;
    /**
     * <code>OVERHEAD_ALERT_CRITICAL = 2;</code>
     */
    public static final int OVERHEAD_ALERT_CRITICAL_VALUE = 2;
    /**
     * <code>OVERHEAD_ALERT_XP = 3;</code>
     */
    public static final int OVERHEAD_ALERT_XP_VALUE = 3;
    /**
     * <code>OVERHEAD_ALERT_BONUS_SPELL_DAMAGE = 4;</code>
     */
    public static final int OVERHEAD_ALERT_BONUS_SPELL_DAMAGE_VALUE = 4;
    /**
     * <code>OVERHEAD_ALERT_MISS = 5;</code>
     */
    public static final int OVERHEAD_ALERT_MISS_VALUE = 5;
    /**
     * <code>OVERHEAD_ALERT_DAMAGE = 6;</code>
     */
    public static final int OVERHEAD_ALERT_DAMAGE_VALUE = 6;
    /**
     * <code>OVERHEAD_ALERT_EVADE = 7;</code>
     */
    public static final int OVERHEAD_ALERT_EVADE_VALUE = 7;
    /**
     * <code>OVERHEAD_ALERT_BLOCK = 8;</code>
     */
    public static final int OVERHEAD_ALERT_BLOCK_VALUE = 8;
    /**
     * <code>OVERHEAD_ALERT_BONUS_POISON_DAMAGE = 9;</code>
     */
    public static final int OVERHEAD_ALERT_BONUS_POISON_DAMAGE_VALUE = 9;


    public final int getNumber() { return value; }

    public static DOTA_OVERHEAD_ALERT valueOf(int value) {
      switch (value) {
        case 0: return OVERHEAD_ALERT_GOLD;
        case 1: return OVERHEAD_ALERT_DENY;
        case 2: return OVERHEAD_ALERT_CRITICAL;
        case 3: return OVERHEAD_ALERT_XP;
        case 4: return OVERHEAD_ALERT_BONUS_SPELL_DAMAGE;
        case 5: return OVERHEAD_ALERT_MISS;
        case 6: return OVERHEAD_ALERT_DAMAGE;
        case 7: return OVERHEAD_ALERT_EVADE;
        case 8: return OVERHEAD_ALERT_BLOCK;
        case 9: return OVERHEAD_ALERT_BONUS_POISON_DAMAGE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DOTA_OVERHEAD_ALERT>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<DOTA_OVERHEAD_ALERT>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DOTA_OVERHEAD_ALERT>() {
            public DOTA_OVERHEAD_ALERT findValueByNumber(int number) {
              return DOTA_OVERHEAD_ALERT.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.getDescriptor().getEnumTypes().get(4);
    }

    private static final DOTA_OVERHEAD_ALERT[] VALUES = values();

    public static DOTA_OVERHEAD_ALERT valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private DOTA_OVERHEAD_ALERT(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.valve.dota2.DOTA_OVERHEAD_ALERT)
  }

  public interface CDOTAUserMsg_AIDebugLineOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string message = 1;
    /**
     * <code>optional string message = 1;</code>
     */
    boolean hasMessage();
    /**
     * <code>optional string message = 1;</code>
     */
    java.lang.String getMessage();
    /**
     * <code>optional string message = 1;</code>
     */
    com.google.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_AIDebugLine}
   */
  public static final class CDOTAUserMsg_AIDebugLine extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_AIDebugLineOrBuilder {
    // Use CDOTAUserMsg_AIDebugLine.newBuilder() to construct.
    private CDOTAUserMsg_AIDebugLine(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_AIDebugLine(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_AIDebugLine defaultInstance;
    public static CDOTAUserMsg_AIDebugLine getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_AIDebugLine getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_AIDebugLine(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              message_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_AIDebugLine> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_AIDebugLine>() {
      public CDOTAUserMsg_AIDebugLine parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_AIDebugLine(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_AIDebugLine> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string message = 1;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    private java.lang.Object message_;
    /**
     * <code>optional string message = 1;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string message = 1;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string message = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      message_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getMessageBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMessageBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_AIDebugLine}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLineOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          bitField0_ |= 0x00000001;
          message_ = other.message_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_AIDebugLine) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string message = 1;
      private java.lang.Object message_ = "";
      /**
       * <code>optional string message = 1;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_AIDebugLine)
    }

    static {
      defaultInstance = new CDOTAUserMsg_AIDebugLine(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_AIDebugLine)
  }

  public interface CDOTAUserMsg_PingOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string message = 1;
    /**
     * <code>optional string message = 1;</code>
     */
    boolean hasMessage();
    /**
     * <code>optional string message = 1;</code>
     */
    java.lang.String getMessage();
    /**
     * <code>optional string message = 1;</code>
     */
    com.google.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_Ping}
   */
  public static final class CDOTAUserMsg_Ping extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_PingOrBuilder {
    // Use CDOTAUserMsg_Ping.newBuilder() to construct.
    private CDOTAUserMsg_Ping(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_Ping(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_Ping defaultInstance;
    public static CDOTAUserMsg_Ping getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_Ping getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_Ping(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              message_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_Ping_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_Ping_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_Ping> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_Ping>() {
      public CDOTAUserMsg_Ping parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_Ping(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_Ping> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string message = 1;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    private java.lang.Object message_;
    /**
     * <code>optional string message = 1;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string message = 1;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string message = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      message_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getMessageBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMessageBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_Ping}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_PingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_Ping_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_Ping_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_Ping_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          bitField0_ |= 0x00000001;
          message_ = other.message_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_Ping) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string message = 1;
      private java.lang.Object message_ = "";
      /**
       * <code>optional string message = 1;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_Ping)
    }

    static {
      defaultInstance = new CDOTAUserMsg_Ping(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_Ping)
  }

  public interface CDOTAUserMsg_ChatEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;
    /**
     * <code>required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;</code>
     */
    com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE getType();

    // optional uint32 value = 2;
    /**
     * <code>optional uint32 value = 2;</code>
     */
    boolean hasValue();
    /**
     * <code>optional uint32 value = 2;</code>
     */
    int getValue();

    // optional sint32 playerid_1 = 3 [default = -1];
    /**
     * <code>optional sint32 playerid_1 = 3 [default = -1];</code>
     *
     * <pre>
     * ugh
     * </pre>
     */
    boolean hasPlayerid1();
    /**
     * <code>optional sint32 playerid_1 = 3 [default = -1];</code>
     *
     * <pre>
     * ugh
     * </pre>
     */
    int getPlayerid1();

    // optional sint32 playerid_2 = 4 [default = -1];
    /**
     * <code>optional sint32 playerid_2 = 4 [default = -1];</code>
     */
    boolean hasPlayerid2();
    /**
     * <code>optional sint32 playerid_2 = 4 [default = -1];</code>
     */
    int getPlayerid2();

    // optional sint32 playerid_3 = 5 [default = -1];
    /**
     * <code>optional sint32 playerid_3 = 5 [default = -1];</code>
     */
    boolean hasPlayerid3();
    /**
     * <code>optional sint32 playerid_3 = 5 [default = -1];</code>
     */
    int getPlayerid3();

    // optional sint32 playerid_4 = 6 [default = -1];
    /**
     * <code>optional sint32 playerid_4 = 6 [default = -1];</code>
     */
    boolean hasPlayerid4();
    /**
     * <code>optional sint32 playerid_4 = 6 [default = -1];</code>
     */
    int getPlayerid4();

    // optional sint32 playerid_5 = 7 [default = -1];
    /**
     * <code>optional sint32 playerid_5 = 7 [default = -1];</code>
     */
    boolean hasPlayerid5();
    /**
     * <code>optional sint32 playerid_5 = 7 [default = -1];</code>
     */
    int getPlayerid5();

    // optional sint32 playerid_6 = 8 [default = -1];
    /**
     * <code>optional sint32 playerid_6 = 8 [default = -1];</code>
     */
    boolean hasPlayerid6();
    /**
     * <code>optional sint32 playerid_6 = 8 [default = -1];</code>
     */
    int getPlayerid6();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ChatEvent}
   */
  public static final class CDOTAUserMsg_ChatEvent extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_ChatEventOrBuilder {
    // Use CDOTAUserMsg_ChatEvent.newBuilder() to construct.
    private CDOTAUserMsg_ChatEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_ChatEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_ChatEvent defaultInstance;
    public static CDOTAUserMsg_ChatEvent getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_ChatEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_ChatEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE value = com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              value_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              playerid1_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              playerid2_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              playerid3_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              playerid4_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              playerid5_ = input.readSInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              playerid6_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_ChatEvent> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_ChatEvent>() {
      public CDOTAUserMsg_ChatEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_ChatEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_ChatEvent> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE type_;
    /**
     * <code>required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;</code>
     */
    public com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE getType() {
      return type_;
    }

    // optional uint32 value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private int value_;
    /**
     * <code>optional uint32 value = 2;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 value = 2;</code>
     */
    public int getValue() {
      return value_;
    }

    // optional sint32 playerid_1 = 3 [default = -1];
    public static final int PLAYERID_1_FIELD_NUMBER = 3;
    private int playerid1_;
    /**
     * <code>optional sint32 playerid_1 = 3 [default = -1];</code>
     *
     * <pre>
     * ugh
     * </pre>
     */
    public boolean hasPlayerid1() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sint32 playerid_1 = 3 [default = -1];</code>
     *
     * <pre>
     * ugh
     * </pre>
     */
    public int getPlayerid1() {
      return playerid1_;
    }

    // optional sint32 playerid_2 = 4 [default = -1];
    public static final int PLAYERID_2_FIELD_NUMBER = 4;
    private int playerid2_;
    /**
     * <code>optional sint32 playerid_2 = 4 [default = -1];</code>
     */
    public boolean hasPlayerid2() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 playerid_2 = 4 [default = -1];</code>
     */
    public int getPlayerid2() {
      return playerid2_;
    }

    // optional sint32 playerid_3 = 5 [default = -1];
    public static final int PLAYERID_3_FIELD_NUMBER = 5;
    private int playerid3_;
    /**
     * <code>optional sint32 playerid_3 = 5 [default = -1];</code>
     */
    public boolean hasPlayerid3() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 playerid_3 = 5 [default = -1];</code>
     */
    public int getPlayerid3() {
      return playerid3_;
    }

    // optional sint32 playerid_4 = 6 [default = -1];
    public static final int PLAYERID_4_FIELD_NUMBER = 6;
    private int playerid4_;
    /**
     * <code>optional sint32 playerid_4 = 6 [default = -1];</code>
     */
    public boolean hasPlayerid4() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 playerid_4 = 6 [default = -1];</code>
     */
    public int getPlayerid4() {
      return playerid4_;
    }

    // optional sint32 playerid_5 = 7 [default = -1];
    public static final int PLAYERID_5_FIELD_NUMBER = 7;
    private int playerid5_;
    /**
     * <code>optional sint32 playerid_5 = 7 [default = -1];</code>
     */
    public boolean hasPlayerid5() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional sint32 playerid_5 = 7 [default = -1];</code>
     */
    public int getPlayerid5() {
      return playerid5_;
    }

    // optional sint32 playerid_6 = 8 [default = -1];
    public static final int PLAYERID_6_FIELD_NUMBER = 8;
    private int playerid6_;
    /**
     * <code>optional sint32 playerid_6 = 8 [default = -1];</code>
     */
    public boolean hasPlayerid6() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional sint32 playerid_6 = 8 [default = -1];</code>
     */
    public int getPlayerid6() {
      return playerid6_;
    }

    private void initFields() {
      type_ = com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE.CHAT_MESSAGE_INVALID;
      value_ = 0;
      playerid1_ = -1;
      playerid2_ = -1;
      playerid3_ = -1;
      playerid4_ = -1;
      playerid5_ = -1;
      playerid6_ = -1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, playerid1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, playerid2_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, playerid3_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(6, playerid4_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeSInt32(7, playerid5_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeSInt32(8, playerid6_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, playerid1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, playerid2_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, playerid3_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, playerid4_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(7, playerid5_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(8, playerid6_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ChatEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE.CHAT_MESSAGE_INVALID;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        playerid1_ = -1;
        bitField0_ = (bitField0_ & ~0x00000004);
        playerid2_ = -1;
        bitField0_ = (bitField0_ & ~0x00000008);
        playerid3_ = -1;
        bitField0_ = (bitField0_ & ~0x00000010);
        playerid4_ = -1;
        bitField0_ = (bitField0_ & ~0x00000020);
        playerid5_ = -1;
        bitField0_ = (bitField0_ & ~0x00000040);
        playerid6_ = -1;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.playerid1_ = playerid1_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.playerid2_ = playerid2_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.playerid3_ = playerid3_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.playerid4_ = playerid4_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.playerid5_ = playerid5_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.playerid6_ = playerid6_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasPlayerid1()) {
          setPlayerid1(other.getPlayerid1());
        }
        if (other.hasPlayerid2()) {
          setPlayerid2(other.getPlayerid2());
        }
        if (other.hasPlayerid3()) {
          setPlayerid3(other.getPlayerid3());
        }
        if (other.hasPlayerid4()) {
          setPlayerid4(other.getPlayerid4());
        }
        if (other.hasPlayerid5()) {
          setPlayerid5(other.getPlayerid5());
        }
        if (other.hasPlayerid6()) {
          setPlayerid6(other.getPlayerid6());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ChatEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;
      private com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE type_ = com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE.CHAT_MESSAGE_INVALID;
      /**
       * <code>required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;</code>
       */
      public com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE getType() {
        return type_;
      }
      /**
       * <code>required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;</code>
       */
      public Builder setType(com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.valve.dota2.DOTA_CHAT_MESSAGE type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.valve.dota2.DotaUsermessages.DOTA_CHAT_MESSAGE.CHAT_MESSAGE_INVALID;
        onChanged();
        return this;
      }

      // optional uint32 value = 2;
      private int value_ ;
      /**
       * <code>optional uint32 value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 value = 2;</code>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional uint32 value = 2;</code>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 value = 2;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 playerid_1 = 3 [default = -1];
      private int playerid1_ = -1;
      /**
       * <code>optional sint32 playerid_1 = 3 [default = -1];</code>
       *
       * <pre>
       * ugh
       * </pre>
       */
      public boolean hasPlayerid1() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sint32 playerid_1 = 3 [default = -1];</code>
       *
       * <pre>
       * ugh
       * </pre>
       */
      public int getPlayerid1() {
        return playerid1_;
      }
      /**
       * <code>optional sint32 playerid_1 = 3 [default = -1];</code>
       *
       * <pre>
       * ugh
       * </pre>
       */
      public Builder setPlayerid1(int value) {
        bitField0_ |= 0x00000004;
        playerid1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 playerid_1 = 3 [default = -1];</code>
       *
       * <pre>
       * ugh
       * </pre>
       */
      public Builder clearPlayerid1() {
        bitField0_ = (bitField0_ & ~0x00000004);
        playerid1_ = -1;
        onChanged();
        return this;
      }

      // optional sint32 playerid_2 = 4 [default = -1];
      private int playerid2_ = -1;
      /**
       * <code>optional sint32 playerid_2 = 4 [default = -1];</code>
       */
      public boolean hasPlayerid2() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 playerid_2 = 4 [default = -1];</code>
       */
      public int getPlayerid2() {
        return playerid2_;
      }
      /**
       * <code>optional sint32 playerid_2 = 4 [default = -1];</code>
       */
      public Builder setPlayerid2(int value) {
        bitField0_ |= 0x00000008;
        playerid2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 playerid_2 = 4 [default = -1];</code>
       */
      public Builder clearPlayerid2() {
        bitField0_ = (bitField0_ & ~0x00000008);
        playerid2_ = -1;
        onChanged();
        return this;
      }

      // optional sint32 playerid_3 = 5 [default = -1];
      private int playerid3_ = -1;
      /**
       * <code>optional sint32 playerid_3 = 5 [default = -1];</code>
       */
      public boolean hasPlayerid3() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 playerid_3 = 5 [default = -1];</code>
       */
      public int getPlayerid3() {
        return playerid3_;
      }
      /**
       * <code>optional sint32 playerid_3 = 5 [default = -1];</code>
       */
      public Builder setPlayerid3(int value) {
        bitField0_ |= 0x00000010;
        playerid3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 playerid_3 = 5 [default = -1];</code>
       */
      public Builder clearPlayerid3() {
        bitField0_ = (bitField0_ & ~0x00000010);
        playerid3_ = -1;
        onChanged();
        return this;
      }

      // optional sint32 playerid_4 = 6 [default = -1];
      private int playerid4_ = -1;
      /**
       * <code>optional sint32 playerid_4 = 6 [default = -1];</code>
       */
      public boolean hasPlayerid4() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 playerid_4 = 6 [default = -1];</code>
       */
      public int getPlayerid4() {
        return playerid4_;
      }
      /**
       * <code>optional sint32 playerid_4 = 6 [default = -1];</code>
       */
      public Builder setPlayerid4(int value) {
        bitField0_ |= 0x00000020;
        playerid4_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 playerid_4 = 6 [default = -1];</code>
       */
      public Builder clearPlayerid4() {
        bitField0_ = (bitField0_ & ~0x00000020);
        playerid4_ = -1;
        onChanged();
        return this;
      }

      // optional sint32 playerid_5 = 7 [default = -1];
      private int playerid5_ = -1;
      /**
       * <code>optional sint32 playerid_5 = 7 [default = -1];</code>
       */
      public boolean hasPlayerid5() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional sint32 playerid_5 = 7 [default = -1];</code>
       */
      public int getPlayerid5() {
        return playerid5_;
      }
      /**
       * <code>optional sint32 playerid_5 = 7 [default = -1];</code>
       */
      public Builder setPlayerid5(int value) {
        bitField0_ |= 0x00000040;
        playerid5_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 playerid_5 = 7 [default = -1];</code>
       */
      public Builder clearPlayerid5() {
        bitField0_ = (bitField0_ & ~0x00000040);
        playerid5_ = -1;
        onChanged();
        return this;
      }

      // optional sint32 playerid_6 = 8 [default = -1];
      private int playerid6_ = -1;
      /**
       * <code>optional sint32 playerid_6 = 8 [default = -1];</code>
       */
      public boolean hasPlayerid6() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional sint32 playerid_6 = 8 [default = -1];</code>
       */
      public int getPlayerid6() {
        return playerid6_;
      }
      /**
       * <code>optional sint32 playerid_6 = 8 [default = -1];</code>
       */
      public Builder setPlayerid6(int value) {
        bitField0_ |= 0x00000080;
        playerid6_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 playerid_6 = 8 [default = -1];</code>
       */
      public Builder clearPlayerid6() {
        bitField0_ = (bitField0_ & ~0x00000080);
        playerid6_ = -1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ChatEvent)
    }

    static {
      defaultInstance = new CDOTAUserMsg_ChatEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ChatEvent)
  }

  public interface CDOTAUserMsg_CombatLogDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 type = 1;
    /**
     * <code>optional uint32 type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional uint32 type = 1;</code>
     */
    int getType();

    // optional uint32 target_name = 2;
    /**
     * <code>optional uint32 target_name = 2;</code>
     */
    boolean hasTargetName();
    /**
     * <code>optional uint32 target_name = 2;</code>
     */
    int getTargetName();

    // optional uint32 attacker_name = 3;
    /**
     * <code>optional uint32 attacker_name = 3;</code>
     */
    boolean hasAttackerName();
    /**
     * <code>optional uint32 attacker_name = 3;</code>
     */
    int getAttackerName();

    // optional bool attacker_illusion = 4;
    /**
     * <code>optional bool attacker_illusion = 4;</code>
     */
    boolean hasAttackerIllusion();
    /**
     * <code>optional bool attacker_illusion = 4;</code>
     */
    boolean getAttackerIllusion();

    // optional bool target_illusion = 5;
    /**
     * <code>optional bool target_illusion = 5;</code>
     */
    boolean hasTargetIllusion();
    /**
     * <code>optional bool target_illusion = 5;</code>
     */
    boolean getTargetIllusion();

    // optional uint32 inflictor_name = 6;
    /**
     * <code>optional uint32 inflictor_name = 6;</code>
     */
    boolean hasInflictorName();
    /**
     * <code>optional uint32 inflictor_name = 6;</code>
     */
    int getInflictorName();

    // optional int32 value = 7;
    /**
     * <code>optional int32 value = 7;</code>
     */
    boolean hasValue();
    /**
     * <code>optional int32 value = 7;</code>
     */
    int getValue();

    // optional int32 health = 8;
    /**
     * <code>optional int32 health = 8;</code>
     */
    boolean hasHealth();
    /**
     * <code>optional int32 health = 8;</code>
     */
    int getHealth();

    // optional float time = 9;
    /**
     * <code>optional float time = 9;</code>
     */
    boolean hasTime();
    /**
     * <code>optional float time = 9;</code>
     */
    float getTime();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_CombatLogData}
   */
  public static final class CDOTAUserMsg_CombatLogData extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_CombatLogDataOrBuilder {
    // Use CDOTAUserMsg_CombatLogData.newBuilder() to construct.
    private CDOTAUserMsg_CombatLogData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_CombatLogData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_CombatLogData defaultInstance;
    public static CDOTAUserMsg_CombatLogData getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_CombatLogData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_CombatLogData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              type_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              targetName_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              attackerName_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              attackerIllusion_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              targetIllusion_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              inflictorName_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              value_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              health_ = input.readInt32();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              time_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_CombatLogData> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_CombatLogData>() {
      public CDOTAUserMsg_CombatLogData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_CombatLogData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_CombatLogData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional uint32 type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 type = 1;</code>
     */
    public int getType() {
      return type_;
    }

    // optional uint32 target_name = 2;
    public static final int TARGET_NAME_FIELD_NUMBER = 2;
    private int targetName_;
    /**
     * <code>optional uint32 target_name = 2;</code>
     */
    public boolean hasTargetName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 target_name = 2;</code>
     */
    public int getTargetName() {
      return targetName_;
    }

    // optional uint32 attacker_name = 3;
    public static final int ATTACKER_NAME_FIELD_NUMBER = 3;
    private int attackerName_;
    /**
     * <code>optional uint32 attacker_name = 3;</code>
     */
    public boolean hasAttackerName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 attacker_name = 3;</code>
     */
    public int getAttackerName() {
      return attackerName_;
    }

    // optional bool attacker_illusion = 4;
    public static final int ATTACKER_ILLUSION_FIELD_NUMBER = 4;
    private boolean attackerIllusion_;
    /**
     * <code>optional bool attacker_illusion = 4;</code>
     */
    public boolean hasAttackerIllusion() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool attacker_illusion = 4;</code>
     */
    public boolean getAttackerIllusion() {
      return attackerIllusion_;
    }

    // optional bool target_illusion = 5;
    public static final int TARGET_ILLUSION_FIELD_NUMBER = 5;
    private boolean targetIllusion_;
    /**
     * <code>optional bool target_illusion = 5;</code>
     */
    public boolean hasTargetIllusion() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool target_illusion = 5;</code>
     */
    public boolean getTargetIllusion() {
      return targetIllusion_;
    }

    // optional uint32 inflictor_name = 6;
    public static final int INFLICTOR_NAME_FIELD_NUMBER = 6;
    private int inflictorName_;
    /**
     * <code>optional uint32 inflictor_name = 6;</code>
     */
    public boolean hasInflictorName() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 inflictor_name = 6;</code>
     */
    public int getInflictorName() {
      return inflictorName_;
    }

    // optional int32 value = 7;
    public static final int VALUE_FIELD_NUMBER = 7;
    private int value_;
    /**
     * <code>optional int32 value = 7;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 value = 7;</code>
     */
    public int getValue() {
      return value_;
    }

    // optional int32 health = 8;
    public static final int HEALTH_FIELD_NUMBER = 8;
    private int health_;
    /**
     * <code>optional int32 health = 8;</code>
     */
    public boolean hasHealth() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 health = 8;</code>
     */
    public int getHealth() {
      return health_;
    }

    // optional float time = 9;
    public static final int TIME_FIELD_NUMBER = 9;
    private float time_;
    /**
     * <code>optional float time = 9;</code>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float time = 9;</code>
     */
    public float getTime() {
      return time_;
    }

    private void initFields() {
      type_ = 0;
      targetName_ = 0;
      attackerName_ = 0;
      attackerIllusion_ = false;
      targetIllusion_ = false;
      inflictorName_ = 0;
      value_ = 0;
      health_ = 0;
      time_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, targetName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, attackerName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, attackerIllusion_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, targetIllusion_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, inflictorName_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, value_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, health_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, time_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, targetName_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, attackerName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, attackerIllusion_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, targetIllusion_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, inflictorName_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, value_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, health_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, time_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_CombatLogData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        targetName_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        attackerName_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        attackerIllusion_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        targetIllusion_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        inflictorName_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        health_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        time_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.targetName_ = targetName_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.attackerName_ = attackerName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.attackerIllusion_ = attackerIllusion_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.targetIllusion_ = targetIllusion_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.inflictorName_ = inflictorName_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.health_ = health_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.time_ = time_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasTargetName()) {
          setTargetName(other.getTargetName());
        }
        if (other.hasAttackerName()) {
          setAttackerName(other.getAttackerName());
        }
        if (other.hasAttackerIllusion()) {
          setAttackerIllusion(other.getAttackerIllusion());
        }
        if (other.hasTargetIllusion()) {
          setTargetIllusion(other.getTargetIllusion());
        }
        if (other.hasInflictorName()) {
          setInflictorName(other.getInflictorName());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasHealth()) {
          setHealth(other.getHealth());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 type = 1;
      private int type_ ;
      /**
       * <code>optional uint32 type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 type = 1;</code>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional uint32 type = 1;</code>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 target_name = 2;
      private int targetName_ ;
      /**
       * <code>optional uint32 target_name = 2;</code>
       */
      public boolean hasTargetName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 target_name = 2;</code>
       */
      public int getTargetName() {
        return targetName_;
      }
      /**
       * <code>optional uint32 target_name = 2;</code>
       */
      public Builder setTargetName(int value) {
        bitField0_ |= 0x00000002;
        targetName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 target_name = 2;</code>
       */
      public Builder clearTargetName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        targetName_ = 0;
        onChanged();
        return this;
      }

      // optional uint32 attacker_name = 3;
      private int attackerName_ ;
      /**
       * <code>optional uint32 attacker_name = 3;</code>
       */
      public boolean hasAttackerName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 attacker_name = 3;</code>
       */
      public int getAttackerName() {
        return attackerName_;
      }
      /**
       * <code>optional uint32 attacker_name = 3;</code>
       */
      public Builder setAttackerName(int value) {
        bitField0_ |= 0x00000004;
        attackerName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 attacker_name = 3;</code>
       */
      public Builder clearAttackerName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        attackerName_ = 0;
        onChanged();
        return this;
      }

      // optional bool attacker_illusion = 4;
      private boolean attackerIllusion_ ;
      /**
       * <code>optional bool attacker_illusion = 4;</code>
       */
      public boolean hasAttackerIllusion() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool attacker_illusion = 4;</code>
       */
      public boolean getAttackerIllusion() {
        return attackerIllusion_;
      }
      /**
       * <code>optional bool attacker_illusion = 4;</code>
       */
      public Builder setAttackerIllusion(boolean value) {
        bitField0_ |= 0x00000008;
        attackerIllusion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool attacker_illusion = 4;</code>
       */
      public Builder clearAttackerIllusion() {
        bitField0_ = (bitField0_ & ~0x00000008);
        attackerIllusion_ = false;
        onChanged();
        return this;
      }

      // optional bool target_illusion = 5;
      private boolean targetIllusion_ ;
      /**
       * <code>optional bool target_illusion = 5;</code>
       */
      public boolean hasTargetIllusion() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool target_illusion = 5;</code>
       */
      public boolean getTargetIllusion() {
        return targetIllusion_;
      }
      /**
       * <code>optional bool target_illusion = 5;</code>
       */
      public Builder setTargetIllusion(boolean value) {
        bitField0_ |= 0x00000010;
        targetIllusion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool target_illusion = 5;</code>
       */
      public Builder clearTargetIllusion() {
        bitField0_ = (bitField0_ & ~0x00000010);
        targetIllusion_ = false;
        onChanged();
        return this;
      }

      // optional uint32 inflictor_name = 6;
      private int inflictorName_ ;
      /**
       * <code>optional uint32 inflictor_name = 6;</code>
       */
      public boolean hasInflictorName() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 inflictor_name = 6;</code>
       */
      public int getInflictorName() {
        return inflictorName_;
      }
      /**
       * <code>optional uint32 inflictor_name = 6;</code>
       */
      public Builder setInflictorName(int value) {
        bitField0_ |= 0x00000020;
        inflictorName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 inflictor_name = 6;</code>
       */
      public Builder clearInflictorName() {
        bitField0_ = (bitField0_ & ~0x00000020);
        inflictorName_ = 0;
        onChanged();
        return this;
      }

      // optional int32 value = 7;
      private int value_ ;
      /**
       * <code>optional int32 value = 7;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 value = 7;</code>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional int32 value = 7;</code>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000040;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 value = 7;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000040);
        value_ = 0;
        onChanged();
        return this;
      }

      // optional int32 health = 8;
      private int health_ ;
      /**
       * <code>optional int32 health = 8;</code>
       */
      public boolean hasHealth() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 health = 8;</code>
       */
      public int getHealth() {
        return health_;
      }
      /**
       * <code>optional int32 health = 8;</code>
       */
      public Builder setHealth(int value) {
        bitField0_ |= 0x00000080;
        health_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 health = 8;</code>
       */
      public Builder clearHealth() {
        bitField0_ = (bitField0_ & ~0x00000080);
        health_ = 0;
        onChanged();
        return this;
      }

      // optional float time = 9;
      private float time_ ;
      /**
       * <code>optional float time = 9;</code>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float time = 9;</code>
       */
      public float getTime() {
        return time_;
      }
      /**
       * <code>optional float time = 9;</code>
       */
      public Builder setTime(float value) {
        bitField0_ |= 0x00000100;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float time = 9;</code>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000100);
        time_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_CombatLogData)
    }

    static {
      defaultInstance = new CDOTAUserMsg_CombatLogData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_CombatLogData)
  }

  public interface CDOTAUserMsg_CombatLogShowDeathOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_CombatLogShowDeath}
   */
  public static final class CDOTAUserMsg_CombatLogShowDeath extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_CombatLogShowDeathOrBuilder {
    // Use CDOTAUserMsg_CombatLogShowDeath.newBuilder() to construct.
    private CDOTAUserMsg_CombatLogShowDeath(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_CombatLogShowDeath(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_CombatLogShowDeath defaultInstance;
    public static CDOTAUserMsg_CombatLogShowDeath getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_CombatLogShowDeath getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_CombatLogShowDeath(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_CombatLogShowDeath> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_CombatLogShowDeath>() {
      public CDOTAUserMsg_CombatLogShowDeath parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_CombatLogShowDeath(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_CombatLogShowDeath> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_CombatLogShowDeath}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeathOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatLogShowDeath) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_CombatLogShowDeath)
    }

    static {
      defaultInstance = new CDOTAUserMsg_CombatLogShowDeath(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_CombatLogShowDeath)
  }

  public interface CDOTAUserMsg_BotChatOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 player_id = 1;
    /**
     * <code>optional uint32 player_id = 1;</code>
     */
    boolean hasPlayerId();
    /**
     * <code>optional uint32 player_id = 1;</code>
     */
    int getPlayerId();

    // optional string format = 2;
    /**
     * <code>optional string format = 2;</code>
     */
    boolean hasFormat();
    /**
     * <code>optional string format = 2;</code>
     */
    java.lang.String getFormat();
    /**
     * <code>optional string format = 2;</code>
     */
    com.google.protobuf.ByteString
        getFormatBytes();

    // optional string message = 3;
    /**
     * <code>optional string message = 3;</code>
     */
    boolean hasMessage();
    /**
     * <code>optional string message = 3;</code>
     */
    java.lang.String getMessage();
    /**
     * <code>optional string message = 3;</code>
     */
    com.google.protobuf.ByteString
        getMessageBytes();

    // optional string target = 4;
    /**
     * <code>optional string target = 4;</code>
     */
    boolean hasTarget();
    /**
     * <code>optional string target = 4;</code>
     */
    java.lang.String getTarget();
    /**
     * <code>optional string target = 4;</code>
     */
    com.google.protobuf.ByteString
        getTargetBytes();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_BotChat}
   */
  public static final class CDOTAUserMsg_BotChat extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_BotChatOrBuilder {
    // Use CDOTAUserMsg_BotChat.newBuilder() to construct.
    private CDOTAUserMsg_BotChat(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_BotChat(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_BotChat defaultInstance;
    public static CDOTAUserMsg_BotChat getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_BotChat getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_BotChat(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              playerId_ = input.readUInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              format_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              message_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              target_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_BotChat> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_BotChat>() {
      public CDOTAUserMsg_BotChat parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_BotChat(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_BotChat> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 player_id = 1;
    public static final int PLAYER_ID_FIELD_NUMBER = 1;
    private int playerId_;
    /**
     * <code>optional uint32 player_id = 1;</code>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 player_id = 1;</code>
     */
    public int getPlayerId() {
      return playerId_;
    }

    // optional string format = 2;
    public static final int FORMAT_FIELD_NUMBER = 2;
    private java.lang.Object format_;
    /**
     * <code>optional string format = 2;</code>
     */
    public boolean hasFormat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string format = 2;</code>
     */
    public java.lang.String getFormat() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          format_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string format = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFormatBytes() {
      java.lang.Object ref = format_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        format_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string message = 3;
    public static final int MESSAGE_FIELD_NUMBER = 3;
    private java.lang.Object message_;
    /**
     * <code>optional string message = 3;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string message = 3;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string message = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string target = 4;
    public static final int TARGET_FIELD_NUMBER = 4;
    private java.lang.Object target_;
    /**
     * <code>optional string target = 4;</code>
     */
    public boolean hasTarget() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string target = 4;</code>
     */
    public java.lang.String getTarget() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          target_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string target = 4;</code>
     */
    public com.google.protobuf.ByteString
        getTargetBytes() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        target_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      playerId_ = 0;
      format_ = "";
      message_ = "";
      target_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getFormatBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getMessageBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getTargetBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getFormatBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getMessageBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getTargetBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_BotChat}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChatOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        playerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        format_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        target_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.format_ = format_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.message_ = message_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.target_ = target_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat.getDefaultInstance()) return this;
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasFormat()) {
          bitField0_ |= 0x00000002;
          format_ = other.format_;
          onChanged();
        }
        if (other.hasMessage()) {
          bitField0_ |= 0x00000004;
          message_ = other.message_;
          onChanged();
        }
        if (other.hasTarget()) {
          bitField0_ |= 0x00000008;
          target_ = other.target_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_BotChat) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 player_id = 1;
      private int playerId_ ;
      /**
       * <code>optional uint32 player_id = 1;</code>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 player_id = 1;</code>
       */
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <code>optional uint32 player_id = 1;</code>
       */
      public Builder setPlayerId(int value) {
        bitField0_ |= 0x00000001;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 player_id = 1;</code>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
        onChanged();
        return this;
      }

      // optional string format = 2;
      private java.lang.Object format_ = "";
      /**
       * <code>optional string format = 2;</code>
       */
      public boolean hasFormat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string format = 2;</code>
       */
      public java.lang.String getFormat() {
        java.lang.Object ref = format_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          format_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string format = 2;</code>
       */
      public com.google.protobuf.ByteString
          getFormatBytes() {
        java.lang.Object ref = format_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          format_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string format = 2;</code>
       */
      public Builder setFormat(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        format_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string format = 2;</code>
       */
      public Builder clearFormat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        format_ = getDefaultInstance().getFormat();
        onChanged();
        return this;
      }
      /**
       * <code>optional string format = 2;</code>
       */
      public Builder setFormatBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        format_ = value;
        onChanged();
        return this;
      }

      // optional string message = 3;
      private java.lang.Object message_ = "";
      /**
       * <code>optional string message = 3;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string message = 3;</code>
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string message = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string message = 3;</code>
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 3;</code>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 3;</code>
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        message_ = value;
        onChanged();
        return this;
      }

      // optional string target = 4;
      private java.lang.Object target_ = "";
      /**
       * <code>optional string target = 4;</code>
       */
      public boolean hasTarget() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string target = 4;</code>
       */
      public java.lang.String getTarget() {
        java.lang.Object ref = target_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          target_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string target = 4;</code>
       */
      public com.google.protobuf.ByteString
          getTargetBytes() {
        java.lang.Object ref = target_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          target_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string target = 4;</code>
       */
      public Builder setTarget(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string target = 4;</code>
       */
      public Builder clearTarget() {
        bitField0_ = (bitField0_ & ~0x00000008);
        target_ = getDefaultInstance().getTarget();
        onChanged();
        return this;
      }
      /**
       * <code>optional string target = 4;</code>
       */
      public Builder setTargetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        target_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_BotChat)
    }

    static {
      defaultInstance = new CDOTAUserMsg_BotChat(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_BotChat)
  }

  public interface CDOTAUserMsg_CombatHeroPositionsOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 index = 1;
    /**
     * <code>optional uint32 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>optional uint32 index = 1;</code>
     */
    int getIndex();

    // optional int32 time = 2;
    /**
     * <code>optional int32 time = 2;</code>
     */
    boolean hasTime();
    /**
     * <code>optional int32 time = 2;</code>
     */
    int getTime();

    // optional .com.valve.dota2.CMsgVector2D world_pos = 3;
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
     */
    boolean hasWorldPos();
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
     */
    com.valve.dota2.Netmessages.CMsgVector2D getWorldPos();
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
     */
    com.valve.dota2.Netmessages.CMsgVector2DOrBuilder getWorldPosOrBuilder();

    // optional int32 health = 4;
    /**
     * <code>optional int32 health = 4;</code>
     */
    boolean hasHealth();
    /**
     * <code>optional int32 health = 4;</code>
     */
    int getHealth();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_CombatHeroPositions}
   */
  public static final class CDOTAUserMsg_CombatHeroPositions extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_CombatHeroPositionsOrBuilder {
    // Use CDOTAUserMsg_CombatHeroPositions.newBuilder() to construct.
    private CDOTAUserMsg_CombatHeroPositions(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_CombatHeroPositions(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_CombatHeroPositions defaultInstance;
    public static CDOTAUserMsg_CombatHeroPositions getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_CombatHeroPositions getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_CombatHeroPositions(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              time_ = input.readInt32();
              break;
            }
            case 26: {
              com.valve.dota2.Netmessages.CMsgVector2D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = worldPos_.toBuilder();
              }
              worldPos_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector2D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(worldPos_);
                worldPos_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              health_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_CombatHeroPositions> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_CombatHeroPositions>() {
      public CDOTAUserMsg_CombatHeroPositions parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_CombatHeroPositions(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_CombatHeroPositions> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 index = 1;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>optional uint32 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 index = 1;</code>
     */
    public int getIndex() {
      return index_;
    }

    // optional int32 time = 2;
    public static final int TIME_FIELD_NUMBER = 2;
    private int time_;
    /**
     * <code>optional int32 time = 2;</code>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 time = 2;</code>
     */
    public int getTime() {
      return time_;
    }

    // optional .com.valve.dota2.CMsgVector2D world_pos = 3;
    public static final int WORLD_POS_FIELD_NUMBER = 3;
    private com.valve.dota2.Netmessages.CMsgVector2D worldPos_;
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
     */
    public boolean hasWorldPos() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVector2D getWorldPos() {
      return worldPos_;
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVector2DOrBuilder getWorldPosOrBuilder() {
      return worldPos_;
    }

    // optional int32 health = 4;
    public static final int HEALTH_FIELD_NUMBER = 4;
    private int health_;
    /**
     * <code>optional int32 health = 4;</code>
     */
    public boolean hasHealth() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 health = 4;</code>
     */
    public int getHealth() {
      return health_;
    }

    private void initFields() {
      index_ = 0;
      time_ = 0;
      worldPos_ = com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance();
      health_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, time_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, worldPos_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, health_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, time_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, worldPos_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, health_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_CombatHeroPositions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositionsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWorldPosFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (worldPosBuilder_ == null) {
          worldPos_ = com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance();
        } else {
          worldPosBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        health_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (worldPosBuilder_ == null) {
          result.worldPos_ = worldPos_;
        } else {
          result.worldPos_ = worldPosBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.health_ = health_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasWorldPos()) {
          mergeWorldPos(other.getWorldPos());
        }
        if (other.hasHealth()) {
          setHealth(other.getHealth());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CombatHeroPositions) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 index = 1;
      private int index_ ;
      /**
       * <code>optional uint32 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 index = 1;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>optional uint32 index = 1;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      // optional int32 time = 2;
      private int time_ ;
      /**
       * <code>optional int32 time = 2;</code>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 time = 2;</code>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>optional int32 time = 2;</code>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000002;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 time = 2;</code>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        time_ = 0;
        onChanged();
        return this;
      }

      // optional .com.valve.dota2.CMsgVector2D world_pos = 3;
      private com.valve.dota2.Netmessages.CMsgVector2D worldPos_ = com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector2D, com.valve.dota2.Netmessages.CMsgVector2D.Builder, com.valve.dota2.Netmessages.CMsgVector2DOrBuilder> worldPosBuilder_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
       */
      public boolean hasWorldPos() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector2D getWorldPos() {
        if (worldPosBuilder_ == null) {
          return worldPos_;
        } else {
          return worldPosBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
       */
      public Builder setWorldPos(com.valve.dota2.Netmessages.CMsgVector2D value) {
        if (worldPosBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          worldPos_ = value;
          onChanged();
        } else {
          worldPosBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
       */
      public Builder setWorldPos(
          com.valve.dota2.Netmessages.CMsgVector2D.Builder builderForValue) {
        if (worldPosBuilder_ == null) {
          worldPos_ = builderForValue.build();
          onChanged();
        } else {
          worldPosBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
       */
      public Builder mergeWorldPos(com.valve.dota2.Netmessages.CMsgVector2D value) {
        if (worldPosBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              worldPos_ != com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance()) {
            worldPos_ =
              com.valve.dota2.Netmessages.CMsgVector2D.newBuilder(worldPos_).mergeFrom(value).buildPartial();
          } else {
            worldPos_ = value;
          }
          onChanged();
        } else {
          worldPosBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
       */
      public Builder clearWorldPos() {
        if (worldPosBuilder_ == null) {
          worldPos_ = com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance();
          onChanged();
        } else {
          worldPosBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector2D.Builder getWorldPosBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getWorldPosFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector2DOrBuilder getWorldPosOrBuilder() {
        if (worldPosBuilder_ != null) {
          return worldPosBuilder_.getMessageOrBuilder();
        } else {
          return worldPos_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D world_pos = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector2D, com.valve.dota2.Netmessages.CMsgVector2D.Builder, com.valve.dota2.Netmessages.CMsgVector2DOrBuilder> 
          getWorldPosFieldBuilder() {
        if (worldPosBuilder_ == null) {
          worldPosBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.Netmessages.CMsgVector2D, com.valve.dota2.Netmessages.CMsgVector2D.Builder, com.valve.dota2.Netmessages.CMsgVector2DOrBuilder>(
                  worldPos_,
                  getParentForChildren(),
                  isClean());
          worldPos_ = null;
        }
        return worldPosBuilder_;
      }

      // optional int32 health = 4;
      private int health_ ;
      /**
       * <code>optional int32 health = 4;</code>
       */
      public boolean hasHealth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 health = 4;</code>
       */
      public int getHealth() {
        return health_;
      }
      /**
       * <code>optional int32 health = 4;</code>
       */
      public Builder setHealth(int value) {
        bitField0_ |= 0x00000008;
        health_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 health = 4;</code>
       */
      public Builder clearHealth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        health_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_CombatHeroPositions)
    }

    static {
      defaultInstance = new CDOTAUserMsg_CombatHeroPositions(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_CombatHeroPositions)
  }

  public interface CDOTAUserMsg_MiniKillCamInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker> 
        getAttackersList();
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker getAttackers(int index);
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    int getAttackersCount();
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    java.util.List<? extends com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder> 
        getAttackersOrBuilderList();
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder getAttackersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo}
   */
  public static final class CDOTAUserMsg_MiniKillCamInfo extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_MiniKillCamInfoOrBuilder {
    // Use CDOTAUserMsg_MiniKillCamInfo.newBuilder() to construct.
    private CDOTAUserMsg_MiniKillCamInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_MiniKillCamInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_MiniKillCamInfo defaultInstance;
    public static CDOTAUserMsg_MiniKillCamInfo getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_MiniKillCamInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_MiniKillCamInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                attackers_ = new java.util.ArrayList<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker>();
                mutable_bitField0_ |= 0x00000001;
              }
              attackers_.add(input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          attackers_ = java.util.Collections.unmodifiableList(attackers_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_MiniKillCamInfo> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_MiniKillCamInfo>() {
      public CDOTAUserMsg_MiniKillCamInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_MiniKillCamInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_MiniKillCamInfo> getParserForType() {
      return PARSER;
    }

    public interface AttackerOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional uint32 attacker = 1;
      /**
       * <code>optional uint32 attacker = 1;</code>
       */
      boolean hasAttacker();
      /**
       * <code>optional uint32 attacker = 1;</code>
       */
      int getAttacker();

      // optional int32 total_damage = 2;
      /**
       * <code>optional int32 total_damage = 2;</code>
       */
      boolean hasTotalDamage();
      /**
       * <code>optional int32 total_damage = 2;</code>
       */
      int getTotalDamage();

      // repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability> 
          getAbilitiesList();
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability getAbilities(int index);
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      int getAbilitiesCount();
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      java.util.List<? extends com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder> 
          getAbilitiesOrBuilderList();
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder getAbilitiesOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker}
     */
    public static final class Attacker extends
        com.google.protobuf.GeneratedMessage
        implements AttackerOrBuilder {
      // Use Attacker.newBuilder() to construct.
      private Attacker(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Attacker(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Attacker defaultInstance;
      public static Attacker getDefaultInstance() {
        return defaultInstance;
      }

      public Attacker getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Attacker(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                attacker_ = input.readUInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                totalDamage_ = input.readInt32();
                break;
              }
              case 26: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  abilities_ = new java.util.ArrayList<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability>();
                  mutable_bitField0_ |= 0x00000004;
                }
                abilities_.add(input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.PARSER, extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            abilities_ = java.util.Collections.unmodifiableList(abilities_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder.class);
      }

      public static com.google.protobuf.Parser<Attacker> PARSER =
          new com.google.protobuf.AbstractParser<Attacker>() {
        public Attacker parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Attacker(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Attacker> getParserForType() {
        return PARSER;
      }

      public interface AbilityOrBuilder
          extends com.google.protobuf.MessageOrBuilder {

        // optional uint32 ability = 1;
        /**
         * <code>optional uint32 ability = 1;</code>
         */
        boolean hasAbility();
        /**
         * <code>optional uint32 ability = 1;</code>
         */
        int getAbility();

        // optional int32 damage = 2;
        /**
         * <code>optional int32 damage = 2;</code>
         */
        boolean hasDamage();
        /**
         * <code>optional int32 damage = 2;</code>
         */
        int getDamage();
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability}
       */
      public static final class Ability extends
          com.google.protobuf.GeneratedMessage
          implements AbilityOrBuilder {
        // Use Ability.newBuilder() to construct.
        private Ability(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
          this.unknownFields = builder.getUnknownFields();
        }
        private Ability(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final Ability defaultInstance;
        public static Ability getDefaultInstance() {
          return defaultInstance;
        }

        public Ability getDefaultInstanceForType() {
          return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
          return this.unknownFields;
        }
        private Ability(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          initFields();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  ability_ = input.readUInt32();
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  damage_ = input.readInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder.class);
        }

        public static com.google.protobuf.Parser<Ability> PARSER =
            new com.google.protobuf.AbstractParser<Ability>() {
          public Ability parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Ability(input, extensionRegistry);
          }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Ability> getParserForType() {
          return PARSER;
        }

        private int bitField0_;
        // optional uint32 ability = 1;
        public static final int ABILITY_FIELD_NUMBER = 1;
        private int ability_;
        /**
         * <code>optional uint32 ability = 1;</code>
         */
        public boolean hasAbility() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 ability = 1;</code>
         */
        public int getAbility() {
          return ability_;
        }

        // optional int32 damage = 2;
        public static final int DAMAGE_FIELD_NUMBER = 2;
        private int damage_;
        /**
         * <code>optional int32 damage = 2;</code>
         */
        public boolean hasDamage() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 damage = 2;</code>
         */
        public int getDamage() {
          return damage_;
        }

        private void initFields() {
          ability_ = 0;
          damage_ = 0;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized != -1) return isInitialized == 1;

          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          getSerializedSize();
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeUInt32(1, ability_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeInt32(2, damage_);
          }
          getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32Size(1, ability_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt32Size(2, damage_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSerializedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
            throws java.io.ObjectStreamException {
          return super.writeReplace();
        }

        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability prototype) {
          return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder>
           implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor;
          }

          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder.class);
          }

          // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            }
          }
          private static Builder create() {
            return new Builder();
          }

          public Builder clear() {
            super.clear();
            ability_ = 0;
            bitField0_ = (bitField0_ & ~0x00000001);
            damage_ = 0;
            bitField0_ = (bitField0_ & ~0x00000002);
            return this;
          }

          public Builder clone() {
            return create().mergeFrom(buildPartial());
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor;
          }

          public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability getDefaultInstanceForType() {
            return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.getDefaultInstance();
          }

          public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability build() {
            com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability buildPartial() {
            com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            result.ability_ = ability_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
              to_bitField0_ |= 0x00000002;
            }
            result.damage_ = damage_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability) {
              return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability other) {
            if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.getDefaultInstance()) return this;
            if (other.hasAbility()) {
              setAbility(other.getAbility());
            }
            if (other.hasDamage()) {
              setDamage(other.getDamage());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            return this;
          }

          public final boolean isInitialized() {
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          // optional uint32 ability = 1;
          private int ability_ ;
          /**
           * <code>optional uint32 ability = 1;</code>
           */
          public boolean hasAbility() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <code>optional uint32 ability = 1;</code>
           */
          public int getAbility() {
            return ability_;
          }
          /**
           * <code>optional uint32 ability = 1;</code>
           */
          public Builder setAbility(int value) {
            bitField0_ |= 0x00000001;
            ability_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional uint32 ability = 1;</code>
           */
          public Builder clearAbility() {
            bitField0_ = (bitField0_ & ~0x00000001);
            ability_ = 0;
            onChanged();
            return this;
          }

          // optional int32 damage = 2;
          private int damage_ ;
          /**
           * <code>optional int32 damage = 2;</code>
           */
          public boolean hasDamage() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
          }
          /**
           * <code>optional int32 damage = 2;</code>
           */
          public int getDamage() {
            return damage_;
          }
          /**
           * <code>optional int32 damage = 2;</code>
           */
          public Builder setDamage(int value) {
            bitField0_ |= 0x00000002;
            damage_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional int32 damage = 2;</code>
           */
          public Builder clearDamage() {
            bitField0_ = (bitField0_ & ~0x00000002);
            damage_ = 0;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
        }

        static {
          defaultInstance = new Ability(true);
          defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
      }

      private int bitField0_;
      // optional uint32 attacker = 1;
      public static final int ATTACKER_FIELD_NUMBER = 1;
      private int attacker_;
      /**
       * <code>optional uint32 attacker = 1;</code>
       */
      public boolean hasAttacker() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 attacker = 1;</code>
       */
      public int getAttacker() {
        return attacker_;
      }

      // optional int32 total_damage = 2;
      public static final int TOTAL_DAMAGE_FIELD_NUMBER = 2;
      private int totalDamage_;
      /**
       * <code>optional int32 total_damage = 2;</code>
       */
      public boolean hasTotalDamage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 total_damage = 2;</code>
       */
      public int getTotalDamage() {
        return totalDamage_;
      }

      // repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
      public static final int ABILITIES_FIELD_NUMBER = 3;
      private java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability> abilities_;
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      public java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability> getAbilitiesList() {
        return abilities_;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      public java.util.List<? extends com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder> 
          getAbilitiesOrBuilderList() {
        return abilities_;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      public int getAbilitiesCount() {
        return abilities_.size();
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability getAbilities(int index) {
        return abilities_.get(index);
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder getAbilitiesOrBuilder(
          int index) {
        return abilities_.get(index);
      }

      private void initFields() {
        attacker_ = 0;
        totalDamage_ = 0;
        abilities_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeUInt32(1, attacker_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, totalDamage_);
        }
        for (int i = 0; i < abilities_.size(); i++) {
          output.writeMessage(3, abilities_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(1, attacker_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, totalDamage_);
        }
        for (int i = 0; i < abilities_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, abilities_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getAbilitiesFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          attacker_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          totalDamage_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          if (abilitiesBuilder_ == null) {
            abilities_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            abilitiesBuilder_.clear();
          }
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.attacker_ = attacker_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.totalDamage_ = totalDamage_;
          if (abilitiesBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              abilities_ = java.util.Collections.unmodifiableList(abilities_);
              bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.abilities_ = abilities_;
          } else {
            result.abilities_ = abilitiesBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.getDefaultInstance()) return this;
          if (other.hasAttacker()) {
            setAttacker(other.getAttacker());
          }
          if (other.hasTotalDamage()) {
            setTotalDamage(other.getTotalDamage());
          }
          if (abilitiesBuilder_ == null) {
            if (!other.abilities_.isEmpty()) {
              if (abilities_.isEmpty()) {
                abilities_ = other.abilities_;
                bitField0_ = (bitField0_ & ~0x00000004);
              } else {
                ensureAbilitiesIsMutable();
                abilities_.addAll(other.abilities_);
              }
              onChanged();
            }
          } else {
            if (!other.abilities_.isEmpty()) {
              if (abilitiesBuilder_.isEmpty()) {
                abilitiesBuilder_.dispose();
                abilitiesBuilder_ = null;
                abilities_ = other.abilities_;
                bitField0_ = (bitField0_ & ~0x00000004);
                abilitiesBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getAbilitiesFieldBuilder() : null;
              } else {
                abilitiesBuilder_.addAllMessages(other.abilities_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional uint32 attacker = 1;
        private int attacker_ ;
        /**
         * <code>optional uint32 attacker = 1;</code>
         */
        public boolean hasAttacker() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional uint32 attacker = 1;</code>
         */
        public int getAttacker() {
          return attacker_;
        }
        /**
         * <code>optional uint32 attacker = 1;</code>
         */
        public Builder setAttacker(int value) {
          bitField0_ |= 0x00000001;
          attacker_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional uint32 attacker = 1;</code>
         */
        public Builder clearAttacker() {
          bitField0_ = (bitField0_ & ~0x00000001);
          attacker_ = 0;
          onChanged();
          return this;
        }

        // optional int32 total_damage = 2;
        private int totalDamage_ ;
        /**
         * <code>optional int32 total_damage = 2;</code>
         */
        public boolean hasTotalDamage() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 total_damage = 2;</code>
         */
        public int getTotalDamage() {
          return totalDamage_;
        }
        /**
         * <code>optional int32 total_damage = 2;</code>
         */
        public Builder setTotalDamage(int value) {
          bitField0_ |= 0x00000002;
          totalDamage_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 total_damage = 2;</code>
         */
        public Builder clearTotalDamage() {
          bitField0_ = (bitField0_ & ~0x00000002);
          totalDamage_ = 0;
          onChanged();
          return this;
        }

        // repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
        private java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability> abilities_ =
          java.util.Collections.emptyList();
        private void ensureAbilitiesIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            abilities_ = new java.util.ArrayList<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability>(abilities_);
            bitField0_ |= 0x00000004;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder> abilitiesBuilder_;

        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability> getAbilitiesList() {
          if (abilitiesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(abilities_);
          } else {
            return abilitiesBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public int getAbilitiesCount() {
          if (abilitiesBuilder_ == null) {
            return abilities_.size();
          } else {
            return abilitiesBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability getAbilities(int index) {
          if (abilitiesBuilder_ == null) {
            return abilities_.get(index);
          } else {
            return abilitiesBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public Builder setAbilities(
            int index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability value) {
          if (abilitiesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureAbilitiesIsMutable();
            abilities_.set(index, value);
            onChanged();
          } else {
            abilitiesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public Builder setAbilities(
            int index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder builderForValue) {
          if (abilitiesBuilder_ == null) {
            ensureAbilitiesIsMutable();
            abilities_.set(index, builderForValue.build());
            onChanged();
          } else {
            abilitiesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public Builder addAbilities(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability value) {
          if (abilitiesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureAbilitiesIsMutable();
            abilities_.add(value);
            onChanged();
          } else {
            abilitiesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public Builder addAbilities(
            int index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability value) {
          if (abilitiesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureAbilitiesIsMutable();
            abilities_.add(index, value);
            onChanged();
          } else {
            abilitiesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public Builder addAbilities(
            com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder builderForValue) {
          if (abilitiesBuilder_ == null) {
            ensureAbilitiesIsMutable();
            abilities_.add(builderForValue.build());
            onChanged();
          } else {
            abilitiesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public Builder addAbilities(
            int index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder builderForValue) {
          if (abilitiesBuilder_ == null) {
            ensureAbilitiesIsMutable();
            abilities_.add(index, builderForValue.build());
            onChanged();
          } else {
            abilitiesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public Builder addAllAbilities(
            java.lang.Iterable<? extends com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability> values) {
          if (abilitiesBuilder_ == null) {
            ensureAbilitiesIsMutable();
            super.addAll(values, abilities_);
            onChanged();
          } else {
            abilitiesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public Builder clearAbilities() {
          if (abilitiesBuilder_ == null) {
            abilities_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
          } else {
            abilitiesBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public Builder removeAbilities(int index) {
          if (abilitiesBuilder_ == null) {
            ensureAbilitiesIsMutable();
            abilities_.remove(index);
            onChanged();
          } else {
            abilitiesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder getAbilitiesBuilder(
            int index) {
          return getAbilitiesFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder getAbilitiesOrBuilder(
            int index) {
          if (abilitiesBuilder_ == null) {
            return abilities_.get(index);  } else {
            return abilitiesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public java.util.List<? extends com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder> 
             getAbilitiesOrBuilderList() {
          if (abilitiesBuilder_ != null) {
            return abilitiesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(abilities_);
          }
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder addAbilitiesBuilder() {
          return getAbilitiesFieldBuilder().addBuilder(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.getDefaultInstance());
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder addAbilitiesBuilder(
            int index) {
          return getAbilitiesFieldBuilder().addBuilder(
              index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.getDefaultInstance());
        }
        /**
         * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;</code>
         */
        public java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder> 
             getAbilitiesBuilderList() {
          return getAbilitiesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder> 
            getAbilitiesFieldBuilder() {
          if (abilitiesBuilder_ == null) {
            abilitiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.AbilityOrBuilder>(
                    abilities_,
                    ((bitField0_ & 0x00000004) == 0x00000004),
                    getParentForChildren(),
                    isClean());
            abilities_ = null;
          }
          return abilitiesBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker)
      }

      static {
        defaultInstance = new Attacker(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker)
    }

    // repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
    public static final int ATTACKERS_FIELD_NUMBER = 1;
    private java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker> attackers_;
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    public java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker> getAttackersList() {
      return attackers_;
    }
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    public java.util.List<? extends com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder> 
        getAttackersOrBuilderList() {
      return attackers_;
    }
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    public int getAttackersCount() {
      return attackers_.size();
    }
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker getAttackers(int index) {
      return attackers_.get(index);
    }
    /**
     * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder getAttackersOrBuilder(
        int index) {
      return attackers_.get(index);
    }

    private void initFields() {
      attackers_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < attackers_.size(); i++) {
        output.writeMessage(1, attackers_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < attackers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, attackers_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAttackersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (attackersBuilder_ == null) {
          attackers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          attackersBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo(this);
        int from_bitField0_ = bitField0_;
        if (attackersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            attackers_ = java.util.Collections.unmodifiableList(attackers_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.attackers_ = attackers_;
        } else {
          result.attackers_ = attackersBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.getDefaultInstance()) return this;
        if (attackersBuilder_ == null) {
          if (!other.attackers_.isEmpty()) {
            if (attackers_.isEmpty()) {
              attackers_ = other.attackers_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAttackersIsMutable();
              attackers_.addAll(other.attackers_);
            }
            onChanged();
          }
        } else {
          if (!other.attackers_.isEmpty()) {
            if (attackersBuilder_.isEmpty()) {
              attackersBuilder_.dispose();
              attackersBuilder_ = null;
              attackers_ = other.attackers_;
              bitField0_ = (bitField0_ & ~0x00000001);
              attackersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAttackersFieldBuilder() : null;
            } else {
              attackersBuilder_.addAllMessages(other.attackers_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
      private java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker> attackers_ =
        java.util.Collections.emptyList();
      private void ensureAttackersIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          attackers_ = new java.util.ArrayList<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker>(attackers_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder> attackersBuilder_;

      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker> getAttackersList() {
        if (attackersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(attackers_);
        } else {
          return attackersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public int getAttackersCount() {
        if (attackersBuilder_ == null) {
          return attackers_.size();
        } else {
          return attackersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker getAttackers(int index) {
        if (attackersBuilder_ == null) {
          return attackers_.get(index);
        } else {
          return attackersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public Builder setAttackers(
          int index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker value) {
        if (attackersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttackersIsMutable();
          attackers_.set(index, value);
          onChanged();
        } else {
          attackersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public Builder setAttackers(
          int index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder builderForValue) {
        if (attackersBuilder_ == null) {
          ensureAttackersIsMutable();
          attackers_.set(index, builderForValue.build());
          onChanged();
        } else {
          attackersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public Builder addAttackers(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker value) {
        if (attackersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttackersIsMutable();
          attackers_.add(value);
          onChanged();
        } else {
          attackersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public Builder addAttackers(
          int index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker value) {
        if (attackersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAttackersIsMutable();
          attackers_.add(index, value);
          onChanged();
        } else {
          attackersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public Builder addAttackers(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder builderForValue) {
        if (attackersBuilder_ == null) {
          ensureAttackersIsMutable();
          attackers_.add(builderForValue.build());
          onChanged();
        } else {
          attackersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public Builder addAttackers(
          int index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder builderForValue) {
        if (attackersBuilder_ == null) {
          ensureAttackersIsMutable();
          attackers_.add(index, builderForValue.build());
          onChanged();
        } else {
          attackersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public Builder addAllAttackers(
          java.lang.Iterable<? extends com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker> values) {
        if (attackersBuilder_ == null) {
          ensureAttackersIsMutable();
          super.addAll(values, attackers_);
          onChanged();
        } else {
          attackersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public Builder clearAttackers() {
        if (attackersBuilder_ == null) {
          attackers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          attackersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public Builder removeAttackers(int index) {
        if (attackersBuilder_ == null) {
          ensureAttackersIsMutable();
          attackers_.remove(index);
          onChanged();
        } else {
          attackersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder getAttackersBuilder(
          int index) {
        return getAttackersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder getAttackersOrBuilder(
          int index) {
        if (attackersBuilder_ == null) {
          return attackers_.get(index);  } else {
          return attackersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public java.util.List<? extends com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder> 
           getAttackersOrBuilderList() {
        if (attackersBuilder_ != null) {
          return attackersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(attackers_);
        }
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder addAttackersBuilder() {
        return getAttackersFieldBuilder().addBuilder(
            com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.getDefaultInstance());
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder addAttackersBuilder(
          int index) {
        return getAttackersFieldBuilder().addBuilder(
            index, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.getDefaultInstance());
      }
      /**
       * <code>repeated .com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;</code>
       */
      public java.util.List<com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder> 
           getAttackersBuilderList() {
        return getAttackersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder> 
          getAttackersFieldBuilder() {
        if (attackersBuilder_ == null) {
          attackersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.Attacker.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MiniKillCamInfo.AttackerOrBuilder>(
                  attackers_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          attackers_ = null;
        }
        return attackersBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo)
    }

    static {
      defaultInstance = new CDOTAUserMsg_MiniKillCamInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_MiniKillCamInfo)
  }

  public interface CDOTAUserMsg_GlobalLightColorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 color = 1;
    /**
     * <code>optional uint32 color = 1;</code>
     */
    boolean hasColor();
    /**
     * <code>optional uint32 color = 1;</code>
     */
    int getColor();

    // optional float duration = 2;
    /**
     * <code>optional float duration = 2;</code>
     */
    boolean hasDuration();
    /**
     * <code>optional float duration = 2;</code>
     */
    float getDuration();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_GlobalLightColor}
   */
  public static final class CDOTAUserMsg_GlobalLightColor extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_GlobalLightColorOrBuilder {
    // Use CDOTAUserMsg_GlobalLightColor.newBuilder() to construct.
    private CDOTAUserMsg_GlobalLightColor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_GlobalLightColor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_GlobalLightColor defaultInstance;
    public static CDOTAUserMsg_GlobalLightColor getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_GlobalLightColor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_GlobalLightColor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              color_ = input.readUInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              duration_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_GlobalLightColor> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_GlobalLightColor>() {
      public CDOTAUserMsg_GlobalLightColor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_GlobalLightColor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_GlobalLightColor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 color = 1;
    public static final int COLOR_FIELD_NUMBER = 1;
    private int color_;
    /**
     * <code>optional uint32 color = 1;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 color = 1;</code>
     */
    public int getColor() {
      return color_;
    }

    // optional float duration = 2;
    public static final int DURATION_FIELD_NUMBER = 2;
    private float duration_;
    /**
     * <code>optional float duration = 2;</code>
     */
    public boolean hasDuration() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float duration = 2;</code>
     */
    public float getDuration() {
      return duration_;
    }

    private void initFields() {
      color_ = 0;
      duration_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, color_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, duration_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, color_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, duration_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_GlobalLightColor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        color_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        duration_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.color_ = color_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.duration_ = duration_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor.getDefaultInstance()) return this;
        if (other.hasColor()) {
          setColor(other.getColor());
        }
        if (other.hasDuration()) {
          setDuration(other.getDuration());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightColor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 color = 1;
      private int color_ ;
      /**
       * <code>optional uint32 color = 1;</code>
       */
      public boolean hasColor() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 color = 1;</code>
       */
      public int getColor() {
        return color_;
      }
      /**
       * <code>optional uint32 color = 1;</code>
       */
      public Builder setColor(int value) {
        bitField0_ |= 0x00000001;
        color_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 color = 1;</code>
       */
      public Builder clearColor() {
        bitField0_ = (bitField0_ & ~0x00000001);
        color_ = 0;
        onChanged();
        return this;
      }

      // optional float duration = 2;
      private float duration_ ;
      /**
       * <code>optional float duration = 2;</code>
       */
      public boolean hasDuration() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float duration = 2;</code>
       */
      public float getDuration() {
        return duration_;
      }
      /**
       * <code>optional float duration = 2;</code>
       */
      public Builder setDuration(float value) {
        bitField0_ |= 0x00000002;
        duration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float duration = 2;</code>
       */
      public Builder clearDuration() {
        bitField0_ = (bitField0_ & ~0x00000002);
        duration_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_GlobalLightColor)
    }

    static {
      defaultInstance = new CDOTAUserMsg_GlobalLightColor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_GlobalLightColor)
  }

  public interface CDOTAUserMsg_GlobalLightDirectionOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .com.valve.dota2.CMsgVector direction = 1;
    /**
     * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
     */
    boolean hasDirection();
    /**
     * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
     */
    com.valve.dota2.Netmessages.CMsgVector getDirection();
    /**
     * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
     */
    com.valve.dota2.Netmessages.CMsgVectorOrBuilder getDirectionOrBuilder();

    // optional float duration = 2;
    /**
     * <code>optional float duration = 2;</code>
     */
    boolean hasDuration();
    /**
     * <code>optional float duration = 2;</code>
     */
    float getDuration();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_GlobalLightDirection}
   */
  public static final class CDOTAUserMsg_GlobalLightDirection extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_GlobalLightDirectionOrBuilder {
    // Use CDOTAUserMsg_GlobalLightDirection.newBuilder() to construct.
    private CDOTAUserMsg_GlobalLightDirection(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_GlobalLightDirection(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_GlobalLightDirection defaultInstance;
    public static CDOTAUserMsg_GlobalLightDirection getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_GlobalLightDirection getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_GlobalLightDirection(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = direction_.toBuilder();
              }
              direction_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(direction_);
                direction_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              duration_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_GlobalLightDirection> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_GlobalLightDirection>() {
      public CDOTAUserMsg_GlobalLightDirection parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_GlobalLightDirection(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_GlobalLightDirection> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .com.valve.dota2.CMsgVector direction = 1;
    public static final int DIRECTION_FIELD_NUMBER = 1;
    private com.valve.dota2.Netmessages.CMsgVector direction_;
    /**
     * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVector getDirection() {
      return direction_;
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getDirectionOrBuilder() {
      return direction_;
    }

    // optional float duration = 2;
    public static final int DURATION_FIELD_NUMBER = 2;
    private float duration_;
    /**
     * <code>optional float duration = 2;</code>
     */
    public boolean hasDuration() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float duration = 2;</code>
     */
    public float getDuration() {
      return duration_;
    }

    private void initFields() {
      direction_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      duration_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, direction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, duration_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, direction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, duration_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_GlobalLightDirection}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirectionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDirectionFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (directionBuilder_ == null) {
          direction_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        } else {
          directionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        duration_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (directionBuilder_ == null) {
          result.direction_ = direction_;
        } else {
          result.direction_ = directionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.duration_ = duration_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection.getDefaultInstance()) return this;
        if (other.hasDirection()) {
          mergeDirection(other.getDirection());
        }
        if (other.hasDuration()) {
          setDuration(other.getDuration());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_GlobalLightDirection) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .com.valve.dota2.CMsgVector direction = 1;
      private com.valve.dota2.Netmessages.CMsgVector direction_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> directionBuilder_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getDirection() {
        if (directionBuilder_ == null) {
          return direction_;
        } else {
          return directionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
       */
      public Builder setDirection(com.valve.dota2.Netmessages.CMsgVector value) {
        if (directionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          direction_ = value;
          onChanged();
        } else {
          directionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
       */
      public Builder setDirection(
          com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
        if (directionBuilder_ == null) {
          direction_ = builderForValue.build();
          onChanged();
        } else {
          directionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
       */
      public Builder mergeDirection(com.valve.dota2.Netmessages.CMsgVector value) {
        if (directionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              direction_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
            direction_ =
              com.valve.dota2.Netmessages.CMsgVector.newBuilder(direction_).mergeFrom(value).buildPartial();
          } else {
            direction_ = value;
          }
          onChanged();
        } else {
          directionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
       */
      public Builder clearDirection() {
        if (directionBuilder_ == null) {
          direction_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          onChanged();
        } else {
          directionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector.Builder getDirectionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getDirectionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getDirectionOrBuilder() {
        if (directionBuilder_ != null) {
          return directionBuilder_.getMessageOrBuilder();
        } else {
          return direction_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector direction = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
          getDirectionFieldBuilder() {
        if (directionBuilder_ == null) {
          directionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                  direction_,
                  getParentForChildren(),
                  isClean());
          direction_ = null;
        }
        return directionBuilder_;
      }

      // optional float duration = 2;
      private float duration_ ;
      /**
       * <code>optional float duration = 2;</code>
       */
      public boolean hasDuration() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float duration = 2;</code>
       */
      public float getDuration() {
        return duration_;
      }
      /**
       * <code>optional float duration = 2;</code>
       */
      public Builder setDuration(float value) {
        bitField0_ |= 0x00000002;
        duration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float duration = 2;</code>
       */
      public Builder clearDuration() {
        bitField0_ = (bitField0_ & ~0x00000002);
        duration_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_GlobalLightDirection)
    }

    static {
      defaultInstance = new CDOTAUserMsg_GlobalLightDirection(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_GlobalLightDirection)
  }

  public interface CDOTAUserMsg_LocationPingOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint32 player_id = 1;
    /**
     * <code>optional uint32 player_id = 1;</code>
     */
    boolean hasPlayerId();
    /**
     * <code>optional uint32 player_id = 1;</code>
     */
    int getPlayerId();

    // optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
     */
    boolean hasLocationPing();
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
     */
    com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing getLocationPing();
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
     */
    com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPingOrBuilder getLocationPingOrBuilder();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_LocationPing}
   */
  public static final class CDOTAUserMsg_LocationPing extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_LocationPingOrBuilder {
    // Use CDOTAUserMsg_LocationPing.newBuilder() to construct.
    private CDOTAUserMsg_LocationPing(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_LocationPing(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_LocationPing defaultInstance;
    public static CDOTAUserMsg_LocationPing getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_LocationPing getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_LocationPing(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              playerId_ = input.readUInt32();
              break;
            }
            case 18: {
              com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = locationPing_.toBuilder();
              }
              locationPing_ = input.readMessage(com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationPing_);
                locationPing_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_LocationPing> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_LocationPing>() {
      public CDOTAUserMsg_LocationPing parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_LocationPing(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_LocationPing> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint32 player_id = 1;
    public static final int PLAYER_ID_FIELD_NUMBER = 1;
    private int playerId_;
    /**
     * <code>optional uint32 player_id = 1;</code>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 player_id = 1;</code>
     */
    public int getPlayerId() {
      return playerId_;
    }

    // optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;
    public static final int LOCATION_PING_FIELD_NUMBER = 2;
    private com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing locationPing_;
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
     */
    public boolean hasLocationPing() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
     */
    public com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing getLocationPing() {
      return locationPing_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
     */
    public com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPingOrBuilder getLocationPingOrBuilder() {
      return locationPing_;
    }

    private void initFields() {
      playerId_ = 0;
      locationPing_ = com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, locationPing_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, locationPing_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_LocationPing}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationPingFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        playerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (locationPingBuilder_ == null) {
          locationPing_ = com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.getDefaultInstance();
        } else {
          locationPingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (locationPingBuilder_ == null) {
          result.locationPing_ = locationPing_;
        } else {
          result.locationPing_ = locationPingBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing.getDefaultInstance()) return this;
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasLocationPing()) {
          mergeLocationPing(other.getLocationPing());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_LocationPing) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint32 player_id = 1;
      private int playerId_ ;
      /**
       * <code>optional uint32 player_id = 1;</code>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 player_id = 1;</code>
       */
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <code>optional uint32 player_id = 1;</code>
       */
      public Builder setPlayerId(int value) {
        bitField0_ |= 0x00000001;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 player_id = 1;</code>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
        onChanged();
        return this;
      }

      // optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;
      private com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing locationPing_ = com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing, com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.Builder, com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPingOrBuilder> locationPingBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
       */
      public boolean hasLocationPing() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
       */
      public com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing getLocationPing() {
        if (locationPingBuilder_ == null) {
          return locationPing_;
        } else {
          return locationPingBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
       */
      public Builder setLocationPing(com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing value) {
        if (locationPingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          locationPing_ = value;
          onChanged();
        } else {
          locationPingBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
       */
      public Builder setLocationPing(
          com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.Builder builderForValue) {
        if (locationPingBuilder_ == null) {
          locationPing_ = builderForValue.build();
          onChanged();
        } else {
          locationPingBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
       */
      public Builder mergeLocationPing(com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing value) {
        if (locationPingBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              locationPing_ != com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.getDefaultInstance()) {
            locationPing_ =
              com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.newBuilder(locationPing_).mergeFrom(value).buildPartial();
          } else {
            locationPing_ = value;
          }
          onChanged();
        } else {
          locationPingBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
       */
      public Builder clearLocationPing() {
        if (locationPingBuilder_ == null) {
          locationPing_ = com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.getDefaultInstance();
          onChanged();
        } else {
          locationPingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
       */
      public com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.Builder getLocationPingBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLocationPingFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
       */
      public com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPingOrBuilder getLocationPingOrBuilder() {
        if (locationPingBuilder_ != null) {
          return locationPingBuilder_.getMessageOrBuilder();
        } else {
          return locationPing_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_LocationPing location_ping = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing, com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.Builder, com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPingOrBuilder> 
          getLocationPingFieldBuilder() {
        if (locationPingBuilder_ == null) {
          locationPingBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing, com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPing.Builder, com.valve.dota2.DotaCommonmessages.CDOTAMsg_LocationPingOrBuilder>(
                  locationPing_,
                  getParentForChildren(),
                  isClean());
          locationPing_ = null;
        }
        return locationPingBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_LocationPing)
    }

    static {
      defaultInstance = new CDOTAUserMsg_LocationPing(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_LocationPing)
  }

  public interface CDOTAUserMsg_MinimapEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 event_type = 1;
    /**
     * <code>optional int32 event_type = 1;</code>
     */
    boolean hasEventType();
    /**
     * <code>optional int32 event_type = 1;</code>
     */
    int getEventType();

    // optional int32 entity_handle = 2;
    /**
     * <code>optional int32 entity_handle = 2;</code>
     */
    boolean hasEntityHandle();
    /**
     * <code>optional int32 entity_handle = 2;</code>
     */
    int getEntityHandle();

    // optional int32 x = 3;
    /**
     * <code>optional int32 x = 3;</code>
     */
    boolean hasX();
    /**
     * <code>optional int32 x = 3;</code>
     */
    int getX();

    // optional int32 y = 4;
    /**
     * <code>optional int32 y = 4;</code>
     */
    boolean hasY();
    /**
     * <code>optional int32 y = 4;</code>
     */
    int getY();

    // optional int32 duration = 5;
    /**
     * <code>optional int32 duration = 5;</code>
     */
    boolean hasDuration();
    /**
     * <code>optional int32 duration = 5;</code>
     */
    int getDuration();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MinimapEvent}
   */
  public static final class CDOTAUserMsg_MinimapEvent extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_MinimapEventOrBuilder {
    // Use CDOTAUserMsg_MinimapEvent.newBuilder() to construct.
    private CDOTAUserMsg_MinimapEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_MinimapEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_MinimapEvent defaultInstance;
    public static CDOTAUserMsg_MinimapEvent getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_MinimapEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_MinimapEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              eventType_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              entityHandle_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              x_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              y_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              duration_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_MinimapEvent> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_MinimapEvent>() {
      public CDOTAUserMsg_MinimapEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_MinimapEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_MinimapEvent> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 event_type = 1;
    public static final int EVENT_TYPE_FIELD_NUMBER = 1;
    private int eventType_;
    /**
     * <code>optional int32 event_type = 1;</code>
     */
    public boolean hasEventType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 event_type = 1;</code>
     */
    public int getEventType() {
      return eventType_;
    }

    // optional int32 entity_handle = 2;
    public static final int ENTITY_HANDLE_FIELD_NUMBER = 2;
    private int entityHandle_;
    /**
     * <code>optional int32 entity_handle = 2;</code>
     */
    public boolean hasEntityHandle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 entity_handle = 2;</code>
     */
    public int getEntityHandle() {
      return entityHandle_;
    }

    // optional int32 x = 3;
    public static final int X_FIELD_NUMBER = 3;
    private int x_;
    /**
     * <code>optional int32 x = 3;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 x = 3;</code>
     */
    public int getX() {
      return x_;
    }

    // optional int32 y = 4;
    public static final int Y_FIELD_NUMBER = 4;
    private int y_;
    /**
     * <code>optional int32 y = 4;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 y = 4;</code>
     */
    public int getY() {
      return y_;
    }

    // optional int32 duration = 5;
    public static final int DURATION_FIELD_NUMBER = 5;
    private int duration_;
    /**
     * <code>optional int32 duration = 5;</code>
     */
    public boolean hasDuration() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 duration = 5;</code>
     */
    public int getDuration() {
      return duration_;
    }

    private void initFields() {
      eventType_ = 0;
      entityHandle_ = 0;
      x_ = 0;
      y_ = 0;
      duration_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, eventType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, entityHandle_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, x_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, y_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, duration_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, eventType_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, entityHandle_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, x_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, y_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, duration_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MinimapEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        eventType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        entityHandle_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        duration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.eventType_ = eventType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.entityHandle_ = entityHandle_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.duration_ = duration_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent.getDefaultInstance()) return this;
        if (other.hasEventType()) {
          setEventType(other.getEventType());
        }
        if (other.hasEntityHandle()) {
          setEntityHandle(other.getEntityHandle());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasDuration()) {
          setDuration(other.getDuration());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 event_type = 1;
      private int eventType_ ;
      /**
       * <code>optional int32 event_type = 1;</code>
       */
      public boolean hasEventType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 event_type = 1;</code>
       */
      public int getEventType() {
        return eventType_;
      }
      /**
       * <code>optional int32 event_type = 1;</code>
       */
      public Builder setEventType(int value) {
        bitField0_ |= 0x00000001;
        eventType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 event_type = 1;</code>
       */
      public Builder clearEventType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        eventType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 entity_handle = 2;
      private int entityHandle_ ;
      /**
       * <code>optional int32 entity_handle = 2;</code>
       */
      public boolean hasEntityHandle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 entity_handle = 2;</code>
       */
      public int getEntityHandle() {
        return entityHandle_;
      }
      /**
       * <code>optional int32 entity_handle = 2;</code>
       */
      public Builder setEntityHandle(int value) {
        bitField0_ |= 0x00000002;
        entityHandle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 entity_handle = 2;</code>
       */
      public Builder clearEntityHandle() {
        bitField0_ = (bitField0_ & ~0x00000002);
        entityHandle_ = 0;
        onChanged();
        return this;
      }

      // optional int32 x = 3;
      private int x_ ;
      /**
       * <code>optional int32 x = 3;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 x = 3;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>optional int32 x = 3;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000004;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 x = 3;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000004);
        x_ = 0;
        onChanged();
        return this;
      }

      // optional int32 y = 4;
      private int y_ ;
      /**
       * <code>optional int32 y = 4;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 y = 4;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <code>optional int32 y = 4;</code>
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00000008;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 y = 4;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000008);
        y_ = 0;
        onChanged();
        return this;
      }

      // optional int32 duration = 5;
      private int duration_ ;
      /**
       * <code>optional int32 duration = 5;</code>
       */
      public boolean hasDuration() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 duration = 5;</code>
       */
      public int getDuration() {
        return duration_;
      }
      /**
       * <code>optional int32 duration = 5;</code>
       */
      public Builder setDuration(int value) {
        bitField0_ |= 0x00000010;
        duration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 duration = 5;</code>
       */
      public Builder clearDuration() {
        bitField0_ = (bitField0_ & ~0x00000010);
        duration_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_MinimapEvent)
    }

    static {
      defaultInstance = new CDOTAUserMsg_MinimapEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_MinimapEvent)
  }

  public interface CDOTAUserMsg_MapLineOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 player_id = 1;
    /**
     * <code>optional int32 player_id = 1;</code>
     */
    boolean hasPlayerId();
    /**
     * <code>optional int32 player_id = 1;</code>
     */
    int getPlayerId();

    // optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
     */
    boolean hasMapline();
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
     */
    com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine getMapline();
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
     */
    com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLineOrBuilder getMaplineOrBuilder();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MapLine}
   */
  public static final class CDOTAUserMsg_MapLine extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_MapLineOrBuilder {
    // Use CDOTAUserMsg_MapLine.newBuilder() to construct.
    private CDOTAUserMsg_MapLine(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_MapLine(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_MapLine defaultInstance;
    public static CDOTAUserMsg_MapLine getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_MapLine getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_MapLine(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              playerId_ = input.readInt32();
              break;
            }
            case 18: {
              com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mapline_.toBuilder();
              }
              mapline_ = input.readMessage(com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mapline_);
                mapline_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_MapLine> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_MapLine>() {
      public CDOTAUserMsg_MapLine parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_MapLine(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_MapLine> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 player_id = 1;
    public static final int PLAYER_ID_FIELD_NUMBER = 1;
    private int playerId_;
    /**
     * <code>optional int32 player_id = 1;</code>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 player_id = 1;</code>
     */
    public int getPlayerId() {
      return playerId_;
    }

    // optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;
    public static final int MAPLINE_FIELD_NUMBER = 2;
    private com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine mapline_;
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
     */
    public boolean hasMapline() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
     */
    public com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine getMapline() {
      return mapline_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
     */
    public com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLineOrBuilder getMaplineOrBuilder() {
      return mapline_;
    }

    private void initFields() {
      playerId_ = 0;
      mapline_ = com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, mapline_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, mapline_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MapLine}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLineOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMaplineFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        playerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (maplineBuilder_ == null) {
          mapline_ = com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.getDefaultInstance();
        } else {
          maplineBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (maplineBuilder_ == null) {
          result.mapline_ = mapline_;
        } else {
          result.mapline_ = maplineBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine.getDefaultInstance()) return this;
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasMapline()) {
          mergeMapline(other.getMapline());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MapLine) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 player_id = 1;
      private int playerId_ ;
      /**
       * <code>optional int32 player_id = 1;</code>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 player_id = 1;</code>
       */
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <code>optional int32 player_id = 1;</code>
       */
      public Builder setPlayerId(int value) {
        bitField0_ |= 0x00000001;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player_id = 1;</code>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
        onChanged();
        return this;
      }

      // optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;
      private com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine mapline_ = com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine, com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.Builder, com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLineOrBuilder> maplineBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
       */
      public boolean hasMapline() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
       */
      public com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine getMapline() {
        if (maplineBuilder_ == null) {
          return mapline_;
        } else {
          return maplineBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
       */
      public Builder setMapline(com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine value) {
        if (maplineBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mapline_ = value;
          onChanged();
        } else {
          maplineBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
       */
      public Builder setMapline(
          com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.Builder builderForValue) {
        if (maplineBuilder_ == null) {
          mapline_ = builderForValue.build();
          onChanged();
        } else {
          maplineBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
       */
      public Builder mergeMapline(com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine value) {
        if (maplineBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              mapline_ != com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.getDefaultInstance()) {
            mapline_ =
              com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.newBuilder(mapline_).mergeFrom(value).buildPartial();
          } else {
            mapline_ = value;
          }
          onChanged();
        } else {
          maplineBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
       */
      public Builder clearMapline() {
        if (maplineBuilder_ == null) {
          mapline_ = com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.getDefaultInstance();
          onChanged();
        } else {
          maplineBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
       */
      public com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.Builder getMaplineBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMaplineFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
       */
      public com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLineOrBuilder getMaplineOrBuilder() {
        if (maplineBuilder_ != null) {
          return maplineBuilder_.getMessageOrBuilder();
        } else {
          return mapline_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAMsg_MapLine mapline = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine, com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.Builder, com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLineOrBuilder> 
          getMaplineFieldBuilder() {
        if (maplineBuilder_ == null) {
          maplineBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine, com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLine.Builder, com.valve.dota2.DotaCommonmessages.CDOTAMsg_MapLineOrBuilder>(
                  mapline_,
                  getParentForChildren(),
                  isClean());
          mapline_ = null;
        }
        return maplineBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_MapLine)
    }

    static {
      defaultInstance = new CDOTAUserMsg_MapLine(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_MapLine)
  }

  public interface CDOTAUserMsg_MinimapDebugPointOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .com.valve.dota2.CMsgVector location = 1;
    /**
     * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
     */
    boolean hasLocation();
    /**
     * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
     */
    com.valve.dota2.Netmessages.CMsgVector getLocation();
    /**
     * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
     */
    com.valve.dota2.Netmessages.CMsgVectorOrBuilder getLocationOrBuilder();

    // optional uint32 color = 2;
    /**
     * <code>optional uint32 color = 2;</code>
     */
    boolean hasColor();
    /**
     * <code>optional uint32 color = 2;</code>
     */
    int getColor();

    // optional int32 size = 3;
    /**
     * <code>optional int32 size = 3;</code>
     */
    boolean hasSize();
    /**
     * <code>optional int32 size = 3;</code>
     */
    int getSize();

    // optional float duration = 4;
    /**
     * <code>optional float duration = 4;</code>
     */
    boolean hasDuration();
    /**
     * <code>optional float duration = 4;</code>
     */
    float getDuration();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MinimapDebugPoint}
   */
  public static final class CDOTAUserMsg_MinimapDebugPoint extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_MinimapDebugPointOrBuilder {
    // Use CDOTAUserMsg_MinimapDebugPoint.newBuilder() to construct.
    private CDOTAUserMsg_MinimapDebugPoint(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_MinimapDebugPoint(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_MinimapDebugPoint defaultInstance;
    public static CDOTAUserMsg_MinimapDebugPoint getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_MinimapDebugPoint getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_MinimapDebugPoint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = location_.toBuilder();
              }
              location_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(location_);
                location_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              color_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              size_ = input.readInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              duration_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_MinimapDebugPoint> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_MinimapDebugPoint>() {
      public CDOTAUserMsg_MinimapDebugPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_MinimapDebugPoint(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_MinimapDebugPoint> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .com.valve.dota2.CMsgVector location = 1;
    public static final int LOCATION_FIELD_NUMBER = 1;
    private com.valve.dota2.Netmessages.CMsgVector location_;
    /**
     * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
     */
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVector getLocation() {
      return location_;
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getLocationOrBuilder() {
      return location_;
    }

    // optional uint32 color = 2;
    public static final int COLOR_FIELD_NUMBER = 2;
    private int color_;
    /**
     * <code>optional uint32 color = 2;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 color = 2;</code>
     */
    public int getColor() {
      return color_;
    }

    // optional int32 size = 3;
    public static final int SIZE_FIELD_NUMBER = 3;
    private int size_;
    /**
     * <code>optional int32 size = 3;</code>
     */
    public boolean hasSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 size = 3;</code>
     */
    public int getSize() {
      return size_;
    }

    // optional float duration = 4;
    public static final int DURATION_FIELD_NUMBER = 4;
    private float duration_;
    /**
     * <code>optional float duration = 4;</code>
     */
    public boolean hasDuration() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float duration = 4;</code>
     */
    public float getDuration() {
      return duration_;
    }

    private void initFields() {
      location_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      color_ = 0;
      size_ = 0;
      duration_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, location_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, color_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, size_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, duration_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, location_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, color_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, size_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, duration_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_MinimapDebugPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (locationBuilder_ == null) {
          location_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        color_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        size_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        duration_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (locationBuilder_ == null) {
          result.location_ = location_;
        } else {
          result.location_ = locationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.color_ = color_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.size_ = size_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.duration_ = duration_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint.getDefaultInstance()) return this;
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        if (other.hasColor()) {
          setColor(other.getColor());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (other.hasDuration()) {
          setDuration(other.getDuration());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_MinimapDebugPoint) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .com.valve.dota2.CMsgVector location = 1;
      private com.valve.dota2.Netmessages.CMsgVector location_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> locationBuilder_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getLocation() {
        if (locationBuilder_ == null) {
          return location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
       */
      public Builder setLocation(com.valve.dota2.Netmessages.CMsgVector value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
          onChanged();
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
       */
      public Builder setLocation(
          com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
          onChanged();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
       */
      public Builder mergeLocation(com.valve.dota2.Netmessages.CMsgVector value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              location_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
            location_ =
              com.valve.dota2.Netmessages.CMsgVector.newBuilder(location_).mergeFrom(value).buildPartial();
          } else {
            location_ = value;
          }
          onChanged();
        } else {
          locationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
       */
      public Builder clearLocation() {
        if (locationBuilder_ == null) {
          location_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          onChanged();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector.Builder getLocationBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector location = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                  location_,
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      // optional uint32 color = 2;
      private int color_ ;
      /**
       * <code>optional uint32 color = 2;</code>
       */
      public boolean hasColor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 color = 2;</code>
       */
      public int getColor() {
        return color_;
      }
      /**
       * <code>optional uint32 color = 2;</code>
       */
      public Builder setColor(int value) {
        bitField0_ |= 0x00000002;
        color_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 color = 2;</code>
       */
      public Builder clearColor() {
        bitField0_ = (bitField0_ & ~0x00000002);
        color_ = 0;
        onChanged();
        return this;
      }

      // optional int32 size = 3;
      private int size_ ;
      /**
       * <code>optional int32 size = 3;</code>
       */
      public boolean hasSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 size = 3;</code>
       */
      public int getSize() {
        return size_;
      }
      /**
       * <code>optional int32 size = 3;</code>
       */
      public Builder setSize(int value) {
        bitField0_ |= 0x00000004;
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 size = 3;</code>
       */
      public Builder clearSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        size_ = 0;
        onChanged();
        return this;
      }

      // optional float duration = 4;
      private float duration_ ;
      /**
       * <code>optional float duration = 4;</code>
       */
      public boolean hasDuration() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float duration = 4;</code>
       */
      public float getDuration() {
        return duration_;
      }
      /**
       * <code>optional float duration = 4;</code>
       */
      public Builder setDuration(float value) {
        bitField0_ |= 0x00000008;
        duration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float duration = 4;</code>
       */
      public Builder clearDuration() {
        bitField0_ = (bitField0_ & ~0x00000008);
        duration_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_MinimapDebugPoint)
    }

    static {
      defaultInstance = new CDOTAUserMsg_MinimapDebugPoint(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_MinimapDebugPoint)
  }

  public interface CDOTAUserMsg_CreateLinearProjectileOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .com.valve.dota2.CMsgVector origin = 1;
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
     */
    boolean hasOrigin();
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
     */
    com.valve.dota2.Netmessages.CMsgVector getOrigin();
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
     */
    com.valve.dota2.Netmessages.CMsgVectorOrBuilder getOriginOrBuilder();

    // optional .com.valve.dota2.CMsgVector2D velocity = 2;
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
     */
    boolean hasVelocity();
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
     */
    com.valve.dota2.Netmessages.CMsgVector2D getVelocity();
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
     */
    com.valve.dota2.Netmessages.CMsgVector2DOrBuilder getVelocityOrBuilder();

    // optional int32 latency = 3;
    /**
     * <code>optional int32 latency = 3;</code>
     */
    boolean hasLatency();
    /**
     * <code>optional int32 latency = 3;</code>
     */
    int getLatency();

    // optional int32 entindex = 4;
    /**
     * <code>optional int32 entindex = 4;</code>
     */
    boolean hasEntindex();
    /**
     * <code>optional int32 entindex = 4;</code>
     */
    int getEntindex();

    // optional int32 particle_index = 5;
    /**
     * <code>optional int32 particle_index = 5;</code>
     */
    boolean hasParticleIndex();
    /**
     * <code>optional int32 particle_index = 5;</code>
     */
    int getParticleIndex();

    // optional int32 handle = 6;
    /**
     * <code>optional int32 handle = 6;</code>
     */
    boolean hasHandle();
    /**
     * <code>optional int32 handle = 6;</code>
     */
    int getHandle();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_CreateLinearProjectile}
   */
  public static final class CDOTAUserMsg_CreateLinearProjectile extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_CreateLinearProjectileOrBuilder {
    // Use CDOTAUserMsg_CreateLinearProjectile.newBuilder() to construct.
    private CDOTAUserMsg_CreateLinearProjectile(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_CreateLinearProjectile(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_CreateLinearProjectile defaultInstance;
    public static CDOTAUserMsg_CreateLinearProjectile getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_CreateLinearProjectile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_CreateLinearProjectile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = origin_.toBuilder();
              }
              origin_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(origin_);
                origin_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              com.valve.dota2.Netmessages.CMsgVector2D.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = velocity_.toBuilder();
              }
              velocity_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector2D.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(velocity_);
                velocity_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              latency_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              entindex_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              particleIndex_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              handle_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_CreateLinearProjectile> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_CreateLinearProjectile>() {
      public CDOTAUserMsg_CreateLinearProjectile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_CreateLinearProjectile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_CreateLinearProjectile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional .com.valve.dota2.CMsgVector origin = 1;
    public static final int ORIGIN_FIELD_NUMBER = 1;
    private com.valve.dota2.Netmessages.CMsgVector origin_;
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
     */
    public boolean hasOrigin() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVector getOrigin() {
      return origin_;
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getOriginOrBuilder() {
      return origin_;
    }

    // optional .com.valve.dota2.CMsgVector2D velocity = 2;
    public static final int VELOCITY_FIELD_NUMBER = 2;
    private com.valve.dota2.Netmessages.CMsgVector2D velocity_;
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
     */
    public boolean hasVelocity() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVector2D getVelocity() {
      return velocity_;
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVector2DOrBuilder getVelocityOrBuilder() {
      return velocity_;
    }

    // optional int32 latency = 3;
    public static final int LATENCY_FIELD_NUMBER = 3;
    private int latency_;
    /**
     * <code>optional int32 latency = 3;</code>
     */
    public boolean hasLatency() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 latency = 3;</code>
     */
    public int getLatency() {
      return latency_;
    }

    // optional int32 entindex = 4;
    public static final int ENTINDEX_FIELD_NUMBER = 4;
    private int entindex_;
    /**
     * <code>optional int32 entindex = 4;</code>
     */
    public boolean hasEntindex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 entindex = 4;</code>
     */
    public int getEntindex() {
      return entindex_;
    }

    // optional int32 particle_index = 5;
    public static final int PARTICLE_INDEX_FIELD_NUMBER = 5;
    private int particleIndex_;
    /**
     * <code>optional int32 particle_index = 5;</code>
     */
    public boolean hasParticleIndex() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 particle_index = 5;</code>
     */
    public int getParticleIndex() {
      return particleIndex_;
    }

    // optional int32 handle = 6;
    public static final int HANDLE_FIELD_NUMBER = 6;
    private int handle_;
    /**
     * <code>optional int32 handle = 6;</code>
     */
    public boolean hasHandle() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 handle = 6;</code>
     */
    public int getHandle() {
      return handle_;
    }

    private void initFields() {
      origin_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      velocity_ = com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance();
      latency_ = 0;
      entindex_ = 0;
      particleIndex_ = 0;
      handle_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, origin_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, velocity_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, latency_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, entindex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, particleIndex_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, handle_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, origin_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, velocity_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, latency_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, entindex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, particleIndex_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, handle_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_CreateLinearProjectile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectileOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOriginFieldBuilder();
          getVelocityFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (originBuilder_ == null) {
          origin_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        } else {
          originBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (velocityBuilder_ == null) {
          velocity_ = com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance();
        } else {
          velocityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        latency_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        entindex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        particleIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        handle_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (originBuilder_ == null) {
          result.origin_ = origin_;
        } else {
          result.origin_ = originBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (velocityBuilder_ == null) {
          result.velocity_ = velocity_;
        } else {
          result.velocity_ = velocityBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.latency_ = latency_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.entindex_ = entindex_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.particleIndex_ = particleIndex_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.handle_ = handle_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile.getDefaultInstance()) return this;
        if (other.hasOrigin()) {
          mergeOrigin(other.getOrigin());
        }
        if (other.hasVelocity()) {
          mergeVelocity(other.getVelocity());
        }
        if (other.hasLatency()) {
          setLatency(other.getLatency());
        }
        if (other.hasEntindex()) {
          setEntindex(other.getEntindex());
        }
        if (other.hasParticleIndex()) {
          setParticleIndex(other.getParticleIndex());
        }
        if (other.hasHandle()) {
          setHandle(other.getHandle());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_CreateLinearProjectile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .com.valve.dota2.CMsgVector origin = 1;
      private com.valve.dota2.Netmessages.CMsgVector origin_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> originBuilder_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
       */
      public boolean hasOrigin() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getOrigin() {
        if (originBuilder_ == null) {
          return origin_;
        } else {
          return originBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
       */
      public Builder setOrigin(com.valve.dota2.Netmessages.CMsgVector value) {
        if (originBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          origin_ = value;
          onChanged();
        } else {
          originBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
       */
      public Builder setOrigin(
          com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
        if (originBuilder_ == null) {
          origin_ = builderForValue.build();
          onChanged();
        } else {
          originBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
       */
      public Builder mergeOrigin(com.valve.dota2.Netmessages.CMsgVector value) {
        if (originBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              origin_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
            origin_ =
              com.valve.dota2.Netmessages.CMsgVector.newBuilder(origin_).mergeFrom(value).buildPartial();
          } else {
            origin_ = value;
          }
          onChanged();
        } else {
          originBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
       */
      public Builder clearOrigin() {
        if (originBuilder_ == null) {
          origin_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          onChanged();
        } else {
          originBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector.Builder getOriginBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getOriginFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getOriginOrBuilder() {
        if (originBuilder_ != null) {
          return originBuilder_.getMessageOrBuilder();
        } else {
          return origin_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
          getOriginFieldBuilder() {
        if (originBuilder_ == null) {
          originBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                  origin_,
                  getParentForChildren(),
                  isClean());
          origin_ = null;
        }
        return originBuilder_;
      }

      // optional .com.valve.dota2.CMsgVector2D velocity = 2;
      private com.valve.dota2.Netmessages.CMsgVector2D velocity_ = com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector2D, com.valve.dota2.Netmessages.CMsgVector2D.Builder, com.valve.dota2.Netmessages.CMsgVector2DOrBuilder> velocityBuilder_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
       */
      public boolean hasVelocity() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector2D getVelocity() {
        if (velocityBuilder_ == null) {
          return velocity_;
        } else {
          return velocityBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
       */
      public Builder setVelocity(com.valve.dota2.Netmessages.CMsgVector2D value) {
        if (velocityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          velocity_ = value;
          onChanged();
        } else {
          velocityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
       */
      public Builder setVelocity(
          com.valve.dota2.Netmessages.CMsgVector2D.Builder builderForValue) {
        if (velocityBuilder_ == null) {
          velocity_ = builderForValue.build();
          onChanged();
        } else {
          velocityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
       */
      public Builder mergeVelocity(com.valve.dota2.Netmessages.CMsgVector2D value) {
        if (velocityBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              velocity_ != com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance()) {
            velocity_ =
              com.valve.dota2.Netmessages.CMsgVector2D.newBuilder(velocity_).mergeFrom(value).buildPartial();
          } else {
            velocity_ = value;
          }
          onChanged();
        } else {
          velocityBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
       */
      public Builder clearVelocity() {
        if (velocityBuilder_ == null) {
          velocity_ = com.valve.dota2.Netmessages.CMsgVector2D.getDefaultInstance();
          onChanged();
        } else {
          velocityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector2D.Builder getVelocityBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getVelocityFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector2DOrBuilder getVelocityOrBuilder() {
        if (velocityBuilder_ != null) {
          return velocityBuilder_.getMessageOrBuilder();
        } else {
          return velocity_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector2D velocity = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector2D, com.valve.dota2.Netmessages.CMsgVector2D.Builder, com.valve.dota2.Netmessages.CMsgVector2DOrBuilder> 
          getVelocityFieldBuilder() {
        if (velocityBuilder_ == null) {
          velocityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.Netmessages.CMsgVector2D, com.valve.dota2.Netmessages.CMsgVector2D.Builder, com.valve.dota2.Netmessages.CMsgVector2DOrBuilder>(
                  velocity_,
                  getParentForChildren(),
                  isClean());
          velocity_ = null;
        }
        return velocityBuilder_;
      }

      // optional int32 latency = 3;
      private int latency_ ;
      /**
       * <code>optional int32 latency = 3;</code>
       */
      public boolean hasLatency() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 latency = 3;</code>
       */
      public int getLatency() {
        return latency_;
      }
      /**
       * <code>optional int32 latency = 3;</code>
       */
      public Builder setLatency(int value) {
        bitField0_ |= 0x00000004;
        latency_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 latency = 3;</code>
       */
      public Builder clearLatency() {
        bitField0_ = (bitField0_ & ~0x00000004);
        latency_ = 0;
        onChanged();
        return this;
      }

      // optional int32 entindex = 4;
      private int entindex_ ;
      /**
       * <code>optional int32 entindex = 4;</code>
       */
      public boolean hasEntindex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 entindex = 4;</code>
       */
      public int getEntindex() {
        return entindex_;
      }
      /**
       * <code>optional int32 entindex = 4;</code>
       */
      public Builder setEntindex(int value) {
        bitField0_ |= 0x00000008;
        entindex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 entindex = 4;</code>
       */
      public Builder clearEntindex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        entindex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 particle_index = 5;
      private int particleIndex_ ;
      /**
       * <code>optional int32 particle_index = 5;</code>
       */
      public boolean hasParticleIndex() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 particle_index = 5;</code>
       */
      public int getParticleIndex() {
        return particleIndex_;
      }
      /**
       * <code>optional int32 particle_index = 5;</code>
       */
      public Builder setParticleIndex(int value) {
        bitField0_ |= 0x00000010;
        particleIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 particle_index = 5;</code>
       */
      public Builder clearParticleIndex() {
        bitField0_ = (bitField0_ & ~0x00000010);
        particleIndex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 handle = 6;
      private int handle_ ;
      /**
       * <code>optional int32 handle = 6;</code>
       */
      public boolean hasHandle() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 handle = 6;</code>
       */
      public int getHandle() {
        return handle_;
      }
      /**
       * <code>optional int32 handle = 6;</code>
       */
      public Builder setHandle(int value) {
        bitField0_ |= 0x00000020;
        handle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 handle = 6;</code>
       */
      public Builder clearHandle() {
        bitField0_ = (bitField0_ & ~0x00000020);
        handle_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_CreateLinearProjectile)
    }

    static {
      defaultInstance = new CDOTAUserMsg_CreateLinearProjectile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_CreateLinearProjectile)
  }

  public interface CDOTAUserMsg_DestroyLinearProjectileOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 handle = 1;
    /**
     * <code>optional int32 handle = 1;</code>
     */
    boolean hasHandle();
    /**
     * <code>optional int32 handle = 1;</code>
     */
    int getHandle();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_DestroyLinearProjectile}
   */
  public static final class CDOTAUserMsg_DestroyLinearProjectile extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_DestroyLinearProjectileOrBuilder {
    // Use CDOTAUserMsg_DestroyLinearProjectile.newBuilder() to construct.
    private CDOTAUserMsg_DestroyLinearProjectile(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_DestroyLinearProjectile(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_DestroyLinearProjectile defaultInstance;
    public static CDOTAUserMsg_DestroyLinearProjectile getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_DestroyLinearProjectile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_DestroyLinearProjectile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              handle_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_DestroyLinearProjectile> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_DestroyLinearProjectile>() {
      public CDOTAUserMsg_DestroyLinearProjectile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_DestroyLinearProjectile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_DestroyLinearProjectile> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 handle = 1;
    public static final int HANDLE_FIELD_NUMBER = 1;
    private int handle_;
    /**
     * <code>optional int32 handle = 1;</code>
     */
    public boolean hasHandle() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 handle = 1;</code>
     */
    public int getHandle() {
      return handle_;
    }

    private void initFields() {
      handle_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, handle_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, handle_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_DestroyLinearProjectile}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectileOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        handle_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.handle_ = handle_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile.getDefaultInstance()) return this;
        if (other.hasHandle()) {
          setHandle(other.getHandle());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DestroyLinearProjectile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 handle = 1;
      private int handle_ ;
      /**
       * <code>optional int32 handle = 1;</code>
       */
      public boolean hasHandle() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 handle = 1;</code>
       */
      public int getHandle() {
        return handle_;
      }
      /**
       * <code>optional int32 handle = 1;</code>
       */
      public Builder setHandle(int value) {
        bitField0_ |= 0x00000001;
        handle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 handle = 1;</code>
       */
      public Builder clearHandle() {
        bitField0_ = (bitField0_ & ~0x00000001);
        handle_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_DestroyLinearProjectile)
    }

    static {
      defaultInstance = new CDOTAUserMsg_DestroyLinearProjectile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_DestroyLinearProjectile)
  }

  public interface CDOTAUserMsg_DodgeTrackingProjectilesOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 entindex = 1;
    /**
     * <code>required int32 entindex = 1;</code>
     */
    boolean hasEntindex();
    /**
     * <code>required int32 entindex = 1;</code>
     */
    int getEntindex();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_DodgeTrackingProjectiles}
   */
  public static final class CDOTAUserMsg_DodgeTrackingProjectiles extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_DodgeTrackingProjectilesOrBuilder {
    // Use CDOTAUserMsg_DodgeTrackingProjectiles.newBuilder() to construct.
    private CDOTAUserMsg_DodgeTrackingProjectiles(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_DodgeTrackingProjectiles(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_DodgeTrackingProjectiles defaultInstance;
    public static CDOTAUserMsg_DodgeTrackingProjectiles getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_DodgeTrackingProjectiles getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_DodgeTrackingProjectiles(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              entindex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_DodgeTrackingProjectiles> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_DodgeTrackingProjectiles>() {
      public CDOTAUserMsg_DodgeTrackingProjectiles parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_DodgeTrackingProjectiles(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_DodgeTrackingProjectiles> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 entindex = 1;
    public static final int ENTINDEX_FIELD_NUMBER = 1;
    private int entindex_;
    /**
     * <code>required int32 entindex = 1;</code>
     */
    public boolean hasEntindex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 entindex = 1;</code>
     */
    public int getEntindex() {
      return entindex_;
    }

    private void initFields() {
      entindex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasEntindex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, entindex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, entindex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_DodgeTrackingProjectiles}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectilesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        entindex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.entindex_ = entindex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles.getDefaultInstance()) return this;
        if (other.hasEntindex()) {
          setEntindex(other.getEntindex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasEntindex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_DodgeTrackingProjectiles) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 entindex = 1;
      private int entindex_ ;
      /**
       * <code>required int32 entindex = 1;</code>
       */
      public boolean hasEntindex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 entindex = 1;</code>
       */
      public int getEntindex() {
        return entindex_;
      }
      /**
       * <code>required int32 entindex = 1;</code>
       */
      public Builder setEntindex(int value) {
        bitField0_ |= 0x00000001;
        entindex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 entindex = 1;</code>
       */
      public Builder clearEntindex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        entindex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_DodgeTrackingProjectiles)
    }

    static {
      defaultInstance = new CDOTAUserMsg_DodgeTrackingProjectiles(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_DodgeTrackingProjectiles)
  }

  public interface CDOTAUserMsg_SpectatorPlayerClickOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 entindex = 1;
    /**
     * <code>required int32 entindex = 1;</code>
     */
    boolean hasEntindex();
    /**
     * <code>required int32 entindex = 1;</code>
     */
    int getEntindex();

    // optional int32 order_type = 2;
    /**
     * <code>optional int32 order_type = 2;</code>
     */
    boolean hasOrderType();
    /**
     * <code>optional int32 order_type = 2;</code>
     */
    int getOrderType();

    // optional int32 target_index = 3;
    /**
     * <code>optional int32 target_index = 3;</code>
     */
    boolean hasTargetIndex();
    /**
     * <code>optional int32 target_index = 3;</code>
     */
    int getTargetIndex();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_SpectatorPlayerClick}
   */
  public static final class CDOTAUserMsg_SpectatorPlayerClick extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_SpectatorPlayerClickOrBuilder {
    // Use CDOTAUserMsg_SpectatorPlayerClick.newBuilder() to construct.
    private CDOTAUserMsg_SpectatorPlayerClick(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_SpectatorPlayerClick(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_SpectatorPlayerClick defaultInstance;
    public static CDOTAUserMsg_SpectatorPlayerClick getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_SpectatorPlayerClick getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_SpectatorPlayerClick(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              entindex_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              orderType_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              targetIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_SpectatorPlayerClick> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_SpectatorPlayerClick>() {
      public CDOTAUserMsg_SpectatorPlayerClick parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_SpectatorPlayerClick(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_SpectatorPlayerClick> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 entindex = 1;
    public static final int ENTINDEX_FIELD_NUMBER = 1;
    private int entindex_;
    /**
     * <code>required int32 entindex = 1;</code>
     */
    public boolean hasEntindex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 entindex = 1;</code>
     */
    public int getEntindex() {
      return entindex_;
    }

    // optional int32 order_type = 2;
    public static final int ORDER_TYPE_FIELD_NUMBER = 2;
    private int orderType_;
    /**
     * <code>optional int32 order_type = 2;</code>
     */
    public boolean hasOrderType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 order_type = 2;</code>
     */
    public int getOrderType() {
      return orderType_;
    }

    // optional int32 target_index = 3;
    public static final int TARGET_INDEX_FIELD_NUMBER = 3;
    private int targetIndex_;
    /**
     * <code>optional int32 target_index = 3;</code>
     */
    public boolean hasTargetIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 target_index = 3;</code>
     */
    public int getTargetIndex() {
      return targetIndex_;
    }

    private void initFields() {
      entindex_ = 0;
      orderType_ = 0;
      targetIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasEntindex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, entindex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, orderType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, targetIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, entindex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, orderType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, targetIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_SpectatorPlayerClick}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClickOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        entindex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        orderType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        targetIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.entindex_ = entindex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.orderType_ = orderType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.targetIndex_ = targetIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick.getDefaultInstance()) return this;
        if (other.hasEntindex()) {
          setEntindex(other.getEntindex());
        }
        if (other.hasOrderType()) {
          setOrderType(other.getOrderType());
        }
        if (other.hasTargetIndex()) {
          setTargetIndex(other.getTargetIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasEntindex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SpectatorPlayerClick) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 entindex = 1;
      private int entindex_ ;
      /**
       * <code>required int32 entindex = 1;</code>
       */
      public boolean hasEntindex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 entindex = 1;</code>
       */
      public int getEntindex() {
        return entindex_;
      }
      /**
       * <code>required int32 entindex = 1;</code>
       */
      public Builder setEntindex(int value) {
        bitField0_ |= 0x00000001;
        entindex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 entindex = 1;</code>
       */
      public Builder clearEntindex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        entindex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 order_type = 2;
      private int orderType_ ;
      /**
       * <code>optional int32 order_type = 2;</code>
       */
      public boolean hasOrderType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 order_type = 2;</code>
       */
      public int getOrderType() {
        return orderType_;
      }
      /**
       * <code>optional int32 order_type = 2;</code>
       */
      public Builder setOrderType(int value) {
        bitField0_ |= 0x00000002;
        orderType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 order_type = 2;</code>
       */
      public Builder clearOrderType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        orderType_ = 0;
        onChanged();
        return this;
      }

      // optional int32 target_index = 3;
      private int targetIndex_ ;
      /**
       * <code>optional int32 target_index = 3;</code>
       */
      public boolean hasTargetIndex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 target_index = 3;</code>
       */
      public int getTargetIndex() {
        return targetIndex_;
      }
      /**
       * <code>optional int32 target_index = 3;</code>
       */
      public Builder setTargetIndex(int value) {
        bitField0_ |= 0x00000004;
        targetIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 target_index = 3;</code>
       */
      public Builder clearTargetIndex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        targetIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_SpectatorPlayerClick)
    }

    static {
      defaultInstance = new CDOTAUserMsg_SpectatorPlayerClick(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_SpectatorPlayerClick)
  }

  public interface CDOTAUserMsg_NevermoreRequiemOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 entity_handle = 1;
    /**
     * <code>optional int32 entity_handle = 1;</code>
     */
    boolean hasEntityHandle();
    /**
     * <code>optional int32 entity_handle = 1;</code>
     */
    int getEntityHandle();

    // optional int32 lines = 2;
    /**
     * <code>optional int32 lines = 2;</code>
     */
    boolean hasLines();
    /**
     * <code>optional int32 lines = 2;</code>
     */
    int getLines();

    // optional .com.valve.dota2.CMsgVector origin = 3;
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
     */
    boolean hasOrigin();
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
     */
    com.valve.dota2.Netmessages.CMsgVector getOrigin();
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
     */
    com.valve.dota2.Netmessages.CMsgVectorOrBuilder getOriginOrBuilder();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_NevermoreRequiem}
   */
  public static final class CDOTAUserMsg_NevermoreRequiem extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_NevermoreRequiemOrBuilder {
    // Use CDOTAUserMsg_NevermoreRequiem.newBuilder() to construct.
    private CDOTAUserMsg_NevermoreRequiem(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_NevermoreRequiem(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_NevermoreRequiem defaultInstance;
    public static CDOTAUserMsg_NevermoreRequiem getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_NevermoreRequiem getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_NevermoreRequiem(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              entityHandle_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              lines_ = input.readInt32();
              break;
            }
            case 26: {
              com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = origin_.toBuilder();
              }
              origin_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(origin_);
                origin_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_NevermoreRequiem> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_NevermoreRequiem>() {
      public CDOTAUserMsg_NevermoreRequiem parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_NevermoreRequiem(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_NevermoreRequiem> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 entity_handle = 1;
    public static final int ENTITY_HANDLE_FIELD_NUMBER = 1;
    private int entityHandle_;
    /**
     * <code>optional int32 entity_handle = 1;</code>
     */
    public boolean hasEntityHandle() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 entity_handle = 1;</code>
     */
    public int getEntityHandle() {
      return entityHandle_;
    }

    // optional int32 lines = 2;
    public static final int LINES_FIELD_NUMBER = 2;
    private int lines_;
    /**
     * <code>optional int32 lines = 2;</code>
     */
    public boolean hasLines() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 lines = 2;</code>
     */
    public int getLines() {
      return lines_;
    }

    // optional .com.valve.dota2.CMsgVector origin = 3;
    public static final int ORIGIN_FIELD_NUMBER = 3;
    private com.valve.dota2.Netmessages.CMsgVector origin_;
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
     */
    public boolean hasOrigin() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVector getOrigin() {
      return origin_;
    }
    /**
     * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
     */
    public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getOriginOrBuilder() {
      return origin_;
    }

    private void initFields() {
      entityHandle_ = 0;
      lines_ = 0;
      origin_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, entityHandle_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, lines_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, origin_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, entityHandle_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, lines_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, origin_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_NevermoreRequiem}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiemOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getOriginFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        entityHandle_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        lines_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (originBuilder_ == null) {
          origin_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        } else {
          originBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.entityHandle_ = entityHandle_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.lines_ = lines_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (originBuilder_ == null) {
          result.origin_ = origin_;
        } else {
          result.origin_ = originBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem.getDefaultInstance()) return this;
        if (other.hasEntityHandle()) {
          setEntityHandle(other.getEntityHandle());
        }
        if (other.hasLines()) {
          setLines(other.getLines());
        }
        if (other.hasOrigin()) {
          mergeOrigin(other.getOrigin());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_NevermoreRequiem) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 entity_handle = 1;
      private int entityHandle_ ;
      /**
       * <code>optional int32 entity_handle = 1;</code>
       */
      public boolean hasEntityHandle() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 entity_handle = 1;</code>
       */
      public int getEntityHandle() {
        return entityHandle_;
      }
      /**
       * <code>optional int32 entity_handle = 1;</code>
       */
      public Builder setEntityHandle(int value) {
        bitField0_ |= 0x00000001;
        entityHandle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 entity_handle = 1;</code>
       */
      public Builder clearEntityHandle() {
        bitField0_ = (bitField0_ & ~0x00000001);
        entityHandle_ = 0;
        onChanged();
        return this;
      }

      // optional int32 lines = 2;
      private int lines_ ;
      /**
       * <code>optional int32 lines = 2;</code>
       */
      public boolean hasLines() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 lines = 2;</code>
       */
      public int getLines() {
        return lines_;
      }
      /**
       * <code>optional int32 lines = 2;</code>
       */
      public Builder setLines(int value) {
        bitField0_ |= 0x00000002;
        lines_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 lines = 2;</code>
       */
      public Builder clearLines() {
        bitField0_ = (bitField0_ & ~0x00000002);
        lines_ = 0;
        onChanged();
        return this;
      }

      // optional .com.valve.dota2.CMsgVector origin = 3;
      private com.valve.dota2.Netmessages.CMsgVector origin_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> originBuilder_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
       */
      public boolean hasOrigin() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getOrigin() {
        if (originBuilder_ == null) {
          return origin_;
        } else {
          return originBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
       */
      public Builder setOrigin(com.valve.dota2.Netmessages.CMsgVector value) {
        if (originBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          origin_ = value;
          onChanged();
        } else {
          originBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
       */
      public Builder setOrigin(
          com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
        if (originBuilder_ == null) {
          origin_ = builderForValue.build();
          onChanged();
        } else {
          originBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
       */
      public Builder mergeOrigin(com.valve.dota2.Netmessages.CMsgVector value) {
        if (originBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              origin_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
            origin_ =
              com.valve.dota2.Netmessages.CMsgVector.newBuilder(origin_).mergeFrom(value).buildPartial();
          } else {
            origin_ = value;
          }
          onChanged();
        } else {
          originBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
       */
      public Builder clearOrigin() {
        if (originBuilder_ == null) {
          origin_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          onChanged();
        } else {
          originBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector.Builder getOriginBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getOriginFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getOriginOrBuilder() {
        if (originBuilder_ != null) {
          return originBuilder_.getMessageOrBuilder();
        } else {
          return origin_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
          getOriginFieldBuilder() {
        if (originBuilder_ == null) {
          originBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                  origin_,
                  getParentForChildren(),
                  isClean());
          origin_ = null;
        }
        return originBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_NevermoreRequiem)
    }

    static {
      defaultInstance = new CDOTAUserMsg_NevermoreRequiem(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_NevermoreRequiem)
  }

  public interface CDOTAUserMsg_InvalidCommandOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string message = 1;
    /**
     * <code>optional string message = 1;</code>
     */
    boolean hasMessage();
    /**
     * <code>optional string message = 1;</code>
     */
    java.lang.String getMessage();
    /**
     * <code>optional string message = 1;</code>
     */
    com.google.protobuf.ByteString
        getMessageBytes();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_InvalidCommand}
   */
  public static final class CDOTAUserMsg_InvalidCommand extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_InvalidCommandOrBuilder {
    // Use CDOTAUserMsg_InvalidCommand.newBuilder() to construct.
    private CDOTAUserMsg_InvalidCommand(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_InvalidCommand(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_InvalidCommand defaultInstance;
    public static CDOTAUserMsg_InvalidCommand getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_InvalidCommand getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_InvalidCommand(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              message_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_InvalidCommand> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_InvalidCommand>() {
      public CDOTAUserMsg_InvalidCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_InvalidCommand(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_InvalidCommand> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string message = 1;
    public static final int MESSAGE_FIELD_NUMBER = 1;
    private java.lang.Object message_;
    /**
     * <code>optional string message = 1;</code>
     */
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string message = 1;</code>
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          message_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string message = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      message_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getMessageBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMessageBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_InvalidCommand}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.message_ = message_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand.getDefaultInstance()) return this;
        if (other.hasMessage()) {
          bitField0_ |= 0x00000001;
          message_ = other.message_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_InvalidCommand) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string message = 1;
      private java.lang.Object message_ = "";
      /**
       * <code>optional string message = 1;</code>
       */
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public java.lang.String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        java.lang.Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public Builder setMessage(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <code>optional string message = 1;</code>
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        message_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_InvalidCommand)
    }

    static {
      defaultInstance = new CDOTAUserMsg_InvalidCommand(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_InvalidCommand)
  }

  public interface CDOTAUserMsg_HudErrorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 order_id = 1;
    /**
     * <code>optional int32 order_id = 1;</code>
     */
    boolean hasOrderId();
    /**
     * <code>optional int32 order_id = 1;</code>
     */
    int getOrderId();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_HudError}
   */
  public static final class CDOTAUserMsg_HudError extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_HudErrorOrBuilder {
    // Use CDOTAUserMsg_HudError.newBuilder() to construct.
    private CDOTAUserMsg_HudError(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_HudError(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_HudError defaultInstance;
    public static CDOTAUserMsg_HudError getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_HudError getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_HudError(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              orderId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_HudError_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_HudError_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_HudError> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_HudError>() {
      public CDOTAUserMsg_HudError parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_HudError(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_HudError> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 order_id = 1;
    public static final int ORDER_ID_FIELD_NUMBER = 1;
    private int orderId_;
    /**
     * <code>optional int32 order_id = 1;</code>
     */
    public boolean hasOrderId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 order_id = 1;</code>
     */
    public int getOrderId() {
      return orderId_;
    }

    private void initFields() {
      orderId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, orderId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, orderId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_HudError}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudErrorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_HudError_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_HudError_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        orderId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_HudError_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.orderId_ = orderId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError.getDefaultInstance()) return this;
        if (other.hasOrderId()) {
          setOrderId(other.getOrderId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_HudError) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 order_id = 1;
      private int orderId_ ;
      /**
       * <code>optional int32 order_id = 1;</code>
       */
      public boolean hasOrderId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 order_id = 1;</code>
       */
      public int getOrderId() {
        return orderId_;
      }
      /**
       * <code>optional int32 order_id = 1;</code>
       */
      public Builder setOrderId(int value) {
        bitField0_ |= 0x00000001;
        orderId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 order_id = 1;</code>
       */
      public Builder clearOrderId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        orderId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_HudError)
    }

    static {
      defaultInstance = new CDOTAUserMsg_HudError(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_HudError)
  }

  public interface CDOTAUserMsg_SharedCooldownOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 entindex = 1;
    /**
     * <code>optional int32 entindex = 1;</code>
     */
    boolean hasEntindex();
    /**
     * <code>optional int32 entindex = 1;</code>
     */
    int getEntindex();

    // optional string name = 2;
    /**
     * <code>optional string name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // optional float cooldown = 3;
    /**
     * <code>optional float cooldown = 3;</code>
     */
    boolean hasCooldown();
    /**
     * <code>optional float cooldown = 3;</code>
     */
    float getCooldown();

    // optional int32 name_index = 4;
    /**
     * <code>optional int32 name_index = 4;</code>
     */
    boolean hasNameIndex();
    /**
     * <code>optional int32 name_index = 4;</code>
     */
    int getNameIndex();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_SharedCooldown}
   */
  public static final class CDOTAUserMsg_SharedCooldown extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_SharedCooldownOrBuilder {
    // Use CDOTAUserMsg_SharedCooldown.newBuilder() to construct.
    private CDOTAUserMsg_SharedCooldown(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_SharedCooldown(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_SharedCooldown defaultInstance;
    public static CDOTAUserMsg_SharedCooldown getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_SharedCooldown getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_SharedCooldown(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              entindex_ = input.readInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              name_ = input.readBytes();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              cooldown_ = input.readFloat();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              nameIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_SharedCooldown> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_SharedCooldown>() {
      public CDOTAUserMsg_SharedCooldown parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_SharedCooldown(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_SharedCooldown> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 entindex = 1;
    public static final int ENTINDEX_FIELD_NUMBER = 1;
    private int entindex_;
    /**
     * <code>optional int32 entindex = 1;</code>
     */
    public boolean hasEntindex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 entindex = 1;</code>
     */
    public int getEntindex() {
      return entindex_;
    }

    // optional string name = 2;
    public static final int NAME_FIELD_NUMBER = 2;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float cooldown = 3;
    public static final int COOLDOWN_FIELD_NUMBER = 3;
    private float cooldown_;
    /**
     * <code>optional float cooldown = 3;</code>
     */
    public boolean hasCooldown() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float cooldown = 3;</code>
     */
    public float getCooldown() {
      return cooldown_;
    }

    // optional int32 name_index = 4;
    public static final int NAME_INDEX_FIELD_NUMBER = 4;
    private int nameIndex_;
    /**
     * <code>optional int32 name_index = 4;</code>
     */
    public boolean hasNameIndex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 name_index = 4;</code>
     */
    public int getNameIndex() {
      return nameIndex_;
    }

    private void initFields() {
      entindex_ = 0;
      name_ = "";
      cooldown_ = 0F;
      nameIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, entindex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, cooldown_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, nameIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, entindex_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getNameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, cooldown_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, nameIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_SharedCooldown}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldownOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        entindex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        cooldown_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        nameIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.entindex_ = entindex_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cooldown_ = cooldown_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.nameIndex_ = nameIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown.getDefaultInstance()) return this;
        if (other.hasEntindex()) {
          setEntindex(other.getEntindex());
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000002;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasCooldown()) {
          setCooldown(other.getCooldown());
        }
        if (other.hasNameIndex()) {
          setNameIndex(other.getNameIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SharedCooldown) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 entindex = 1;
      private int entindex_ ;
      /**
       * <code>optional int32 entindex = 1;</code>
       */
      public boolean hasEntindex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 entindex = 1;</code>
       */
      public int getEntindex() {
        return entindex_;
      }
      /**
       * <code>optional int32 entindex = 1;</code>
       */
      public Builder setEntindex(int value) {
        bitField0_ |= 0x00000001;
        entindex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 entindex = 1;</code>
       */
      public Builder clearEntindex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        entindex_ = 0;
        onChanged();
        return this;
      }

      // optional string name = 2;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }

      // optional float cooldown = 3;
      private float cooldown_ ;
      /**
       * <code>optional float cooldown = 3;</code>
       */
      public boolean hasCooldown() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float cooldown = 3;</code>
       */
      public float getCooldown() {
        return cooldown_;
      }
      /**
       * <code>optional float cooldown = 3;</code>
       */
      public Builder setCooldown(float value) {
        bitField0_ |= 0x00000004;
        cooldown_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cooldown = 3;</code>
       */
      public Builder clearCooldown() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cooldown_ = 0F;
        onChanged();
        return this;
      }

      // optional int32 name_index = 4;
      private int nameIndex_ ;
      /**
       * <code>optional int32 name_index = 4;</code>
       */
      public boolean hasNameIndex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 name_index = 4;</code>
       */
      public int getNameIndex() {
        return nameIndex_;
      }
      /**
       * <code>optional int32 name_index = 4;</code>
       */
      public Builder setNameIndex(int value) {
        bitField0_ |= 0x00000008;
        nameIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 name_index = 4;</code>
       */
      public Builder clearNameIndex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        nameIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_SharedCooldown)
    }

    static {
      defaultInstance = new CDOTAUserMsg_SharedCooldown(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_SharedCooldown)
  }

  public interface CDOTAUserMsg_SetNextAutobuyItemOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string name = 1;
    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_SetNextAutobuyItem}
   */
  public static final class CDOTAUserMsg_SetNextAutobuyItem extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_SetNextAutobuyItemOrBuilder {
    // Use CDOTAUserMsg_SetNextAutobuyItem.newBuilder() to construct.
    private CDOTAUserMsg_SetNextAutobuyItem(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_SetNextAutobuyItem(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_SetNextAutobuyItem defaultInstance;
    public static CDOTAUserMsg_SetNextAutobuyItem getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_SetNextAutobuyItem getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_SetNextAutobuyItem(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_SetNextAutobuyItem> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_SetNextAutobuyItem>() {
      public CDOTAUserMsg_SetNextAutobuyItem parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_SetNextAutobuyItem(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_SetNextAutobuyItem> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      name_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_SetNextAutobuyItem}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItemOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_SetNextAutobuyItem) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_SetNextAutobuyItem)
    }

    static {
      defaultInstance = new CDOTAUserMsg_SetNextAutobuyItem(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_SetNextAutobuyItem)
  }

  public interface CDOTAUserMsg_UnitEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .com.valve.dota2.EDotaEntityMessages msg_type = 1;
    /**
     * <code>required .com.valve.dota2.EDotaEntityMessages msg_type = 1;</code>
     */
    boolean hasMsgType();
    /**
     * <code>required .com.valve.dota2.EDotaEntityMessages msg_type = 1;</code>
     */
    com.valve.dota2.DotaUsermessages.EDotaEntityMessages getMsgType();

    // required int32 entity_index = 2;
    /**
     * <code>required int32 entity_index = 2;</code>
     */
    boolean hasEntityIndex();
    /**
     * <code>required int32 entity_index = 2;</code>
     */
    int getEntityIndex();

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
     */
    boolean hasSpeech();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech getSpeech();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechOrBuilder getSpeechOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
     */
    boolean hasSpeechMute();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute getSpeechMute();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMuteOrBuilder getSpeechMuteOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
     */
    boolean hasAddGesture();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture getAddGesture();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGestureOrBuilder getAddGestureOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
     */
    boolean hasRemoveGesture();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture getRemoveGesture();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGestureOrBuilder getRemoveGestureOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
     */
    boolean hasBloodImpact();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact getBloodImpact();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpactOrBuilder getBloodImpactOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
     */
    boolean hasFadeGesture();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture getFadeGesture();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGestureOrBuilder getFadeGestureOrBuilder();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent}
   */
  public static final class CDOTAUserMsg_UnitEvent extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_UnitEventOrBuilder {
    // Use CDOTAUserMsg_UnitEvent.newBuilder() to construct.
    private CDOTAUserMsg_UnitEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_UnitEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_UnitEvent defaultInstance;
    public static CDOTAUserMsg_UnitEvent getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_UnitEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_UnitEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.valve.dota2.DotaUsermessages.EDotaEntityMessages value = com.valve.dota2.DotaUsermessages.EDotaEntityMessages.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                msgType_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              entityIndex_ = input.readInt32();
              break;
            }
            case 26: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = speech_.toBuilder();
              }
              speech_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(speech_);
                speech_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = speechMute_.toBuilder();
              }
              speechMute_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(speechMute_);
                speechMute_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = addGesture_.toBuilder();
              }
              addGesture_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(addGesture_);
                addGesture_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = removeGesture_.toBuilder();
              }
              removeGesture_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(removeGesture_);
                removeGesture_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = bloodImpact_.toBuilder();
              }
              bloodImpact_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bloodImpact_);
                bloodImpact_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = fadeGesture_.toBuilder();
              }
              fadeGesture_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fadeGesture_);
                fadeGesture_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_UnitEvent> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_UnitEvent>() {
      public CDOTAUserMsg_UnitEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_UnitEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_UnitEvent> getParserForType() {
      return PARSER;
    }

    public interface SpeechOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 concept = 1;
      /**
       * <code>optional int32 concept = 1;</code>
       */
      boolean hasConcept();
      /**
       * <code>optional int32 concept = 1;</code>
       */
      int getConcept();

      // optional string response = 2;
      /**
       * <code>optional string response = 2;</code>
       */
      boolean hasResponse();
      /**
       * <code>optional string response = 2;</code>
       */
      java.lang.String getResponse();
      /**
       * <code>optional string response = 2;</code>
       */
      com.google.protobuf.ByteString
          getResponseBytes();

      // optional int32 recipient_type = 3;
      /**
       * <code>optional int32 recipient_type = 3;</code>
       */
      boolean hasRecipientType();
      /**
       * <code>optional int32 recipient_type = 3;</code>
       */
      int getRecipientType();

      // optional int32 level = 4;
      /**
       * <code>optional int32 level = 4;</code>
       */
      boolean hasLevel();
      /**
       * <code>optional int32 level = 4;</code>
       */
      int getLevel();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech}
     */
    public static final class Speech extends
        com.google.protobuf.GeneratedMessage
        implements SpeechOrBuilder {
      // Use Speech.newBuilder() to construct.
      private Speech(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Speech(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Speech defaultInstance;
      public static Speech getDefaultInstance() {
        return defaultInstance;
      }

      public Speech getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Speech(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                concept_ = input.readInt32();
                break;
              }
              case 18: {
                bitField0_ |= 0x00000002;
                response_ = input.readBytes();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                recipientType_ = input.readInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                level_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.Builder.class);
      }

      public static com.google.protobuf.Parser<Speech> PARSER =
          new com.google.protobuf.AbstractParser<Speech>() {
        public Speech parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Speech(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Speech> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 concept = 1;
      public static final int CONCEPT_FIELD_NUMBER = 1;
      private int concept_;
      /**
       * <code>optional int32 concept = 1;</code>
       */
      public boolean hasConcept() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 concept = 1;</code>
       */
      public int getConcept() {
        return concept_;
      }

      // optional string response = 2;
      public static final int RESPONSE_FIELD_NUMBER = 2;
      private java.lang.Object response_;
      /**
       * <code>optional string response = 2;</code>
       */
      public boolean hasResponse() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string response = 2;</code>
       */
      public java.lang.String getResponse() {
        java.lang.Object ref = response_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            response_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string response = 2;</code>
       */
      public com.google.protobuf.ByteString
          getResponseBytes() {
        java.lang.Object ref = response_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          response_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional int32 recipient_type = 3;
      public static final int RECIPIENT_TYPE_FIELD_NUMBER = 3;
      private int recipientType_;
      /**
       * <code>optional int32 recipient_type = 3;</code>
       */
      public boolean hasRecipientType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 recipient_type = 3;</code>
       */
      public int getRecipientType() {
        return recipientType_;
      }

      // optional int32 level = 4;
      public static final int LEVEL_FIELD_NUMBER = 4;
      private int level_;
      /**
       * <code>optional int32 level = 4;</code>
       */
      public boolean hasLevel() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 level = 4;</code>
       */
      public int getLevel() {
        return level_;
      }

      private void initFields() {
        concept_ = 0;
        response_ = "";
        recipientType_ = 0;
        level_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, concept_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getResponseBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, recipientType_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeInt32(4, level_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, concept_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getResponseBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, recipientType_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, level_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          concept_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          response_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          recipientType_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          level_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.concept_ = concept_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.response_ = response_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.recipientType_ = recipientType_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.level_ = level_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.getDefaultInstance()) return this;
          if (other.hasConcept()) {
            setConcept(other.getConcept());
          }
          if (other.hasResponse()) {
            bitField0_ |= 0x00000002;
            response_ = other.response_;
            onChanged();
          }
          if (other.hasRecipientType()) {
            setRecipientType(other.getRecipientType());
          }
          if (other.hasLevel()) {
            setLevel(other.getLevel());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 concept = 1;
        private int concept_ ;
        /**
         * <code>optional int32 concept = 1;</code>
         */
        public boolean hasConcept() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 concept = 1;</code>
         */
        public int getConcept() {
          return concept_;
        }
        /**
         * <code>optional int32 concept = 1;</code>
         */
        public Builder setConcept(int value) {
          bitField0_ |= 0x00000001;
          concept_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 concept = 1;</code>
         */
        public Builder clearConcept() {
          bitField0_ = (bitField0_ & ~0x00000001);
          concept_ = 0;
          onChanged();
          return this;
        }

        // optional string response = 2;
        private java.lang.Object response_ = "";
        /**
         * <code>optional string response = 2;</code>
         */
        public boolean hasResponse() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string response = 2;</code>
         */
        public java.lang.String getResponse() {
          java.lang.Object ref = response_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            response_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string response = 2;</code>
         */
        public com.google.protobuf.ByteString
            getResponseBytes() {
          java.lang.Object ref = response_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            response_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string response = 2;</code>
         */
        public Builder setResponse(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          response_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string response = 2;</code>
         */
        public Builder clearResponse() {
          bitField0_ = (bitField0_ & ~0x00000002);
          response_ = getDefaultInstance().getResponse();
          onChanged();
          return this;
        }
        /**
         * <code>optional string response = 2;</code>
         */
        public Builder setResponseBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          response_ = value;
          onChanged();
          return this;
        }

        // optional int32 recipient_type = 3;
        private int recipientType_ ;
        /**
         * <code>optional int32 recipient_type = 3;</code>
         */
        public boolean hasRecipientType() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional int32 recipient_type = 3;</code>
         */
        public int getRecipientType() {
          return recipientType_;
        }
        /**
         * <code>optional int32 recipient_type = 3;</code>
         */
        public Builder setRecipientType(int value) {
          bitField0_ |= 0x00000004;
          recipientType_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 recipient_type = 3;</code>
         */
        public Builder clearRecipientType() {
          bitField0_ = (bitField0_ & ~0x00000004);
          recipientType_ = 0;
          onChanged();
          return this;
        }

        // optional int32 level = 4;
        private int level_ ;
        /**
         * <code>optional int32 level = 4;</code>
         */
        public boolean hasLevel() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional int32 level = 4;</code>
         */
        public int getLevel() {
          return level_;
        }
        /**
         * <code>optional int32 level = 4;</code>
         */
        public Builder setLevel(int value) {
          bitField0_ |= 0x00000008;
          level_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 level = 4;</code>
         */
        public Builder clearLevel() {
          bitField0_ = (bitField0_ & ~0x00000008);
          level_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech)
      }

      static {
        defaultInstance = new Speech(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech)
    }

    public interface SpeechMuteOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional float delay = 1 [default = 0.5];
      /**
       * <code>optional float delay = 1 [default = 0.5];</code>
       */
      boolean hasDelay();
      /**
       * <code>optional float delay = 1 [default = 0.5];</code>
       */
      float getDelay();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute}
     */
    public static final class SpeechMute extends
        com.google.protobuf.GeneratedMessage
        implements SpeechMuteOrBuilder {
      // Use SpeechMute.newBuilder() to construct.
      private SpeechMute(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private SpeechMute(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final SpeechMute defaultInstance;
      public static SpeechMute getDefaultInstance() {
        return defaultInstance;
      }

      public SpeechMute getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private SpeechMute(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 13: {
                bitField0_ |= 0x00000001;
                delay_ = input.readFloat();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.Builder.class);
      }

      public static com.google.protobuf.Parser<SpeechMute> PARSER =
          new com.google.protobuf.AbstractParser<SpeechMute>() {
        public SpeechMute parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SpeechMute(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<SpeechMute> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional float delay = 1 [default = 0.5];
      public static final int DELAY_FIELD_NUMBER = 1;
      private float delay_;
      /**
       * <code>optional float delay = 1 [default = 0.5];</code>
       */
      public boolean hasDelay() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float delay = 1 [default = 0.5];</code>
       */
      public float getDelay() {
        return delay_;
      }

      private void initFields() {
        delay_ = 0.5F;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeFloat(1, delay_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(1, delay_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMuteOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          delay_ = 0.5F;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.delay_ = delay_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.getDefaultInstance()) return this;
          if (other.hasDelay()) {
            setDelay(other.getDelay());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional float delay = 1 [default = 0.5];
        private float delay_ = 0.5F;
        /**
         * <code>optional float delay = 1 [default = 0.5];</code>
         */
        public boolean hasDelay() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional float delay = 1 [default = 0.5];</code>
         */
        public float getDelay() {
          return delay_;
        }
        /**
         * <code>optional float delay = 1 [default = 0.5];</code>
         */
        public Builder setDelay(float value) {
          bitField0_ |= 0x00000001;
          delay_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float delay = 1 [default = 0.5];</code>
         */
        public Builder clearDelay() {
          bitField0_ = (bitField0_ & ~0x00000001);
          delay_ = 0.5F;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute)
      }

      static {
        defaultInstance = new SpeechMute(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute)
    }

    public interface AddGestureOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .com.valve.dota2.Activity activity = 1;
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      boolean hasActivity();
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      com.valve.dota2.AiActivity.Activity getActivity();

      // optional int32 slot = 2;
      /**
       * <code>optional int32 slot = 2;</code>
       */
      boolean hasSlot();
      /**
       * <code>optional int32 slot = 2;</code>
       */
      int getSlot();

      // optional float fade_in = 3 [default = 0];
      /**
       * <code>optional float fade_in = 3 [default = 0];</code>
       */
      boolean hasFadeIn();
      /**
       * <code>optional float fade_in = 3 [default = 0];</code>
       */
      float getFadeIn();

      // optional float fade_out = 4 [default = 0.1];
      /**
       * <code>optional float fade_out = 4 [default = 0.1];</code>
       */
      boolean hasFadeOut();
      /**
       * <code>optional float fade_out = 4 [default = 0.1];</code>
       */
      float getFadeOut();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture}
     */
    public static final class AddGesture extends
        com.google.protobuf.GeneratedMessage
        implements AddGestureOrBuilder {
      // Use AddGesture.newBuilder() to construct.
      private AddGesture(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private AddGesture(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final AddGesture defaultInstance;
      public static AddGesture getDefaultInstance() {
        return defaultInstance;
      }

      public AddGesture getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private AddGesture(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                com.valve.dota2.AiActivity.Activity value = com.valve.dota2.AiActivity.Activity.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  activity_ = value;
                }
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                slot_ = input.readInt32();
                break;
              }
              case 29: {
                bitField0_ |= 0x00000004;
                fadeIn_ = input.readFloat();
                break;
              }
              case 37: {
                bitField0_ |= 0x00000008;
                fadeOut_ = input.readFloat();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.Builder.class);
      }

      public static com.google.protobuf.Parser<AddGesture> PARSER =
          new com.google.protobuf.AbstractParser<AddGesture>() {
        public AddGesture parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new AddGesture(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<AddGesture> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .com.valve.dota2.Activity activity = 1;
      public static final int ACTIVITY_FIELD_NUMBER = 1;
      private com.valve.dota2.AiActivity.Activity activity_;
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      public boolean hasActivity() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      public com.valve.dota2.AiActivity.Activity getActivity() {
        return activity_;
      }

      // optional int32 slot = 2;
      public static final int SLOT_FIELD_NUMBER = 2;
      private int slot_;
      /**
       * <code>optional int32 slot = 2;</code>
       */
      public boolean hasSlot() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 slot = 2;</code>
       */
      public int getSlot() {
        return slot_;
      }

      // optional float fade_in = 3 [default = 0];
      public static final int FADE_IN_FIELD_NUMBER = 3;
      private float fadeIn_;
      /**
       * <code>optional float fade_in = 3 [default = 0];</code>
       */
      public boolean hasFadeIn() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float fade_in = 3 [default = 0];</code>
       */
      public float getFadeIn() {
        return fadeIn_;
      }

      // optional float fade_out = 4 [default = 0.1];
      public static final int FADE_OUT_FIELD_NUMBER = 4;
      private float fadeOut_;
      /**
       * <code>optional float fade_out = 4 [default = 0.1];</code>
       */
      public boolean hasFadeOut() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float fade_out = 4 [default = 0.1];</code>
       */
      public float getFadeOut() {
        return fadeOut_;
      }

      private void initFields() {
        activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
        slot_ = 0;
        fadeIn_ = 0F;
        fadeOut_ = 0.1F;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, activity_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, slot_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeFloat(3, fadeIn_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeFloat(4, fadeOut_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, activity_.getNumber());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, slot_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, fadeIn_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, fadeOut_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGestureOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
          bitField0_ = (bitField0_ & ~0x00000001);
          slot_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          fadeIn_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000004);
          fadeOut_ = 0.1F;
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.activity_ = activity_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.slot_ = slot_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.fadeIn_ = fadeIn_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.fadeOut_ = fadeOut_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.getDefaultInstance()) return this;
          if (other.hasActivity()) {
            setActivity(other.getActivity());
          }
          if (other.hasSlot()) {
            setSlot(other.getSlot());
          }
          if (other.hasFadeIn()) {
            setFadeIn(other.getFadeIn());
          }
          if (other.hasFadeOut()) {
            setFadeOut(other.getFadeOut());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .com.valve.dota2.Activity activity = 1;
        private com.valve.dota2.AiActivity.Activity activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public boolean hasActivity() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public com.valve.dota2.AiActivity.Activity getActivity() {
          return activity_;
        }
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public Builder setActivity(com.valve.dota2.AiActivity.Activity value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          activity_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public Builder clearActivity() {
          bitField0_ = (bitField0_ & ~0x00000001);
          activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
          onChanged();
          return this;
        }

        // optional int32 slot = 2;
        private int slot_ ;
        /**
         * <code>optional int32 slot = 2;</code>
         */
        public boolean hasSlot() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 slot = 2;</code>
         */
        public int getSlot() {
          return slot_;
        }
        /**
         * <code>optional int32 slot = 2;</code>
         */
        public Builder setSlot(int value) {
          bitField0_ |= 0x00000002;
          slot_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 slot = 2;</code>
         */
        public Builder clearSlot() {
          bitField0_ = (bitField0_ & ~0x00000002);
          slot_ = 0;
          onChanged();
          return this;
        }

        // optional float fade_in = 3 [default = 0];
        private float fadeIn_ ;
        /**
         * <code>optional float fade_in = 3 [default = 0];</code>
         */
        public boolean hasFadeIn() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional float fade_in = 3 [default = 0];</code>
         */
        public float getFadeIn() {
          return fadeIn_;
        }
        /**
         * <code>optional float fade_in = 3 [default = 0];</code>
         */
        public Builder setFadeIn(float value) {
          bitField0_ |= 0x00000004;
          fadeIn_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float fade_in = 3 [default = 0];</code>
         */
        public Builder clearFadeIn() {
          bitField0_ = (bitField0_ & ~0x00000004);
          fadeIn_ = 0F;
          onChanged();
          return this;
        }

        // optional float fade_out = 4 [default = 0.1];
        private float fadeOut_ = 0.1F;
        /**
         * <code>optional float fade_out = 4 [default = 0.1];</code>
         */
        public boolean hasFadeOut() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional float fade_out = 4 [default = 0.1];</code>
         */
        public float getFadeOut() {
          return fadeOut_;
        }
        /**
         * <code>optional float fade_out = 4 [default = 0.1];</code>
         */
        public Builder setFadeOut(float value) {
          bitField0_ |= 0x00000008;
          fadeOut_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float fade_out = 4 [default = 0.1];</code>
         */
        public Builder clearFadeOut() {
          bitField0_ = (bitField0_ & ~0x00000008);
          fadeOut_ = 0.1F;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture)
      }

      static {
        defaultInstance = new AddGesture(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture)
    }

    public interface RemoveGestureOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .com.valve.dota2.Activity activity = 1;
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      boolean hasActivity();
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      com.valve.dota2.AiActivity.Activity getActivity();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture}
     */
    public static final class RemoveGesture extends
        com.google.protobuf.GeneratedMessage
        implements RemoveGestureOrBuilder {
      // Use RemoveGesture.newBuilder() to construct.
      private RemoveGesture(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private RemoveGesture(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final RemoveGesture defaultInstance;
      public static RemoveGesture getDefaultInstance() {
        return defaultInstance;
      }

      public RemoveGesture getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private RemoveGesture(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                com.valve.dota2.AiActivity.Activity value = com.valve.dota2.AiActivity.Activity.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  activity_ = value;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.Builder.class);
      }

      public static com.google.protobuf.Parser<RemoveGesture> PARSER =
          new com.google.protobuf.AbstractParser<RemoveGesture>() {
        public RemoveGesture parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RemoveGesture(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<RemoveGesture> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .com.valve.dota2.Activity activity = 1;
      public static final int ACTIVITY_FIELD_NUMBER = 1;
      private com.valve.dota2.AiActivity.Activity activity_;
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      public boolean hasActivity() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      public com.valve.dota2.AiActivity.Activity getActivity() {
        return activity_;
      }

      private void initFields() {
        activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, activity_.getNumber());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, activity_.getNumber());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGestureOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.activity_ = activity_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.getDefaultInstance()) return this;
          if (other.hasActivity()) {
            setActivity(other.getActivity());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .com.valve.dota2.Activity activity = 1;
        private com.valve.dota2.AiActivity.Activity activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public boolean hasActivity() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public com.valve.dota2.AiActivity.Activity getActivity() {
          return activity_;
        }
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public Builder setActivity(com.valve.dota2.AiActivity.Activity value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          activity_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public Builder clearActivity() {
          bitField0_ = (bitField0_ & ~0x00000001);
          activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture)
      }

      static {
        defaultInstance = new RemoveGesture(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture)
    }

    public interface BloodImpactOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 scale = 1;
      /**
       * <code>optional int32 scale = 1;</code>
       */
      boolean hasScale();
      /**
       * <code>optional int32 scale = 1;</code>
       */
      int getScale();

      // optional int32 x_normal = 2;
      /**
       * <code>optional int32 x_normal = 2;</code>
       */
      boolean hasXNormal();
      /**
       * <code>optional int32 x_normal = 2;</code>
       */
      int getXNormal();

      // optional int32 y_normal = 3;
      /**
       * <code>optional int32 y_normal = 3;</code>
       */
      boolean hasYNormal();
      /**
       * <code>optional int32 y_normal = 3;</code>
       */
      int getYNormal();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact}
     */
    public static final class BloodImpact extends
        com.google.protobuf.GeneratedMessage
        implements BloodImpactOrBuilder {
      // Use BloodImpact.newBuilder() to construct.
      private BloodImpact(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private BloodImpact(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final BloodImpact defaultInstance;
      public static BloodImpact getDefaultInstance() {
        return defaultInstance;
      }

      public BloodImpact getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private BloodImpact(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                scale_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                xNormal_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                yNormal_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.Builder.class);
      }

      public static com.google.protobuf.Parser<BloodImpact> PARSER =
          new com.google.protobuf.AbstractParser<BloodImpact>() {
        public BloodImpact parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new BloodImpact(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<BloodImpact> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 scale = 1;
      public static final int SCALE_FIELD_NUMBER = 1;
      private int scale_;
      /**
       * <code>optional int32 scale = 1;</code>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 scale = 1;</code>
       */
      public int getScale() {
        return scale_;
      }

      // optional int32 x_normal = 2;
      public static final int X_NORMAL_FIELD_NUMBER = 2;
      private int xNormal_;
      /**
       * <code>optional int32 x_normal = 2;</code>
       */
      public boolean hasXNormal() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 x_normal = 2;</code>
       */
      public int getXNormal() {
        return xNormal_;
      }

      // optional int32 y_normal = 3;
      public static final int Y_NORMAL_FIELD_NUMBER = 3;
      private int yNormal_;
      /**
       * <code>optional int32 y_normal = 3;</code>
       */
      public boolean hasYNormal() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 y_normal = 3;</code>
       */
      public int getYNormal() {
        return yNormal_;
      }

      private void initFields() {
        scale_ = 0;
        xNormal_ = 0;
        yNormal_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, scale_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, xNormal_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, yNormal_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, scale_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, xNormal_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, yNormal_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpactOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          scale_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          xNormal_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          yNormal_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.scale_ = scale_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.xNormal_ = xNormal_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.yNormal_ = yNormal_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.getDefaultInstance()) return this;
          if (other.hasScale()) {
            setScale(other.getScale());
          }
          if (other.hasXNormal()) {
            setXNormal(other.getXNormal());
          }
          if (other.hasYNormal()) {
            setYNormal(other.getYNormal());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 scale = 1;
        private int scale_ ;
        /**
         * <code>optional int32 scale = 1;</code>
         */
        public boolean hasScale() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 scale = 1;</code>
         */
        public int getScale() {
          return scale_;
        }
        /**
         * <code>optional int32 scale = 1;</code>
         */
        public Builder setScale(int value) {
          bitField0_ |= 0x00000001;
          scale_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 scale = 1;</code>
         */
        public Builder clearScale() {
          bitField0_ = (bitField0_ & ~0x00000001);
          scale_ = 0;
          onChanged();
          return this;
        }

        // optional int32 x_normal = 2;
        private int xNormal_ ;
        /**
         * <code>optional int32 x_normal = 2;</code>
         */
        public boolean hasXNormal() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 x_normal = 2;</code>
         */
        public int getXNormal() {
          return xNormal_;
        }
        /**
         * <code>optional int32 x_normal = 2;</code>
         */
        public Builder setXNormal(int value) {
          bitField0_ |= 0x00000002;
          xNormal_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 x_normal = 2;</code>
         */
        public Builder clearXNormal() {
          bitField0_ = (bitField0_ & ~0x00000002);
          xNormal_ = 0;
          onChanged();
          return this;
        }

        // optional int32 y_normal = 3;
        private int yNormal_ ;
        /**
         * <code>optional int32 y_normal = 3;</code>
         */
        public boolean hasYNormal() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional int32 y_normal = 3;</code>
         */
        public int getYNormal() {
          return yNormal_;
        }
        /**
         * <code>optional int32 y_normal = 3;</code>
         */
        public Builder setYNormal(int value) {
          bitField0_ |= 0x00000004;
          yNormal_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 y_normal = 3;</code>
         */
        public Builder clearYNormal() {
          bitField0_ = (bitField0_ & ~0x00000004);
          yNormal_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact)
      }

      static {
        defaultInstance = new BloodImpact(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact)
    }

    public interface FadeGestureOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional .com.valve.dota2.Activity activity = 1;
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      boolean hasActivity();
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      com.valve.dota2.AiActivity.Activity getActivity();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture}
     */
    public static final class FadeGesture extends
        com.google.protobuf.GeneratedMessage
        implements FadeGestureOrBuilder {
      // Use FadeGesture.newBuilder() to construct.
      private FadeGesture(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private FadeGesture(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final FadeGesture defaultInstance;
      public static FadeGesture getDefaultInstance() {
        return defaultInstance;
      }

      public FadeGesture getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private FadeGesture(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                com.valve.dota2.AiActivity.Activity value = com.valve.dota2.AiActivity.Activity.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  activity_ = value;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.Builder.class);
      }

      public static com.google.protobuf.Parser<FadeGesture> PARSER =
          new com.google.protobuf.AbstractParser<FadeGesture>() {
        public FadeGesture parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new FadeGesture(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<FadeGesture> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional .com.valve.dota2.Activity activity = 1;
      public static final int ACTIVITY_FIELD_NUMBER = 1;
      private com.valve.dota2.AiActivity.Activity activity_;
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      public boolean hasActivity() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .com.valve.dota2.Activity activity = 1;</code>
       */
      public com.valve.dota2.AiActivity.Activity getActivity() {
        return activity_;
      }

      private void initFields() {
        activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeEnum(1, activity_.getNumber());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, activity_.getNumber());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGestureOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.activity_ = activity_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.getDefaultInstance()) return this;
          if (other.hasActivity()) {
            setActivity(other.getActivity());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional .com.valve.dota2.Activity activity = 1;
        private com.valve.dota2.AiActivity.Activity activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public boolean hasActivity() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public com.valve.dota2.AiActivity.Activity getActivity() {
          return activity_;
        }
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public Builder setActivity(com.valve.dota2.AiActivity.Activity value) {
          if (value == null) {
            throw new NullPointerException();
          }
          bitField0_ |= 0x00000001;
          activity_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.Activity activity = 1;</code>
         */
        public Builder clearActivity() {
          bitField0_ = (bitField0_ & ~0x00000001);
          activity_ = com.valve.dota2.AiActivity.Activity.ACT_INVALID;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture)
      }

      static {
        defaultInstance = new FadeGesture(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture)
    }

    private int bitField0_;
    // required .com.valve.dota2.EDotaEntityMessages msg_type = 1;
    public static final int MSG_TYPE_FIELD_NUMBER = 1;
    private com.valve.dota2.DotaUsermessages.EDotaEntityMessages msgType_;
    /**
     * <code>required .com.valve.dota2.EDotaEntityMessages msg_type = 1;</code>
     */
    public boolean hasMsgType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.valve.dota2.EDotaEntityMessages msg_type = 1;</code>
     */
    public com.valve.dota2.DotaUsermessages.EDotaEntityMessages getMsgType() {
      return msgType_;
    }

    // required int32 entity_index = 2;
    public static final int ENTITY_INDEX_FIELD_NUMBER = 2;
    private int entityIndex_;
    /**
     * <code>required int32 entity_index = 2;</code>
     */
    public boolean hasEntityIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 entity_index = 2;</code>
     */
    public int getEntityIndex() {
      return entityIndex_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;
    public static final int SPEECH_FIELD_NUMBER = 3;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech speech_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
     */
    public boolean hasSpeech() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech getSpeech() {
      return speech_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechOrBuilder getSpeechOrBuilder() {
      return speech_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
    public static final int SPEECH_MUTE_FIELD_NUMBER = 4;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute speechMute_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
     */
    public boolean hasSpeechMute() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute getSpeechMute() {
      return speechMute_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMuteOrBuilder getSpeechMuteOrBuilder() {
      return speechMute_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
    public static final int ADD_GESTURE_FIELD_NUMBER = 5;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture addGesture_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
     */
    public boolean hasAddGesture() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture getAddGesture() {
      return addGesture_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGestureOrBuilder getAddGestureOrBuilder() {
      return addGesture_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
    public static final int REMOVE_GESTURE_FIELD_NUMBER = 6;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture removeGesture_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
     */
    public boolean hasRemoveGesture() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture getRemoveGesture() {
      return removeGesture_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGestureOrBuilder getRemoveGestureOrBuilder() {
      return removeGesture_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
    public static final int BLOOD_IMPACT_FIELD_NUMBER = 7;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact bloodImpact_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
     */
    public boolean hasBloodImpact() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact getBloodImpact() {
      return bloodImpact_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpactOrBuilder getBloodImpactOrBuilder() {
      return bloodImpact_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
    public static final int FADE_GESTURE_FIELD_NUMBER = 8;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture fadeGesture_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
     */
    public boolean hasFadeGesture() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture getFadeGesture() {
      return fadeGesture_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGestureOrBuilder getFadeGestureOrBuilder() {
      return fadeGesture_;
    }

    private void initFields() {
      msgType_ = com.valve.dota2.DotaUsermessages.EDotaEntityMessages.DOTA_UNIT_SPEECH;
      entityIndex_ = 0;
      speech_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.getDefaultInstance();
      speechMute_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.getDefaultInstance();
      addGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.getDefaultInstance();
      removeGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.getDefaultInstance();
      bloodImpact_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.getDefaultInstance();
      fadeGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasMsgType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEntityIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, msgType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, entityIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, speech_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, speechMute_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, addGesture_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, removeGesture_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, bloodImpact_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, fadeGesture_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, msgType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, entityIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, speech_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, speechMute_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, addGesture_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, removeGesture_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, bloodImpact_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, fadeGesture_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_UnitEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSpeechFieldBuilder();
          getSpeechMuteFieldBuilder();
          getAddGestureFieldBuilder();
          getRemoveGestureFieldBuilder();
          getBloodImpactFieldBuilder();
          getFadeGestureFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        msgType_ = com.valve.dota2.DotaUsermessages.EDotaEntityMessages.DOTA_UNIT_SPEECH;
        bitField0_ = (bitField0_ & ~0x00000001);
        entityIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (speechBuilder_ == null) {
          speech_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.getDefaultInstance();
        } else {
          speechBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (speechMuteBuilder_ == null) {
          speechMute_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.getDefaultInstance();
        } else {
          speechMuteBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (addGestureBuilder_ == null) {
          addGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.getDefaultInstance();
        } else {
          addGestureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (removeGestureBuilder_ == null) {
          removeGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.getDefaultInstance();
        } else {
          removeGestureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (bloodImpactBuilder_ == null) {
          bloodImpact_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.getDefaultInstance();
        } else {
          bloodImpactBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (fadeGestureBuilder_ == null) {
          fadeGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.getDefaultInstance();
        } else {
          fadeGestureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.msgType_ = msgType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.entityIndex_ = entityIndex_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (speechBuilder_ == null) {
          result.speech_ = speech_;
        } else {
          result.speech_ = speechBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (speechMuteBuilder_ == null) {
          result.speechMute_ = speechMute_;
        } else {
          result.speechMute_ = speechMuteBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (addGestureBuilder_ == null) {
          result.addGesture_ = addGesture_;
        } else {
          result.addGesture_ = addGestureBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (removeGestureBuilder_ == null) {
          result.removeGesture_ = removeGesture_;
        } else {
          result.removeGesture_ = removeGestureBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (bloodImpactBuilder_ == null) {
          result.bloodImpact_ = bloodImpact_;
        } else {
          result.bloodImpact_ = bloodImpactBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (fadeGestureBuilder_ == null) {
          result.fadeGesture_ = fadeGesture_;
        } else {
          result.fadeGesture_ = fadeGestureBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.getDefaultInstance()) return this;
        if (other.hasMsgType()) {
          setMsgType(other.getMsgType());
        }
        if (other.hasEntityIndex()) {
          setEntityIndex(other.getEntityIndex());
        }
        if (other.hasSpeech()) {
          mergeSpeech(other.getSpeech());
        }
        if (other.hasSpeechMute()) {
          mergeSpeechMute(other.getSpeechMute());
        }
        if (other.hasAddGesture()) {
          mergeAddGesture(other.getAddGesture());
        }
        if (other.hasRemoveGesture()) {
          mergeRemoveGesture(other.getRemoveGesture());
        }
        if (other.hasBloodImpact()) {
          mergeBloodImpact(other.getBloodImpact());
        }
        if (other.hasFadeGesture()) {
          mergeFadeGesture(other.getFadeGesture());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMsgType()) {
          
          return false;
        }
        if (!hasEntityIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .com.valve.dota2.EDotaEntityMessages msg_type = 1;
      private com.valve.dota2.DotaUsermessages.EDotaEntityMessages msgType_ = com.valve.dota2.DotaUsermessages.EDotaEntityMessages.DOTA_UNIT_SPEECH;
      /**
       * <code>required .com.valve.dota2.EDotaEntityMessages msg_type = 1;</code>
       */
      public boolean hasMsgType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.valve.dota2.EDotaEntityMessages msg_type = 1;</code>
       */
      public com.valve.dota2.DotaUsermessages.EDotaEntityMessages getMsgType() {
        return msgType_;
      }
      /**
       * <code>required .com.valve.dota2.EDotaEntityMessages msg_type = 1;</code>
       */
      public Builder setMsgType(com.valve.dota2.DotaUsermessages.EDotaEntityMessages value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        msgType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.valve.dota2.EDotaEntityMessages msg_type = 1;</code>
       */
      public Builder clearMsgType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        msgType_ = com.valve.dota2.DotaUsermessages.EDotaEntityMessages.DOTA_UNIT_SPEECH;
        onChanged();
        return this;
      }

      // required int32 entity_index = 2;
      private int entityIndex_ ;
      /**
       * <code>required int32 entity_index = 2;</code>
       */
      public boolean hasEntityIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 entity_index = 2;</code>
       */
      public int getEntityIndex() {
        return entityIndex_;
      }
      /**
       * <code>required int32 entity_index = 2;</code>
       */
      public Builder setEntityIndex(int value) {
        bitField0_ |= 0x00000002;
        entityIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 entity_index = 2;</code>
       */
      public Builder clearEntityIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        entityIndex_ = 0;
        onChanged();
        return this;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech speech_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechOrBuilder> speechBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
       */
      public boolean hasSpeech() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech getSpeech() {
        if (speechBuilder_ == null) {
          return speech_;
        } else {
          return speechBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
       */
      public Builder setSpeech(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech value) {
        if (speechBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          speech_ = value;
          onChanged();
        } else {
          speechBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
       */
      public Builder setSpeech(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.Builder builderForValue) {
        if (speechBuilder_ == null) {
          speech_ = builderForValue.build();
          onChanged();
        } else {
          speechBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
       */
      public Builder mergeSpeech(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech value) {
        if (speechBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              speech_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.getDefaultInstance()) {
            speech_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.newBuilder(speech_).mergeFrom(value).buildPartial();
          } else {
            speech_ = value;
          }
          onChanged();
        } else {
          speechBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
       */
      public Builder clearSpeech() {
        if (speechBuilder_ == null) {
          speech_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.getDefaultInstance();
          onChanged();
        } else {
          speechBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.Builder getSpeechBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSpeechFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechOrBuilder getSpeechOrBuilder() {
        if (speechBuilder_ != null) {
          return speechBuilder_.getMessageOrBuilder();
        } else {
          return speech_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.Speech speech = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechOrBuilder> 
          getSpeechFieldBuilder() {
        if (speechBuilder_ == null) {
          speechBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.Speech.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechOrBuilder>(
                  speech_,
                  getParentForChildren(),
                  isClean());
          speech_ = null;
        }
        return speechBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute speechMute_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMuteOrBuilder> speechMuteBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
       */
      public boolean hasSpeechMute() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute getSpeechMute() {
        if (speechMuteBuilder_ == null) {
          return speechMute_;
        } else {
          return speechMuteBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
       */
      public Builder setSpeechMute(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute value) {
        if (speechMuteBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          speechMute_ = value;
          onChanged();
        } else {
          speechMuteBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
       */
      public Builder setSpeechMute(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.Builder builderForValue) {
        if (speechMuteBuilder_ == null) {
          speechMute_ = builderForValue.build();
          onChanged();
        } else {
          speechMuteBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
       */
      public Builder mergeSpeechMute(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute value) {
        if (speechMuteBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              speechMute_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.getDefaultInstance()) {
            speechMute_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.newBuilder(speechMute_).mergeFrom(value).buildPartial();
          } else {
            speechMute_ = value;
          }
          onChanged();
        } else {
          speechMuteBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
       */
      public Builder clearSpeechMute() {
        if (speechMuteBuilder_ == null) {
          speechMute_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.getDefaultInstance();
          onChanged();
        } else {
          speechMuteBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.Builder getSpeechMuteBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getSpeechMuteFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMuteOrBuilder getSpeechMuteOrBuilder() {
        if (speechMuteBuilder_ != null) {
          return speechMuteBuilder_.getMessageOrBuilder();
        } else {
          return speechMute_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMuteOrBuilder> 
          getSpeechMuteFieldBuilder() {
        if (speechMuteBuilder_ == null) {
          speechMuteBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMute.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.SpeechMuteOrBuilder>(
                  speechMute_,
                  getParentForChildren(),
                  isClean());
          speechMute_ = null;
        }
        return speechMuteBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture addGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGestureOrBuilder> addGestureBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
       */
      public boolean hasAddGesture() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture getAddGesture() {
        if (addGestureBuilder_ == null) {
          return addGesture_;
        } else {
          return addGestureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
       */
      public Builder setAddGesture(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture value) {
        if (addGestureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          addGesture_ = value;
          onChanged();
        } else {
          addGestureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
       */
      public Builder setAddGesture(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.Builder builderForValue) {
        if (addGestureBuilder_ == null) {
          addGesture_ = builderForValue.build();
          onChanged();
        } else {
          addGestureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
       */
      public Builder mergeAddGesture(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture value) {
        if (addGestureBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              addGesture_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.getDefaultInstance()) {
            addGesture_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.newBuilder(addGesture_).mergeFrom(value).buildPartial();
          } else {
            addGesture_ = value;
          }
          onChanged();
        } else {
          addGestureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
       */
      public Builder clearAddGesture() {
        if (addGestureBuilder_ == null) {
          addGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.getDefaultInstance();
          onChanged();
        } else {
          addGestureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.Builder getAddGestureBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getAddGestureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGestureOrBuilder getAddGestureOrBuilder() {
        if (addGestureBuilder_ != null) {
          return addGestureBuilder_.getMessageOrBuilder();
        } else {
          return addGesture_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGestureOrBuilder> 
          getAddGestureFieldBuilder() {
        if (addGestureBuilder_ == null) {
          addGestureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGesture.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.AddGestureOrBuilder>(
                  addGesture_,
                  getParentForChildren(),
                  isClean());
          addGesture_ = null;
        }
        return addGestureBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture removeGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGestureOrBuilder> removeGestureBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
       */
      public boolean hasRemoveGesture() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture getRemoveGesture() {
        if (removeGestureBuilder_ == null) {
          return removeGesture_;
        } else {
          return removeGestureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
       */
      public Builder setRemoveGesture(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture value) {
        if (removeGestureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          removeGesture_ = value;
          onChanged();
        } else {
          removeGestureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
       */
      public Builder setRemoveGesture(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.Builder builderForValue) {
        if (removeGestureBuilder_ == null) {
          removeGesture_ = builderForValue.build();
          onChanged();
        } else {
          removeGestureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
       */
      public Builder mergeRemoveGesture(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture value) {
        if (removeGestureBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              removeGesture_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.getDefaultInstance()) {
            removeGesture_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.newBuilder(removeGesture_).mergeFrom(value).buildPartial();
          } else {
            removeGesture_ = value;
          }
          onChanged();
        } else {
          removeGestureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
       */
      public Builder clearRemoveGesture() {
        if (removeGestureBuilder_ == null) {
          removeGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.getDefaultInstance();
          onChanged();
        } else {
          removeGestureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.Builder getRemoveGestureBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getRemoveGestureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGestureOrBuilder getRemoveGestureOrBuilder() {
        if (removeGestureBuilder_ != null) {
          return removeGestureBuilder_.getMessageOrBuilder();
        } else {
          return removeGesture_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGestureOrBuilder> 
          getRemoveGestureFieldBuilder() {
        if (removeGestureBuilder_ == null) {
          removeGestureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGesture.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.RemoveGestureOrBuilder>(
                  removeGesture_,
                  getParentForChildren(),
                  isClean());
          removeGesture_ = null;
        }
        return removeGestureBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact bloodImpact_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpactOrBuilder> bloodImpactBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
       */
      public boolean hasBloodImpact() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact getBloodImpact() {
        if (bloodImpactBuilder_ == null) {
          return bloodImpact_;
        } else {
          return bloodImpactBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
       */
      public Builder setBloodImpact(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact value) {
        if (bloodImpactBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bloodImpact_ = value;
          onChanged();
        } else {
          bloodImpactBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
       */
      public Builder setBloodImpact(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.Builder builderForValue) {
        if (bloodImpactBuilder_ == null) {
          bloodImpact_ = builderForValue.build();
          onChanged();
        } else {
          bloodImpactBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
       */
      public Builder mergeBloodImpact(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact value) {
        if (bloodImpactBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              bloodImpact_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.getDefaultInstance()) {
            bloodImpact_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.newBuilder(bloodImpact_).mergeFrom(value).buildPartial();
          } else {
            bloodImpact_ = value;
          }
          onChanged();
        } else {
          bloodImpactBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
       */
      public Builder clearBloodImpact() {
        if (bloodImpactBuilder_ == null) {
          bloodImpact_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.getDefaultInstance();
          onChanged();
        } else {
          bloodImpactBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.Builder getBloodImpactBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getBloodImpactFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpactOrBuilder getBloodImpactOrBuilder() {
        if (bloodImpactBuilder_ != null) {
          return bloodImpactBuilder_.getMessageOrBuilder();
        } else {
          return bloodImpact_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpactOrBuilder> 
          getBloodImpactFieldBuilder() {
        if (bloodImpactBuilder_ == null) {
          bloodImpactBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpact.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.BloodImpactOrBuilder>(
                  bloodImpact_,
                  getParentForChildren(),
                  isClean());
          bloodImpact_ = null;
        }
        return bloodImpactBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture fadeGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGestureOrBuilder> fadeGestureBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
       */
      public boolean hasFadeGesture() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture getFadeGesture() {
        if (fadeGestureBuilder_ == null) {
          return fadeGesture_;
        } else {
          return fadeGestureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
       */
      public Builder setFadeGesture(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture value) {
        if (fadeGestureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fadeGesture_ = value;
          onChanged();
        } else {
          fadeGestureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
       */
      public Builder setFadeGesture(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.Builder builderForValue) {
        if (fadeGestureBuilder_ == null) {
          fadeGesture_ = builderForValue.build();
          onChanged();
        } else {
          fadeGestureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
       */
      public Builder mergeFadeGesture(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture value) {
        if (fadeGestureBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              fadeGesture_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.getDefaultInstance()) {
            fadeGesture_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.newBuilder(fadeGesture_).mergeFrom(value).buildPartial();
          } else {
            fadeGesture_ = value;
          }
          onChanged();
        } else {
          fadeGestureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
       */
      public Builder clearFadeGesture() {
        if (fadeGestureBuilder_ == null) {
          fadeGesture_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.getDefaultInstance();
          onChanged();
        } else {
          fadeGestureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.Builder getFadeGestureBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getFadeGestureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGestureOrBuilder getFadeGestureOrBuilder() {
        if (fadeGestureBuilder_ != null) {
          return fadeGestureBuilder_.getMessageOrBuilder();
        } else {
          return fadeGesture_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGestureOrBuilder> 
          getFadeGestureFieldBuilder() {
        if (fadeGestureBuilder_ == null) {
          fadeGestureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGesture.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_UnitEvent.FadeGestureOrBuilder>(
                  fadeGesture_,
                  getParentForChildren(),
                  isClean());
          fadeGesture_ = null;
        }
        return fadeGestureBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent)
    }

    static {
      defaultInstance = new CDOTAUserMsg_UnitEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_UnitEvent)
  }

  public interface CDOTAUserMsg_ItemPurchasedOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 item_index = 1;
    /**
     * <code>optional int32 item_index = 1;</code>
     */
    boolean hasItemIndex();
    /**
     * <code>optional int32 item_index = 1;</code>
     */
    int getItemIndex();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ItemPurchased}
   */
  public static final class CDOTAUserMsg_ItemPurchased extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_ItemPurchasedOrBuilder {
    // Use CDOTAUserMsg_ItemPurchased.newBuilder() to construct.
    private CDOTAUserMsg_ItemPurchased(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_ItemPurchased(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_ItemPurchased defaultInstance;
    public static CDOTAUserMsg_ItemPurchased getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_ItemPurchased getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_ItemPurchased(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              itemIndex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_ItemPurchased> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_ItemPurchased>() {
      public CDOTAUserMsg_ItemPurchased parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_ItemPurchased(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_ItemPurchased> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 item_index = 1;
    public static final int ITEM_INDEX_FIELD_NUMBER = 1;
    private int itemIndex_;
    /**
     * <code>optional int32 item_index = 1;</code>
     */
    public boolean hasItemIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 item_index = 1;</code>
     */
    public int getItemIndex() {
      return itemIndex_;
    }

    private void initFields() {
      itemIndex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, itemIndex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, itemIndex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ItemPurchased}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchasedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        itemIndex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.itemIndex_ = itemIndex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased.getDefaultInstance()) return this;
        if (other.hasItemIndex()) {
          setItemIndex(other.getItemIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemPurchased) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 item_index = 1;
      private int itemIndex_ ;
      /**
       * <code>optional int32 item_index = 1;</code>
       */
      public boolean hasItemIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 item_index = 1;</code>
       */
      public int getItemIndex() {
        return itemIndex_;
      }
      /**
       * <code>optional int32 item_index = 1;</code>
       */
      public Builder setItemIndex(int value) {
        bitField0_ |= 0x00000001;
        itemIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 item_index = 1;</code>
       */
      public Builder clearItemIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        itemIndex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ItemPurchased)
    }

    static {
      defaultInstance = new CDOTAUserMsg_ItemPurchased(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ItemPurchased)
  }

  public interface CDOTAUserMsg_ItemFoundOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 player = 1;
    /**
     * <code>optional int32 player = 1;</code>
     */
    boolean hasPlayer();
    /**
     * <code>optional int32 player = 1;</code>
     */
    int getPlayer();

    // optional int32 quality = 2;
    /**
     * <code>optional int32 quality = 2;</code>
     */
    boolean hasQuality();
    /**
     * <code>optional int32 quality = 2;</code>
     */
    int getQuality();

    // optional int32 rarity = 3;
    /**
     * <code>optional int32 rarity = 3;</code>
     */
    boolean hasRarity();
    /**
     * <code>optional int32 rarity = 3;</code>
     */
    int getRarity();

    // optional int32 method = 4;
    /**
     * <code>optional int32 method = 4;</code>
     */
    boolean hasMethod();
    /**
     * <code>optional int32 method = 4;</code>
     */
    int getMethod();

    // optional int32 itemdef = 5;
    /**
     * <code>optional int32 itemdef = 5;</code>
     */
    boolean hasItemdef();
    /**
     * <code>optional int32 itemdef = 5;</code>
     */
    int getItemdef();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ItemFound}
   */
  public static final class CDOTAUserMsg_ItemFound extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_ItemFoundOrBuilder {
    // Use CDOTAUserMsg_ItemFound.newBuilder() to construct.
    private CDOTAUserMsg_ItemFound(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_ItemFound(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_ItemFound defaultInstance;
    public static CDOTAUserMsg_ItemFound getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_ItemFound getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_ItemFound(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              player_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              quality_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              rarity_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              method_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              itemdef_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_ItemFound> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_ItemFound>() {
      public CDOTAUserMsg_ItemFound parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_ItemFound(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_ItemFound> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 player = 1;
    public static final int PLAYER_FIELD_NUMBER = 1;
    private int player_;
    /**
     * <code>optional int32 player = 1;</code>
     */
    public boolean hasPlayer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 player = 1;</code>
     */
    public int getPlayer() {
      return player_;
    }

    // optional int32 quality = 2;
    public static final int QUALITY_FIELD_NUMBER = 2;
    private int quality_;
    /**
     * <code>optional int32 quality = 2;</code>
     */
    public boolean hasQuality() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 quality = 2;</code>
     */
    public int getQuality() {
      return quality_;
    }

    // optional int32 rarity = 3;
    public static final int RARITY_FIELD_NUMBER = 3;
    private int rarity_;
    /**
     * <code>optional int32 rarity = 3;</code>
     */
    public boolean hasRarity() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 rarity = 3;</code>
     */
    public int getRarity() {
      return rarity_;
    }

    // optional int32 method = 4;
    public static final int METHOD_FIELD_NUMBER = 4;
    private int method_;
    /**
     * <code>optional int32 method = 4;</code>
     */
    public boolean hasMethod() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 method = 4;</code>
     */
    public int getMethod() {
      return method_;
    }

    // optional int32 itemdef = 5;
    public static final int ITEMDEF_FIELD_NUMBER = 5;
    private int itemdef_;
    /**
     * <code>optional int32 itemdef = 5;</code>
     */
    public boolean hasItemdef() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 itemdef = 5;</code>
     */
    public int getItemdef() {
      return itemdef_;
    }

    private void initFields() {
      player_ = 0;
      quality_ = 0;
      rarity_ = 0;
      method_ = 0;
      itemdef_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, player_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, quality_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, rarity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, method_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, itemdef_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, player_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, quality_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, rarity_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, method_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, itemdef_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ItemFound}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFoundOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        player_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        quality_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        rarity_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        method_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        itemdef_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.player_ = player_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.quality_ = quality_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.rarity_ = rarity_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.method_ = method_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.itemdef_ = itemdef_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound.getDefaultInstance()) return this;
        if (other.hasPlayer()) {
          setPlayer(other.getPlayer());
        }
        if (other.hasQuality()) {
          setQuality(other.getQuality());
        }
        if (other.hasRarity()) {
          setRarity(other.getRarity());
        }
        if (other.hasMethod()) {
          setMethod(other.getMethod());
        }
        if (other.hasItemdef()) {
          setItemdef(other.getItemdef());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ItemFound) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 player = 1;
      private int player_ ;
      /**
       * <code>optional int32 player = 1;</code>
       */
      public boolean hasPlayer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 player = 1;</code>
       */
      public int getPlayer() {
        return player_;
      }
      /**
       * <code>optional int32 player = 1;</code>
       */
      public Builder setPlayer(int value) {
        bitField0_ |= 0x00000001;
        player_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 player = 1;</code>
       */
      public Builder clearPlayer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        player_ = 0;
        onChanged();
        return this;
      }

      // optional int32 quality = 2;
      private int quality_ ;
      /**
       * <code>optional int32 quality = 2;</code>
       */
      public boolean hasQuality() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 quality = 2;</code>
       */
      public int getQuality() {
        return quality_;
      }
      /**
       * <code>optional int32 quality = 2;</code>
       */
      public Builder setQuality(int value) {
        bitField0_ |= 0x00000002;
        quality_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 quality = 2;</code>
       */
      public Builder clearQuality() {
        bitField0_ = (bitField0_ & ~0x00000002);
        quality_ = 0;
        onChanged();
        return this;
      }

      // optional int32 rarity = 3;
      private int rarity_ ;
      /**
       * <code>optional int32 rarity = 3;</code>
       */
      public boolean hasRarity() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 rarity = 3;</code>
       */
      public int getRarity() {
        return rarity_;
      }
      /**
       * <code>optional int32 rarity = 3;</code>
       */
      public Builder setRarity(int value) {
        bitField0_ |= 0x00000004;
        rarity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rarity = 3;</code>
       */
      public Builder clearRarity() {
        bitField0_ = (bitField0_ & ~0x00000004);
        rarity_ = 0;
        onChanged();
        return this;
      }

      // optional int32 method = 4;
      private int method_ ;
      /**
       * <code>optional int32 method = 4;</code>
       */
      public boolean hasMethod() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 method = 4;</code>
       */
      public int getMethod() {
        return method_;
      }
      /**
       * <code>optional int32 method = 4;</code>
       */
      public Builder setMethod(int value) {
        bitField0_ |= 0x00000008;
        method_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 method = 4;</code>
       */
      public Builder clearMethod() {
        bitField0_ = (bitField0_ & ~0x00000008);
        method_ = 0;
        onChanged();
        return this;
      }

      // optional int32 itemdef = 5;
      private int itemdef_ ;
      /**
       * <code>optional int32 itemdef = 5;</code>
       */
      public boolean hasItemdef() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 itemdef = 5;</code>
       */
      public int getItemdef() {
        return itemdef_;
      }
      /**
       * <code>optional int32 itemdef = 5;</code>
       */
      public Builder setItemdef(int value) {
        bitField0_ |= 0x00000010;
        itemdef_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 itemdef = 5;</code>
       */
      public Builder clearItemdef() {
        bitField0_ = (bitField0_ & ~0x00000010);
        itemdef_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ItemFound)
    }

    static {
      defaultInstance = new CDOTAUserMsg_ItemFound(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ItemFound)
  }

  public interface CDOTAUserMsg_ParticleManagerOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;
    /**
     * <code>required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;</code>
     */
    com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE getType();

    // required uint32 index = 2;
    /**
     * <code>required uint32 index = 2;</code>
     */
    boolean hasIndex();
    /**
     * <code>required uint32 index = 2;</code>
     */
    int getIndex();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
     * </pre>
     */
    boolean hasReleaseParticleIndex();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex getReleaseParticleIndex();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndexOrBuilder getReleaseParticleIndexOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_CREATE
     * </pre>
     */
    boolean hasCreateParticle();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_CREATE
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle getCreateParticle();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_CREATE
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticleOrBuilder getCreateParticleOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
     * </pre>
     */
    boolean hasDestroyParticle();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle getDestroyParticle();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleOrBuilder getDestroyParticleOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
     * </pre>
     */
    boolean hasDestroyParticleInvolving();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving getDestroyParticleInvolving();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolvingOrBuilder getDestroyParticleInvolvingOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
     * </pre>
     */
    boolean hasUpdateParticle();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle getUpdateParticle();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrBuilder getUpdateParticleOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
     * </pre>
     */
    boolean hasUpdateParticleFwd();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd getUpdateParticleFwd();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwdOrBuilder getUpdateParticleFwdOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
     * </pre>
     */
    boolean hasUpdateParticleOrient();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient getUpdateParticleOrient();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrientOrBuilder getUpdateParticleOrientOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
     * </pre>
     */
    boolean hasUpdateParticleFallback();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback getUpdateParticleFallback();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallbackOrBuilder getUpdateParticleFallbackOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
     * </pre>
     */
    boolean hasUpdateParticleOffset();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset getUpdateParticleOffset();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffsetOrBuilder getUpdateParticleOffsetOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
     * </pre>
     */
    boolean hasUpdateParticleEnt();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt getUpdateParticleEnt();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEntOrBuilder getUpdateParticleEntOrBuilder();

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
     * </pre>
     */
    boolean hasUpdateParticleLatency();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency getUpdateParticleLatency();
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
     * </pre>
     */
    com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatencyOrBuilder getUpdateParticleLatencyOrBuilder();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager}
   */
  public static final class CDOTAUserMsg_ParticleManager extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_ParticleManagerOrBuilder {
    // Use CDOTAUserMsg_ParticleManager.newBuilder() to construct.
    private CDOTAUserMsg_ParticleManager(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_ParticleManager(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_ParticleManager defaultInstance;
    public static CDOTAUserMsg_ParticleManager getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_ParticleManager getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_ParticleManager(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE value = com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              index_ = input.readUInt32();
              break;
            }
            case 26: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = releaseParticleIndex_.toBuilder();
              }
              releaseParticleIndex_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(releaseParticleIndex_);
                releaseParticleIndex_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = createParticle_.toBuilder();
              }
              createParticle_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(createParticle_);
                createParticle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = destroyParticle_.toBuilder();
              }
              destroyParticle_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(destroyParticle_);
                destroyParticle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = destroyParticleInvolving_.toBuilder();
              }
              destroyParticleInvolving_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(destroyParticleInvolving_);
                destroyParticleInvolving_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = updateParticle_.toBuilder();
              }
              updateParticle_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(updateParticle_);
                updateParticle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = updateParticleFwd_.toBuilder();
              }
              updateParticleFwd_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(updateParticleFwd_);
                updateParticleFwd_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = updateParticleOrient_.toBuilder();
              }
              updateParticleOrient_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(updateParticleOrient_);
                updateParticleOrient_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = updateParticleFallback_.toBuilder();
              }
              updateParticleFallback_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(updateParticleFallback_);
                updateParticleFallback_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = updateParticleOffset_.toBuilder();
              }
              updateParticleOffset_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(updateParticleOffset_);
                updateParticleOffset_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = updateParticleEnt_.toBuilder();
              }
              updateParticleEnt_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(updateParticleEnt_);
                updateParticleEnt_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = updateParticleLatency_.toBuilder();
              }
              updateParticleLatency_ = input.readMessage(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(updateParticleLatency_);
                updateParticleLatency_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_ParticleManager> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_ParticleManager>() {
      public CDOTAUserMsg_ParticleManager parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_ParticleManager(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_ParticleManager> getParserForType() {
      return PARSER;
    }

    public interface ReleaseParticleIndexOrBuilder
        extends com.google.protobuf.MessageOrBuilder {
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex}
     */
    public static final class ReleaseParticleIndex extends
        com.google.protobuf.GeneratedMessage
        implements ReleaseParticleIndexOrBuilder {
      // Use ReleaseParticleIndex.newBuilder() to construct.
      private ReleaseParticleIndex(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private ReleaseParticleIndex(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final ReleaseParticleIndex defaultInstance;
      public static ReleaseParticleIndex getDefaultInstance() {
        return defaultInstance;
      }

      public ReleaseParticleIndex getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private ReleaseParticleIndex(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.Builder.class);
      }

      public static com.google.protobuf.Parser<ReleaseParticleIndex> PARSER =
          new com.google.protobuf.AbstractParser<ReleaseParticleIndex>() {
        public ReleaseParticleIndex parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ReleaseParticleIndex(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<ReleaseParticleIndex> getParserForType() {
        return PARSER;
      }

      private void initFields() {
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndexOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex(this);
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.getDefaultInstance()) return this;
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
      }

      static {
        defaultInstance = new ReleaseParticleIndex(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
    }

    public interface CreateParticleOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 particle_name_index = 1;
      /**
       * <code>optional int32 particle_name_index = 1;</code>
       */
      boolean hasParticleNameIndex();
      /**
       * <code>optional int32 particle_name_index = 1;</code>
       */
      int getParticleNameIndex();

      // optional int32 attach_type = 2;
      /**
       * <code>optional int32 attach_type = 2;</code>
       */
      boolean hasAttachType();
      /**
       * <code>optional int32 attach_type = 2;</code>
       */
      int getAttachType();

      // optional int32 entity_handle = 3;
      /**
       * <code>optional int32 entity_handle = 3;</code>
       */
      boolean hasEntityHandle();
      /**
       * <code>optional int32 entity_handle = 3;</code>
       */
      int getEntityHandle();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle}
     */
    public static final class CreateParticle extends
        com.google.protobuf.GeneratedMessage
        implements CreateParticleOrBuilder {
      // Use CreateParticle.newBuilder() to construct.
      private CreateParticle(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private CreateParticle(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final CreateParticle defaultInstance;
      public static CreateParticle getDefaultInstance() {
        return defaultInstance;
      }

      public CreateParticle getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private CreateParticle(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                particleNameIndex_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                attachType_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                entityHandle_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.Builder.class);
      }

      public static com.google.protobuf.Parser<CreateParticle> PARSER =
          new com.google.protobuf.AbstractParser<CreateParticle>() {
        public CreateParticle parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new CreateParticle(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<CreateParticle> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 particle_name_index = 1;
      public static final int PARTICLE_NAME_INDEX_FIELD_NUMBER = 1;
      private int particleNameIndex_;
      /**
       * <code>optional int32 particle_name_index = 1;</code>
       */
      public boolean hasParticleNameIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 particle_name_index = 1;</code>
       */
      public int getParticleNameIndex() {
        return particleNameIndex_;
      }

      // optional int32 attach_type = 2;
      public static final int ATTACH_TYPE_FIELD_NUMBER = 2;
      private int attachType_;
      /**
       * <code>optional int32 attach_type = 2;</code>
       */
      public boolean hasAttachType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 attach_type = 2;</code>
       */
      public int getAttachType() {
        return attachType_;
      }

      // optional int32 entity_handle = 3;
      public static final int ENTITY_HANDLE_FIELD_NUMBER = 3;
      private int entityHandle_;
      /**
       * <code>optional int32 entity_handle = 3;</code>
       */
      public boolean hasEntityHandle() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 entity_handle = 3;</code>
       */
      public int getEntityHandle() {
        return entityHandle_;
      }

      private void initFields() {
        particleNameIndex_ = 0;
        attachType_ = 0;
        entityHandle_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, particleNameIndex_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, attachType_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, entityHandle_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, particleNameIndex_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, attachType_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, entityHandle_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          particleNameIndex_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          attachType_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          entityHandle_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.particleNameIndex_ = particleNameIndex_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.attachType_ = attachType_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.entityHandle_ = entityHandle_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.getDefaultInstance()) return this;
          if (other.hasParticleNameIndex()) {
            setParticleNameIndex(other.getParticleNameIndex());
          }
          if (other.hasAttachType()) {
            setAttachType(other.getAttachType());
          }
          if (other.hasEntityHandle()) {
            setEntityHandle(other.getEntityHandle());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 particle_name_index = 1;
        private int particleNameIndex_ ;
        /**
         * <code>optional int32 particle_name_index = 1;</code>
         */
        public boolean hasParticleNameIndex() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 particle_name_index = 1;</code>
         */
        public int getParticleNameIndex() {
          return particleNameIndex_;
        }
        /**
         * <code>optional int32 particle_name_index = 1;</code>
         */
        public Builder setParticleNameIndex(int value) {
          bitField0_ |= 0x00000001;
          particleNameIndex_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 particle_name_index = 1;</code>
         */
        public Builder clearParticleNameIndex() {
          bitField0_ = (bitField0_ & ~0x00000001);
          particleNameIndex_ = 0;
          onChanged();
          return this;
        }

        // optional int32 attach_type = 2;
        private int attachType_ ;
        /**
         * <code>optional int32 attach_type = 2;</code>
         */
        public boolean hasAttachType() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 attach_type = 2;</code>
         */
        public int getAttachType() {
          return attachType_;
        }
        /**
         * <code>optional int32 attach_type = 2;</code>
         */
        public Builder setAttachType(int value) {
          bitField0_ |= 0x00000002;
          attachType_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 attach_type = 2;</code>
         */
        public Builder clearAttachType() {
          bitField0_ = (bitField0_ & ~0x00000002);
          attachType_ = 0;
          onChanged();
          return this;
        }

        // optional int32 entity_handle = 3;
        private int entityHandle_ ;
        /**
         * <code>optional int32 entity_handle = 3;</code>
         */
        public boolean hasEntityHandle() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional int32 entity_handle = 3;</code>
         */
        public int getEntityHandle() {
          return entityHandle_;
        }
        /**
         * <code>optional int32 entity_handle = 3;</code>
         */
        public Builder setEntityHandle(int value) {
          bitField0_ |= 0x00000004;
          entityHandle_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 entity_handle = 3;</code>
         */
        public Builder clearEntityHandle() {
          bitField0_ = (bitField0_ & ~0x00000004);
          entityHandle_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle)
      }

      static {
        defaultInstance = new CreateParticle(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle)
    }

    public interface DestroyParticleOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional bool destroy_immediately = 1;
      /**
       * <code>optional bool destroy_immediately = 1;</code>
       */
      boolean hasDestroyImmediately();
      /**
       * <code>optional bool destroy_immediately = 1;</code>
       */
      boolean getDestroyImmediately();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle}
     */
    public static final class DestroyParticle extends
        com.google.protobuf.GeneratedMessage
        implements DestroyParticleOrBuilder {
      // Use DestroyParticle.newBuilder() to construct.
      private DestroyParticle(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DestroyParticle(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DestroyParticle defaultInstance;
      public static DestroyParticle getDefaultInstance() {
        return defaultInstance;
      }

      public DestroyParticle getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DestroyParticle(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                destroyImmediately_ = input.readBool();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.Builder.class);
      }

      public static com.google.protobuf.Parser<DestroyParticle> PARSER =
          new com.google.protobuf.AbstractParser<DestroyParticle>() {
        public DestroyParticle parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DestroyParticle(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DestroyParticle> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional bool destroy_immediately = 1;
      public static final int DESTROY_IMMEDIATELY_FIELD_NUMBER = 1;
      private boolean destroyImmediately_;
      /**
       * <code>optional bool destroy_immediately = 1;</code>
       */
      public boolean hasDestroyImmediately() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool destroy_immediately = 1;</code>
       */
      public boolean getDestroyImmediately() {
        return destroyImmediately_;
      }

      private void initFields() {
        destroyImmediately_ = false;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBool(1, destroyImmediately_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(1, destroyImmediately_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          destroyImmediately_ = false;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.destroyImmediately_ = destroyImmediately_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.getDefaultInstance()) return this;
          if (other.hasDestroyImmediately()) {
            setDestroyImmediately(other.getDestroyImmediately());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional bool destroy_immediately = 1;
        private boolean destroyImmediately_ ;
        /**
         * <code>optional bool destroy_immediately = 1;</code>
         */
        public boolean hasDestroyImmediately() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional bool destroy_immediately = 1;</code>
         */
        public boolean getDestroyImmediately() {
          return destroyImmediately_;
        }
        /**
         * <code>optional bool destroy_immediately = 1;</code>
         */
        public Builder setDestroyImmediately(boolean value) {
          bitField0_ |= 0x00000001;
          destroyImmediately_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool destroy_immediately = 1;</code>
         */
        public Builder clearDestroyImmediately() {
          bitField0_ = (bitField0_ & ~0x00000001);
          destroyImmediately_ = false;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle)
      }

      static {
        defaultInstance = new DestroyParticle(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle)
    }

    public interface DestroyParticleInvolvingOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional bool destroy_immediately = 1;
      /**
       * <code>optional bool destroy_immediately = 1;</code>
       */
      boolean hasDestroyImmediately();
      /**
       * <code>optional bool destroy_immediately = 1;</code>
       */
      boolean getDestroyImmediately();

      // optional int32 entity_handle = 3;
      /**
       * <code>optional int32 entity_handle = 3;</code>
       */
      boolean hasEntityHandle();
      /**
       * <code>optional int32 entity_handle = 3;</code>
       */
      int getEntityHandle();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving}
     */
    public static final class DestroyParticleInvolving extends
        com.google.protobuf.GeneratedMessage
        implements DestroyParticleInvolvingOrBuilder {
      // Use DestroyParticleInvolving.newBuilder() to construct.
      private DestroyParticleInvolving(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DestroyParticleInvolving(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DestroyParticleInvolving defaultInstance;
      public static DestroyParticleInvolving getDefaultInstance() {
        return defaultInstance;
      }

      public DestroyParticleInvolving getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DestroyParticleInvolving(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                destroyImmediately_ = input.readBool();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000002;
                entityHandle_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.Builder.class);
      }

      public static com.google.protobuf.Parser<DestroyParticleInvolving> PARSER =
          new com.google.protobuf.AbstractParser<DestroyParticleInvolving>() {
        public DestroyParticleInvolving parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DestroyParticleInvolving(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DestroyParticleInvolving> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional bool destroy_immediately = 1;
      public static final int DESTROY_IMMEDIATELY_FIELD_NUMBER = 1;
      private boolean destroyImmediately_;
      /**
       * <code>optional bool destroy_immediately = 1;</code>
       */
      public boolean hasDestroyImmediately() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool destroy_immediately = 1;</code>
       */
      public boolean getDestroyImmediately() {
        return destroyImmediately_;
      }

      // optional int32 entity_handle = 3;
      public static final int ENTITY_HANDLE_FIELD_NUMBER = 3;
      private int entityHandle_;
      /**
       * <code>optional int32 entity_handle = 3;</code>
       */
      public boolean hasEntityHandle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 entity_handle = 3;</code>
       */
      public int getEntityHandle() {
        return entityHandle_;
      }

      private void initFields() {
        destroyImmediately_ = false;
        entityHandle_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBool(1, destroyImmediately_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(3, entityHandle_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(1, destroyImmediately_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, entityHandle_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolvingOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          destroyImmediately_ = false;
          bitField0_ = (bitField0_ & ~0x00000001);
          entityHandle_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.destroyImmediately_ = destroyImmediately_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.entityHandle_ = entityHandle_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.getDefaultInstance()) return this;
          if (other.hasDestroyImmediately()) {
            setDestroyImmediately(other.getDestroyImmediately());
          }
          if (other.hasEntityHandle()) {
            setEntityHandle(other.getEntityHandle());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional bool destroy_immediately = 1;
        private boolean destroyImmediately_ ;
        /**
         * <code>optional bool destroy_immediately = 1;</code>
         */
        public boolean hasDestroyImmediately() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional bool destroy_immediately = 1;</code>
         */
        public boolean getDestroyImmediately() {
          return destroyImmediately_;
        }
        /**
         * <code>optional bool destroy_immediately = 1;</code>
         */
        public Builder setDestroyImmediately(boolean value) {
          bitField0_ |= 0x00000001;
          destroyImmediately_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool destroy_immediately = 1;</code>
         */
        public Builder clearDestroyImmediately() {
          bitField0_ = (bitField0_ & ~0x00000001);
          destroyImmediately_ = false;
          onChanged();
          return this;
        }

        // optional int32 entity_handle = 3;
        private int entityHandle_ ;
        /**
         * <code>optional int32 entity_handle = 3;</code>
         */
        public boolean hasEntityHandle() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 entity_handle = 3;</code>
         */
        public int getEntityHandle() {
          return entityHandle_;
        }
        /**
         * <code>optional int32 entity_handle = 3;</code>
         */
        public Builder setEntityHandle(int value) {
          bitField0_ |= 0x00000002;
          entityHandle_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 entity_handle = 3;</code>
         */
        public Builder clearEntityHandle() {
          bitField0_ = (bitField0_ & ~0x00000002);
          entityHandle_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
      }

      static {
        defaultInstance = new DestroyParticleInvolving(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
    }

    public interface UpdateParticleOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 control_point = 1;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      boolean hasControlPoint();
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      int getControlPoint();

      // optional .com.valve.dota2.CMsgVector position = 2;
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      boolean hasPosition();
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVector getPosition();
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVectorOrBuilder getPositionOrBuilder();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle}
     */
    public static final class UpdateParticle extends
        com.google.protobuf.GeneratedMessage
        implements UpdateParticleOrBuilder {
      // Use UpdateParticle.newBuilder() to construct.
      private UpdateParticle(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdateParticle(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdateParticle defaultInstance;
      public static UpdateParticle getDefaultInstance() {
        return defaultInstance;
      }

      public UpdateParticle getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdateParticle(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                controlPoint_ = input.readInt32();
                break;
              }
              case 18: {
                com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = position_.toBuilder();
                }
                position_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(position_);
                  position_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdateParticle> PARSER =
          new com.google.protobuf.AbstractParser<UpdateParticle>() {
        public UpdateParticle parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdateParticle(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdateParticle> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 control_point = 1;
      public static final int CONTROL_POINT_FIELD_NUMBER = 1;
      private int controlPoint_;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public boolean hasControlPoint() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public int getControlPoint() {
        return controlPoint_;
      }

      // optional .com.valve.dota2.CMsgVector position = 2;
      public static final int POSITION_FIELD_NUMBER = 2;
      private com.valve.dota2.Netmessages.CMsgVector position_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getPosition() {
        return position_;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getPositionOrBuilder() {
        return position_;
      }

      private void initFields() {
        controlPoint_ = 0;
        position_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, position_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, position_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPositionFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          controlPoint_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (positionBuilder_ == null) {
            position_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          } else {
            positionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.controlPoint_ = controlPoint_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (positionBuilder_ == null) {
            result.position_ = position_;
          } else {
            result.position_ = positionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.getDefaultInstance()) return this;
          if (other.hasControlPoint()) {
            setControlPoint(other.getControlPoint());
          }
          if (other.hasPosition()) {
            mergePosition(other.getPosition());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 control_point = 1;
        private int controlPoint_ ;
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public boolean hasControlPoint() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public int getControlPoint() {
          return controlPoint_;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder setControlPoint(int value) {
          bitField0_ |= 0x00000001;
          controlPoint_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder clearControlPoint() {
          bitField0_ = (bitField0_ & ~0x00000001);
          controlPoint_ = 0;
          onChanged();
          return this;
        }

        // optional .com.valve.dota2.CMsgVector position = 2;
        private com.valve.dota2.Netmessages.CMsgVector position_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> positionBuilder_;
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public boolean hasPosition() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector getPosition() {
          if (positionBuilder_ == null) {
            return position_;
          } else {
            return positionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public Builder setPosition(com.valve.dota2.Netmessages.CMsgVector value) {
          if (positionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            position_ = value;
            onChanged();
          } else {
            positionBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public Builder setPosition(
            com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
          if (positionBuilder_ == null) {
            position_ = builderForValue.build();
            onChanged();
          } else {
            positionBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public Builder mergePosition(com.valve.dota2.Netmessages.CMsgVector value) {
          if (positionBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                position_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
              position_ =
                com.valve.dota2.Netmessages.CMsgVector.newBuilder(position_).mergeFrom(value).buildPartial();
            } else {
              position_ = value;
            }
            onChanged();
          } else {
            positionBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public Builder clearPosition() {
          if (positionBuilder_ == null) {
            position_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
            onChanged();
          } else {
            positionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector.Builder getPositionBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getPositionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getPositionOrBuilder() {
          if (positionBuilder_ != null) {
            return positionBuilder_.getMessageOrBuilder();
          } else {
            return position_;
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
            getPositionFieldBuilder() {
          if (positionBuilder_ == null) {
            positionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                    position_,
                    getParentForChildren(),
                    isClean());
            position_ = null;
          }
          return positionBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle)
      }

      static {
        defaultInstance = new UpdateParticle(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle)
    }

    public interface UpdateParticleFwdOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 control_point = 1;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      boolean hasControlPoint();
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      int getControlPoint();

      // optional .com.valve.dota2.CMsgVector forward = 2;
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      boolean hasForward();
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVector getForward();
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVectorOrBuilder getForwardOrBuilder();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd}
     */
    public static final class UpdateParticleFwd extends
        com.google.protobuf.GeneratedMessage
        implements UpdateParticleFwdOrBuilder {
      // Use UpdateParticleFwd.newBuilder() to construct.
      private UpdateParticleFwd(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdateParticleFwd(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdateParticleFwd defaultInstance;
      public static UpdateParticleFwd getDefaultInstance() {
        return defaultInstance;
      }

      public UpdateParticleFwd getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdateParticleFwd(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                controlPoint_ = input.readInt32();
                break;
              }
              case 18: {
                com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = forward_.toBuilder();
                }
                forward_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(forward_);
                  forward_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdateParticleFwd> PARSER =
          new com.google.protobuf.AbstractParser<UpdateParticleFwd>() {
        public UpdateParticleFwd parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdateParticleFwd(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdateParticleFwd> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 control_point = 1;
      public static final int CONTROL_POINT_FIELD_NUMBER = 1;
      private int controlPoint_;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public boolean hasControlPoint() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public int getControlPoint() {
        return controlPoint_;
      }

      // optional .com.valve.dota2.CMsgVector forward = 2;
      public static final int FORWARD_FIELD_NUMBER = 2;
      private com.valve.dota2.Netmessages.CMsgVector forward_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      public boolean hasForward() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getForward() {
        return forward_;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getForwardOrBuilder() {
        return forward_;
      }

      private void initFields() {
        controlPoint_ = 0;
        forward_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, forward_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, forward_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwdOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getForwardFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          controlPoint_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (forwardBuilder_ == null) {
            forward_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          } else {
            forwardBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.controlPoint_ = controlPoint_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (forwardBuilder_ == null) {
            result.forward_ = forward_;
          } else {
            result.forward_ = forwardBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.getDefaultInstance()) return this;
          if (other.hasControlPoint()) {
            setControlPoint(other.getControlPoint());
          }
          if (other.hasForward()) {
            mergeForward(other.getForward());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 control_point = 1;
        private int controlPoint_ ;
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public boolean hasControlPoint() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public int getControlPoint() {
          return controlPoint_;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder setControlPoint(int value) {
          bitField0_ |= 0x00000001;
          controlPoint_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder clearControlPoint() {
          bitField0_ = (bitField0_ & ~0x00000001);
          controlPoint_ = 0;
          onChanged();
          return this;
        }

        // optional .com.valve.dota2.CMsgVector forward = 2;
        private com.valve.dota2.Netmessages.CMsgVector forward_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> forwardBuilder_;
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public boolean hasForward() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector getForward() {
          if (forwardBuilder_ == null) {
            return forward_;
          } else {
            return forwardBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public Builder setForward(com.valve.dota2.Netmessages.CMsgVector value) {
          if (forwardBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            forward_ = value;
            onChanged();
          } else {
            forwardBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public Builder setForward(
            com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
          if (forwardBuilder_ == null) {
            forward_ = builderForValue.build();
            onChanged();
          } else {
            forwardBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public Builder mergeForward(com.valve.dota2.Netmessages.CMsgVector value) {
          if (forwardBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                forward_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
              forward_ =
                com.valve.dota2.Netmessages.CMsgVector.newBuilder(forward_).mergeFrom(value).buildPartial();
            } else {
              forward_ = value;
            }
            onChanged();
          } else {
            forwardBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public Builder clearForward() {
          if (forwardBuilder_ == null) {
            forward_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
            onChanged();
          } else {
            forwardBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector.Builder getForwardBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getForwardFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getForwardOrBuilder() {
          if (forwardBuilder_ != null) {
            return forwardBuilder_.getMessageOrBuilder();
          } else {
            return forward_;
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
            getForwardFieldBuilder() {
          if (forwardBuilder_ == null) {
            forwardBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                    forward_,
                    getParentForChildren(),
                    isClean());
            forward_ = null;
          }
          return forwardBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
      }

      static {
        defaultInstance = new UpdateParticleFwd(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
    }

    public interface UpdateParticleOrientOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 control_point = 1;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      boolean hasControlPoint();
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      int getControlPoint();

      // optional .com.valve.dota2.CMsgVector forward = 2;
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      boolean hasForward();
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVector getForward();
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVectorOrBuilder getForwardOrBuilder();

      // optional .com.valve.dota2.CMsgVector right = 3;
      /**
       * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
       */
      boolean hasRight();
      /**
       * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
       */
      com.valve.dota2.Netmessages.CMsgVector getRight();
      /**
       * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
       */
      com.valve.dota2.Netmessages.CMsgVectorOrBuilder getRightOrBuilder();

      // optional .com.valve.dota2.CMsgVector up = 4;
      /**
       * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
       */
      boolean hasUp();
      /**
       * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
       */
      com.valve.dota2.Netmessages.CMsgVector getUp();
      /**
       * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
       */
      com.valve.dota2.Netmessages.CMsgVectorOrBuilder getUpOrBuilder();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient}
     */
    public static final class UpdateParticleOrient extends
        com.google.protobuf.GeneratedMessage
        implements UpdateParticleOrientOrBuilder {
      // Use UpdateParticleOrient.newBuilder() to construct.
      private UpdateParticleOrient(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdateParticleOrient(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdateParticleOrient defaultInstance;
      public static UpdateParticleOrient getDefaultInstance() {
        return defaultInstance;
      }

      public UpdateParticleOrient getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdateParticleOrient(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                controlPoint_ = input.readInt32();
                break;
              }
              case 18: {
                com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = forward_.toBuilder();
                }
                forward_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(forward_);
                  forward_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = right_.toBuilder();
                }
                right_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(right_);
                  right_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = up_.toBuilder();
                }
                up_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(up_);
                  up_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdateParticleOrient> PARSER =
          new com.google.protobuf.AbstractParser<UpdateParticleOrient>() {
        public UpdateParticleOrient parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdateParticleOrient(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdateParticleOrient> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 control_point = 1;
      public static final int CONTROL_POINT_FIELD_NUMBER = 1;
      private int controlPoint_;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public boolean hasControlPoint() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public int getControlPoint() {
        return controlPoint_;
      }

      // optional .com.valve.dota2.CMsgVector forward = 2;
      public static final int FORWARD_FIELD_NUMBER = 2;
      private com.valve.dota2.Netmessages.CMsgVector forward_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      public boolean hasForward() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getForward() {
        return forward_;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getForwardOrBuilder() {
        return forward_;
      }

      // optional .com.valve.dota2.CMsgVector right = 3;
      public static final int RIGHT_FIELD_NUMBER = 3;
      private com.valve.dota2.Netmessages.CMsgVector right_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
       */
      public boolean hasRight() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getRight() {
        return right_;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getRightOrBuilder() {
        return right_;
      }

      // optional .com.valve.dota2.CMsgVector up = 4;
      public static final int UP_FIELD_NUMBER = 4;
      private com.valve.dota2.Netmessages.CMsgVector up_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
       */
      public boolean hasUp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getUp() {
        return up_;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getUpOrBuilder() {
        return up_;
      }

      private void initFields() {
        controlPoint_ = 0;
        forward_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        right_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        up_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, forward_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeMessage(3, right_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(4, up_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, forward_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, right_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, up_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrientOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getForwardFieldBuilder();
            getRightFieldBuilder();
            getUpFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          controlPoint_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (forwardBuilder_ == null) {
            forward_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          } else {
            forwardBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (rightBuilder_ == null) {
            right_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          } else {
            rightBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          if (upBuilder_ == null) {
            up_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          } else {
            upBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.controlPoint_ = controlPoint_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (forwardBuilder_ == null) {
            result.forward_ = forward_;
          } else {
            result.forward_ = forwardBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          if (rightBuilder_ == null) {
            result.right_ = right_;
          } else {
            result.right_ = rightBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          if (upBuilder_ == null) {
            result.up_ = up_;
          } else {
            result.up_ = upBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.getDefaultInstance()) return this;
          if (other.hasControlPoint()) {
            setControlPoint(other.getControlPoint());
          }
          if (other.hasForward()) {
            mergeForward(other.getForward());
          }
          if (other.hasRight()) {
            mergeRight(other.getRight());
          }
          if (other.hasUp()) {
            mergeUp(other.getUp());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 control_point = 1;
        private int controlPoint_ ;
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public boolean hasControlPoint() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public int getControlPoint() {
          return controlPoint_;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder setControlPoint(int value) {
          bitField0_ |= 0x00000001;
          controlPoint_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder clearControlPoint() {
          bitField0_ = (bitField0_ & ~0x00000001);
          controlPoint_ = 0;
          onChanged();
          return this;
        }

        // optional .com.valve.dota2.CMsgVector forward = 2;
        private com.valve.dota2.Netmessages.CMsgVector forward_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> forwardBuilder_;
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public boolean hasForward() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector getForward() {
          if (forwardBuilder_ == null) {
            return forward_;
          } else {
            return forwardBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public Builder setForward(com.valve.dota2.Netmessages.CMsgVector value) {
          if (forwardBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            forward_ = value;
            onChanged();
          } else {
            forwardBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public Builder setForward(
            com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
          if (forwardBuilder_ == null) {
            forward_ = builderForValue.build();
            onChanged();
          } else {
            forwardBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public Builder mergeForward(com.valve.dota2.Netmessages.CMsgVector value) {
          if (forwardBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                forward_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
              forward_ =
                com.valve.dota2.Netmessages.CMsgVector.newBuilder(forward_).mergeFrom(value).buildPartial();
            } else {
              forward_ = value;
            }
            onChanged();
          } else {
            forwardBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public Builder clearForward() {
          if (forwardBuilder_ == null) {
            forward_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
            onChanged();
          } else {
            forwardBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector.Builder getForwardBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getForwardFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getForwardOrBuilder() {
          if (forwardBuilder_ != null) {
            return forwardBuilder_.getMessageOrBuilder();
          } else {
            return forward_;
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector forward = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
            getForwardFieldBuilder() {
          if (forwardBuilder_ == null) {
            forwardBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                    forward_,
                    getParentForChildren(),
                    isClean());
            forward_ = null;
          }
          return forwardBuilder_;
        }

        // optional .com.valve.dota2.CMsgVector right = 3;
        private com.valve.dota2.Netmessages.CMsgVector right_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> rightBuilder_;
        /**
         * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
         */
        public boolean hasRight() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector getRight() {
          if (rightBuilder_ == null) {
            return right_;
          } else {
            return rightBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
         */
        public Builder setRight(com.valve.dota2.Netmessages.CMsgVector value) {
          if (rightBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            right_ = value;
            onChanged();
          } else {
            rightBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
         */
        public Builder setRight(
            com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
          if (rightBuilder_ == null) {
            right_ = builderForValue.build();
            onChanged();
          } else {
            rightBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
         */
        public Builder mergeRight(com.valve.dota2.Netmessages.CMsgVector value) {
          if (rightBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                right_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
              right_ =
                com.valve.dota2.Netmessages.CMsgVector.newBuilder(right_).mergeFrom(value).buildPartial();
            } else {
              right_ = value;
            }
            onChanged();
          } else {
            rightBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000004;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
         */
        public Builder clearRight() {
          if (rightBuilder_ == null) {
            right_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
            onChanged();
          } else {
            rightBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector.Builder getRightBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getRightFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getRightOrBuilder() {
          if (rightBuilder_ != null) {
            return rightBuilder_.getMessageOrBuilder();
          } else {
            return right_;
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector right = 3;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
            getRightFieldBuilder() {
          if (rightBuilder_ == null) {
            rightBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                    right_,
                    getParentForChildren(),
                    isClean());
            right_ = null;
          }
          return rightBuilder_;
        }

        // optional .com.valve.dota2.CMsgVector up = 4;
        private com.valve.dota2.Netmessages.CMsgVector up_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> upBuilder_;
        /**
         * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
         */
        public boolean hasUp() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector getUp() {
          if (upBuilder_ == null) {
            return up_;
          } else {
            return upBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
         */
        public Builder setUp(com.valve.dota2.Netmessages.CMsgVector value) {
          if (upBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            up_ = value;
            onChanged();
          } else {
            upBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
         */
        public Builder setUp(
            com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
          if (upBuilder_ == null) {
            up_ = builderForValue.build();
            onChanged();
          } else {
            upBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
         */
        public Builder mergeUp(com.valve.dota2.Netmessages.CMsgVector value) {
          if (upBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                up_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
              up_ =
                com.valve.dota2.Netmessages.CMsgVector.newBuilder(up_).mergeFrom(value).buildPartial();
            } else {
              up_ = value;
            }
            onChanged();
          } else {
            upBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
         */
        public Builder clearUp() {
          if (upBuilder_ == null) {
            up_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
            onChanged();
          } else {
            upBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector.Builder getUpBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getUpFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getUpOrBuilder() {
          if (upBuilder_ != null) {
            return upBuilder_.getMessageOrBuilder();
          } else {
            return up_;
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector up = 4;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
            getUpFieldBuilder() {
          if (upBuilder_ == null) {
            upBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                    up_,
                    getParentForChildren(),
                    isClean());
            up_ = null;
          }
          return upBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
      }

      static {
        defaultInstance = new UpdateParticleOrient(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
    }

    public interface UpdateParticleFallbackOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 control_point = 1;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      boolean hasControlPoint();
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      int getControlPoint();

      // optional .com.valve.dota2.CMsgVector position = 2;
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      boolean hasPosition();
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVector getPosition();
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVectorOrBuilder getPositionOrBuilder();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback}
     */
    public static final class UpdateParticleFallback extends
        com.google.protobuf.GeneratedMessage
        implements UpdateParticleFallbackOrBuilder {
      // Use UpdateParticleFallback.newBuilder() to construct.
      private UpdateParticleFallback(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdateParticleFallback(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdateParticleFallback defaultInstance;
      public static UpdateParticleFallback getDefaultInstance() {
        return defaultInstance;
      }

      public UpdateParticleFallback getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdateParticleFallback(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                controlPoint_ = input.readInt32();
                break;
              }
              case 18: {
                com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = position_.toBuilder();
                }
                position_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(position_);
                  position_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdateParticleFallback> PARSER =
          new com.google.protobuf.AbstractParser<UpdateParticleFallback>() {
        public UpdateParticleFallback parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdateParticleFallback(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdateParticleFallback> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 control_point = 1;
      public static final int CONTROL_POINT_FIELD_NUMBER = 1;
      private int controlPoint_;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public boolean hasControlPoint() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public int getControlPoint() {
        return controlPoint_;
      }

      // optional .com.valve.dota2.CMsgVector position = 2;
      public static final int POSITION_FIELD_NUMBER = 2;
      private com.valve.dota2.Netmessages.CMsgVector position_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getPosition() {
        return position_;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getPositionOrBuilder() {
        return position_;
      }

      private void initFields() {
        controlPoint_ = 0;
        position_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, position_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, position_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallbackOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getPositionFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          controlPoint_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (positionBuilder_ == null) {
            position_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          } else {
            positionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.controlPoint_ = controlPoint_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (positionBuilder_ == null) {
            result.position_ = position_;
          } else {
            result.position_ = positionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.getDefaultInstance()) return this;
          if (other.hasControlPoint()) {
            setControlPoint(other.getControlPoint());
          }
          if (other.hasPosition()) {
            mergePosition(other.getPosition());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 control_point = 1;
        private int controlPoint_ ;
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public boolean hasControlPoint() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public int getControlPoint() {
          return controlPoint_;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder setControlPoint(int value) {
          bitField0_ |= 0x00000001;
          controlPoint_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder clearControlPoint() {
          bitField0_ = (bitField0_ & ~0x00000001);
          controlPoint_ = 0;
          onChanged();
          return this;
        }

        // optional .com.valve.dota2.CMsgVector position = 2;
        private com.valve.dota2.Netmessages.CMsgVector position_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> positionBuilder_;
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public boolean hasPosition() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector getPosition() {
          if (positionBuilder_ == null) {
            return position_;
          } else {
            return positionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public Builder setPosition(com.valve.dota2.Netmessages.CMsgVector value) {
          if (positionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            position_ = value;
            onChanged();
          } else {
            positionBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public Builder setPosition(
            com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
          if (positionBuilder_ == null) {
            position_ = builderForValue.build();
            onChanged();
          } else {
            positionBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public Builder mergePosition(com.valve.dota2.Netmessages.CMsgVector value) {
          if (positionBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                position_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
              position_ =
                com.valve.dota2.Netmessages.CMsgVector.newBuilder(position_).mergeFrom(value).buildPartial();
            } else {
              position_ = value;
            }
            onChanged();
          } else {
            positionBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public Builder clearPosition() {
          if (positionBuilder_ == null) {
            position_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
            onChanged();
          } else {
            positionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector.Builder getPositionBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getPositionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getPositionOrBuilder() {
          if (positionBuilder_ != null) {
            return positionBuilder_.getMessageOrBuilder();
          } else {
            return position_;
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector position = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
            getPositionFieldBuilder() {
          if (positionBuilder_ == null) {
            positionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                    position_,
                    getParentForChildren(),
                    isClean());
            position_ = null;
          }
          return positionBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
      }

      static {
        defaultInstance = new UpdateParticleFallback(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
    }

    public interface UpdateParticleOffsetOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 control_point = 1;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      boolean hasControlPoint();
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      int getControlPoint();

      // optional .com.valve.dota2.CMsgVector origin_offset = 2;
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
       */
      boolean hasOriginOffset();
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVector getOriginOffset();
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
       */
      com.valve.dota2.Netmessages.CMsgVectorOrBuilder getOriginOffsetOrBuilder();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset}
     */
    public static final class UpdateParticleOffset extends
        com.google.protobuf.GeneratedMessage
        implements UpdateParticleOffsetOrBuilder {
      // Use UpdateParticleOffset.newBuilder() to construct.
      private UpdateParticleOffset(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdateParticleOffset(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdateParticleOffset defaultInstance;
      public static UpdateParticleOffset getDefaultInstance() {
        return defaultInstance;
      }

      public UpdateParticleOffset getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdateParticleOffset(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                controlPoint_ = input.readInt32();
                break;
              }
              case 18: {
                com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = originOffset_.toBuilder();
                }
                originOffset_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(originOffset_);
                  originOffset_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdateParticleOffset> PARSER =
          new com.google.protobuf.AbstractParser<UpdateParticleOffset>() {
        public UpdateParticleOffset parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdateParticleOffset(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdateParticleOffset> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 control_point = 1;
      public static final int CONTROL_POINT_FIELD_NUMBER = 1;
      private int controlPoint_;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public boolean hasControlPoint() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public int getControlPoint() {
        return controlPoint_;
      }

      // optional .com.valve.dota2.CMsgVector origin_offset = 2;
      public static final int ORIGIN_OFFSET_FIELD_NUMBER = 2;
      private com.valve.dota2.Netmessages.CMsgVector originOffset_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
       */
      public boolean hasOriginOffset() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getOriginOffset() {
        return originOffset_;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getOriginOffsetOrBuilder() {
        return originOffset_;
      }

      private void initFields() {
        controlPoint_ = 0;
        originOffset_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, originOffset_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, originOffset_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffsetOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getOriginOffsetFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          controlPoint_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          if (originOffsetBuilder_ == null) {
            originOffset_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          } else {
            originOffsetBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.controlPoint_ = controlPoint_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (originOffsetBuilder_ == null) {
            result.originOffset_ = originOffset_;
          } else {
            result.originOffset_ = originOffsetBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.getDefaultInstance()) return this;
          if (other.hasControlPoint()) {
            setControlPoint(other.getControlPoint());
          }
          if (other.hasOriginOffset()) {
            mergeOriginOffset(other.getOriginOffset());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 control_point = 1;
        private int controlPoint_ ;
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public boolean hasControlPoint() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public int getControlPoint() {
          return controlPoint_;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder setControlPoint(int value) {
          bitField0_ |= 0x00000001;
          controlPoint_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder clearControlPoint() {
          bitField0_ = (bitField0_ & ~0x00000001);
          controlPoint_ = 0;
          onChanged();
          return this;
        }

        // optional .com.valve.dota2.CMsgVector origin_offset = 2;
        private com.valve.dota2.Netmessages.CMsgVector originOffset_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> originOffsetBuilder_;
        /**
         * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
         */
        public boolean hasOriginOffset() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector getOriginOffset() {
          if (originOffsetBuilder_ == null) {
            return originOffset_;
          } else {
            return originOffsetBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
         */
        public Builder setOriginOffset(com.valve.dota2.Netmessages.CMsgVector value) {
          if (originOffsetBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            originOffset_ = value;
            onChanged();
          } else {
            originOffsetBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
         */
        public Builder setOriginOffset(
            com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
          if (originOffsetBuilder_ == null) {
            originOffset_ = builderForValue.build();
            onChanged();
          } else {
            originOffsetBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
         */
        public Builder mergeOriginOffset(com.valve.dota2.Netmessages.CMsgVector value) {
          if (originOffsetBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                originOffset_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
              originOffset_ =
                com.valve.dota2.Netmessages.CMsgVector.newBuilder(originOffset_).mergeFrom(value).buildPartial();
            } else {
              originOffset_ = value;
            }
            onChanged();
          } else {
            originOffsetBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
         */
        public Builder clearOriginOffset() {
          if (originOffsetBuilder_ == null) {
            originOffset_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
            onChanged();
          } else {
            originOffsetBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector.Builder getOriginOffsetBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getOriginOffsetFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getOriginOffsetOrBuilder() {
          if (originOffsetBuilder_ != null) {
            return originOffsetBuilder_.getMessageOrBuilder();
          } else {
            return originOffset_;
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector origin_offset = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
            getOriginOffsetFieldBuilder() {
          if (originOffsetBuilder_ == null) {
            originOffsetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                    originOffset_,
                    getParentForChildren(),
                    isClean());
            originOffset_ = null;
          }
          return originOffsetBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
      }

      static {
        defaultInstance = new UpdateParticleOffset(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
    }

    public interface UpdateParticleEntOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 control_point = 1;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      boolean hasControlPoint();
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      int getControlPoint();

      // optional int32 entity_handle = 2;
      /**
       * <code>optional int32 entity_handle = 2;</code>
       */
      boolean hasEntityHandle();
      /**
       * <code>optional int32 entity_handle = 2;</code>
       */
      int getEntityHandle();

      // optional int32 attach_type = 3;
      /**
       * <code>optional int32 attach_type = 3;</code>
       */
      boolean hasAttachType();
      /**
       * <code>optional int32 attach_type = 3;</code>
       */
      int getAttachType();

      // optional int32 attachment = 4;
      /**
       * <code>optional int32 attachment = 4;</code>
       */
      boolean hasAttachment();
      /**
       * <code>optional int32 attachment = 4;</code>
       */
      int getAttachment();

      // optional .com.valve.dota2.CMsgVector fallback_position = 5;
      /**
       * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
       */
      boolean hasFallbackPosition();
      /**
       * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
       */
      com.valve.dota2.Netmessages.CMsgVector getFallbackPosition();
      /**
       * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
       */
      com.valve.dota2.Netmessages.CMsgVectorOrBuilder getFallbackPositionOrBuilder();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt}
     */
    public static final class UpdateParticleEnt extends
        com.google.protobuf.GeneratedMessage
        implements UpdateParticleEntOrBuilder {
      // Use UpdateParticleEnt.newBuilder() to construct.
      private UpdateParticleEnt(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdateParticleEnt(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdateParticleEnt defaultInstance;
      public static UpdateParticleEnt getDefaultInstance() {
        return defaultInstance;
      }

      public UpdateParticleEnt getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdateParticleEnt(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                controlPoint_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                entityHandle_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                attachType_ = input.readInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                attachment_ = input.readInt32();
                break;
              }
              case 42: {
                com.valve.dota2.Netmessages.CMsgVector.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = fallbackPosition_.toBuilder();
                }
                fallbackPosition_ = input.readMessage(com.valve.dota2.Netmessages.CMsgVector.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(fallbackPosition_);
                  fallbackPosition_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdateParticleEnt> PARSER =
          new com.google.protobuf.AbstractParser<UpdateParticleEnt>() {
        public UpdateParticleEnt parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdateParticleEnt(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdateParticleEnt> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 control_point = 1;
      public static final int CONTROL_POINT_FIELD_NUMBER = 1;
      private int controlPoint_;
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public boolean hasControlPoint() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 control_point = 1;</code>
       */
      public int getControlPoint() {
        return controlPoint_;
      }

      // optional int32 entity_handle = 2;
      public static final int ENTITY_HANDLE_FIELD_NUMBER = 2;
      private int entityHandle_;
      /**
       * <code>optional int32 entity_handle = 2;</code>
       */
      public boolean hasEntityHandle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 entity_handle = 2;</code>
       */
      public int getEntityHandle() {
        return entityHandle_;
      }

      // optional int32 attach_type = 3;
      public static final int ATTACH_TYPE_FIELD_NUMBER = 3;
      private int attachType_;
      /**
       * <code>optional int32 attach_type = 3;</code>
       */
      public boolean hasAttachType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 attach_type = 3;</code>
       */
      public int getAttachType() {
        return attachType_;
      }

      // optional int32 attachment = 4;
      public static final int ATTACHMENT_FIELD_NUMBER = 4;
      private int attachment_;
      /**
       * <code>optional int32 attachment = 4;</code>
       */
      public boolean hasAttachment() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 attachment = 4;</code>
       */
      public int getAttachment() {
        return attachment_;
      }

      // optional .com.valve.dota2.CMsgVector fallback_position = 5;
      public static final int FALLBACK_POSITION_FIELD_NUMBER = 5;
      private com.valve.dota2.Netmessages.CMsgVector fallbackPosition_;
      /**
       * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
       */
      public boolean hasFallbackPosition() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVector getFallbackPosition() {
        return fallbackPosition_;
      }
      /**
       * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
       */
      public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getFallbackPositionOrBuilder() {
        return fallbackPosition_;
      }

      private void initFields() {
        controlPoint_ = 0;
        entityHandle_ = 0;
        attachType_ = 0;
        attachment_ = 0;
        fallbackPosition_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, entityHandle_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, attachType_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeInt32(4, attachment_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(5, fallbackPosition_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, controlPoint_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, entityHandle_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, attachType_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, attachment_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, fallbackPosition_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEntOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getFallbackPositionFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          controlPoint_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          entityHandle_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          attachType_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          attachment_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          if (fallbackPositionBuilder_ == null) {
            fallbackPosition_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
          } else {
            fallbackPositionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.controlPoint_ = controlPoint_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.entityHandle_ = entityHandle_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.attachType_ = attachType_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.attachment_ = attachment_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          if (fallbackPositionBuilder_ == null) {
            result.fallbackPosition_ = fallbackPosition_;
          } else {
            result.fallbackPosition_ = fallbackPositionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.getDefaultInstance()) return this;
          if (other.hasControlPoint()) {
            setControlPoint(other.getControlPoint());
          }
          if (other.hasEntityHandle()) {
            setEntityHandle(other.getEntityHandle());
          }
          if (other.hasAttachType()) {
            setAttachType(other.getAttachType());
          }
          if (other.hasAttachment()) {
            setAttachment(other.getAttachment());
          }
          if (other.hasFallbackPosition()) {
            mergeFallbackPosition(other.getFallbackPosition());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 control_point = 1;
        private int controlPoint_ ;
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public boolean hasControlPoint() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public int getControlPoint() {
          return controlPoint_;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder setControlPoint(int value) {
          bitField0_ |= 0x00000001;
          controlPoint_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 control_point = 1;</code>
         */
        public Builder clearControlPoint() {
          bitField0_ = (bitField0_ & ~0x00000001);
          controlPoint_ = 0;
          onChanged();
          return this;
        }

        // optional int32 entity_handle = 2;
        private int entityHandle_ ;
        /**
         * <code>optional int32 entity_handle = 2;</code>
         */
        public boolean hasEntityHandle() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 entity_handle = 2;</code>
         */
        public int getEntityHandle() {
          return entityHandle_;
        }
        /**
         * <code>optional int32 entity_handle = 2;</code>
         */
        public Builder setEntityHandle(int value) {
          bitField0_ |= 0x00000002;
          entityHandle_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 entity_handle = 2;</code>
         */
        public Builder clearEntityHandle() {
          bitField0_ = (bitField0_ & ~0x00000002);
          entityHandle_ = 0;
          onChanged();
          return this;
        }

        // optional int32 attach_type = 3;
        private int attachType_ ;
        /**
         * <code>optional int32 attach_type = 3;</code>
         */
        public boolean hasAttachType() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional int32 attach_type = 3;</code>
         */
        public int getAttachType() {
          return attachType_;
        }
        /**
         * <code>optional int32 attach_type = 3;</code>
         */
        public Builder setAttachType(int value) {
          bitField0_ |= 0x00000004;
          attachType_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 attach_type = 3;</code>
         */
        public Builder clearAttachType() {
          bitField0_ = (bitField0_ & ~0x00000004);
          attachType_ = 0;
          onChanged();
          return this;
        }

        // optional int32 attachment = 4;
        private int attachment_ ;
        /**
         * <code>optional int32 attachment = 4;</code>
         */
        public boolean hasAttachment() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional int32 attachment = 4;</code>
         */
        public int getAttachment() {
          return attachment_;
        }
        /**
         * <code>optional int32 attachment = 4;</code>
         */
        public Builder setAttachment(int value) {
          bitField0_ |= 0x00000008;
          attachment_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 attachment = 4;</code>
         */
        public Builder clearAttachment() {
          bitField0_ = (bitField0_ & ~0x00000008);
          attachment_ = 0;
          onChanged();
          return this;
        }

        // optional .com.valve.dota2.CMsgVector fallback_position = 5;
        private com.valve.dota2.Netmessages.CMsgVector fallbackPosition_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> fallbackPositionBuilder_;
        /**
         * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
         */
        public boolean hasFallbackPosition() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector getFallbackPosition() {
          if (fallbackPositionBuilder_ == null) {
            return fallbackPosition_;
          } else {
            return fallbackPositionBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
         */
        public Builder setFallbackPosition(com.valve.dota2.Netmessages.CMsgVector value) {
          if (fallbackPositionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            fallbackPosition_ = value;
            onChanged();
          } else {
            fallbackPositionBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
         */
        public Builder setFallbackPosition(
            com.valve.dota2.Netmessages.CMsgVector.Builder builderForValue) {
          if (fallbackPositionBuilder_ == null) {
            fallbackPosition_ = builderForValue.build();
            onChanged();
          } else {
            fallbackPositionBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
         */
        public Builder mergeFallbackPosition(com.valve.dota2.Netmessages.CMsgVector value) {
          if (fallbackPositionBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                fallbackPosition_ != com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance()) {
              fallbackPosition_ =
                com.valve.dota2.Netmessages.CMsgVector.newBuilder(fallbackPosition_).mergeFrom(value).buildPartial();
            } else {
              fallbackPosition_ = value;
            }
            onChanged();
          } else {
            fallbackPositionBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
         */
        public Builder clearFallbackPosition() {
          if (fallbackPositionBuilder_ == null) {
            fallbackPosition_ = com.valve.dota2.Netmessages.CMsgVector.getDefaultInstance();
            onChanged();
          } else {
            fallbackPositionBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVector.Builder getFallbackPositionBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getFallbackPositionFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
         */
        public com.valve.dota2.Netmessages.CMsgVectorOrBuilder getFallbackPositionOrBuilder() {
          if (fallbackPositionBuilder_ != null) {
            return fallbackPositionBuilder_.getMessageOrBuilder();
          } else {
            return fallbackPosition_;
          }
        }
        /**
         * <code>optional .com.valve.dota2.CMsgVector fallback_position = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder> 
            getFallbackPositionFieldBuilder() {
          if (fallbackPositionBuilder_ == null) {
            fallbackPositionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                com.valve.dota2.Netmessages.CMsgVector, com.valve.dota2.Netmessages.CMsgVector.Builder, com.valve.dota2.Netmessages.CMsgVectorOrBuilder>(
                    fallbackPosition_,
                    getParentForChildren(),
                    isClean());
            fallbackPosition_ = null;
          }
          return fallbackPositionBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
      }

      static {
        defaultInstance = new UpdateParticleEnt(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
    }

    public interface UpdateParticleLatencyOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 player_latency = 1;
      /**
       * <code>optional int32 player_latency = 1;</code>
       */
      boolean hasPlayerLatency();
      /**
       * <code>optional int32 player_latency = 1;</code>
       */
      int getPlayerLatency();

      // optional int32 tick = 2;
      /**
       * <code>optional int32 tick = 2;</code>
       */
      boolean hasTick();
      /**
       * <code>optional int32 tick = 2;</code>
       */
      int getTick();
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency}
     */
    public static final class UpdateParticleLatency extends
        com.google.protobuf.GeneratedMessage
        implements UpdateParticleLatencyOrBuilder {
      // Use UpdateParticleLatency.newBuilder() to construct.
      private UpdateParticleLatency(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private UpdateParticleLatency(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final UpdateParticleLatency defaultInstance;
      public static UpdateParticleLatency getDefaultInstance() {
        return defaultInstance;
      }

      public UpdateParticleLatency getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private UpdateParticleLatency(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                playerLatency_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                tick_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.Builder.class);
      }

      public static com.google.protobuf.Parser<UpdateParticleLatency> PARSER =
          new com.google.protobuf.AbstractParser<UpdateParticleLatency>() {
        public UpdateParticleLatency parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new UpdateParticleLatency(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<UpdateParticleLatency> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional int32 player_latency = 1;
      public static final int PLAYER_LATENCY_FIELD_NUMBER = 1;
      private int playerLatency_;
      /**
       * <code>optional int32 player_latency = 1;</code>
       */
      public boolean hasPlayerLatency() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 player_latency = 1;</code>
       */
      public int getPlayerLatency() {
        return playerLatency_;
      }

      // optional int32 tick = 2;
      public static final int TICK_FIELD_NUMBER = 2;
      private int tick_;
      /**
       * <code>optional int32 tick = 2;</code>
       */
      public boolean hasTick() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 tick = 2;</code>
       */
      public int getTick() {
        return tick_;
      }

      private void initFields() {
        playerLatency_ = 0;
        tick_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, playerLatency_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, tick_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, playerLatency_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, tick_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatencyOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.Builder.class);
        }

        // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          playerLatency_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          tick_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency getDefaultInstanceForType() {
          return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.getDefaultInstance();
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency build() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency buildPartial() {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.playerLatency_ = playerLatency_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.tick_ = tick_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency) {
            return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency other) {
          if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.getDefaultInstance()) return this;
          if (other.hasPlayerLatency()) {
            setPlayerLatency(other.getPlayerLatency());
          }
          if (other.hasTick()) {
            setTick(other.getTick());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 player_latency = 1;
        private int playerLatency_ ;
        /**
         * <code>optional int32 player_latency = 1;</code>
         */
        public boolean hasPlayerLatency() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 player_latency = 1;</code>
         */
        public int getPlayerLatency() {
          return playerLatency_;
        }
        /**
         * <code>optional int32 player_latency = 1;</code>
         */
        public Builder setPlayerLatency(int value) {
          bitField0_ |= 0x00000001;
          playerLatency_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 player_latency = 1;</code>
         */
        public Builder clearPlayerLatency() {
          bitField0_ = (bitField0_ & ~0x00000001);
          playerLatency_ = 0;
          onChanged();
          return this;
        }

        // optional int32 tick = 2;
        private int tick_ ;
        /**
         * <code>optional int32 tick = 2;</code>
         */
        public boolean hasTick() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 tick = 2;</code>
         */
        public int getTick() {
          return tick_;
        }
        /**
         * <code>optional int32 tick = 2;</code>
         */
        public Builder setTick(int value) {
          bitField0_ |= 0x00000002;
          tick_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 tick = 2;</code>
         */
        public Builder clearTick() {
          bitField0_ = (bitField0_ & ~0x00000002);
          tick_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency)
      }

      static {
        defaultInstance = new UpdateParticleLatency(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency)
    }

    private int bitField0_;
    // required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE type_;
    /**
     * <code>required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;</code>
     */
    public com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE getType() {
      return type_;
    }

    // required uint32 index = 2;
    public static final int INDEX_FIELD_NUMBER = 2;
    private int index_;
    /**
     * <code>required uint32 index = 2;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 index = 2;</code>
     */
    public int getIndex() {
      return index_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    public static final int RELEASE_PARTICLE_INDEX_FIELD_NUMBER = 3;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex releaseParticleIndex_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
     * </pre>
     */
    public boolean hasReleaseParticleIndex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex getReleaseParticleIndex() {
      return releaseParticleIndex_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndexOrBuilder getReleaseParticleIndexOrBuilder() {
      return releaseParticleIndex_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
    public static final int CREATE_PARTICLE_FIELD_NUMBER = 4;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle createParticle_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_CREATE
     * </pre>
     */
    public boolean hasCreateParticle() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_CREATE
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle getCreateParticle() {
      return createParticle_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_CREATE
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticleOrBuilder getCreateParticleOrBuilder() {
      return createParticle_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    public static final int DESTROY_PARTICLE_FIELD_NUMBER = 5;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle destroyParticle_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
     * </pre>
     */
    public boolean hasDestroyParticle() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle getDestroyParticle() {
      return destroyParticle_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleOrBuilder getDestroyParticleOrBuilder() {
      return destroyParticle_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    public static final int DESTROY_PARTICLE_INVOLVING_FIELD_NUMBER = 6;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroyParticleInvolving_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
     * </pre>
     */
    public boolean hasDestroyParticleInvolving() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving getDestroyParticleInvolving() {
      return destroyParticleInvolving_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolvingOrBuilder getDestroyParticleInvolvingOrBuilder() {
      return destroyParticleInvolving_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    public static final int UPDATE_PARTICLE_FIELD_NUMBER = 7;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle updateParticle_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
     * </pre>
     */
    public boolean hasUpdateParticle() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle getUpdateParticle() {
      return updateParticle_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrBuilder getUpdateParticleOrBuilder() {
      return updateParticle_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    public static final int UPDATE_PARTICLE_FWD_FIELD_NUMBER = 8;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd updateParticleFwd_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
     * </pre>
     */
    public boolean hasUpdateParticleFwd() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd getUpdateParticleFwd() {
      return updateParticleFwd_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwdOrBuilder getUpdateParticleFwdOrBuilder() {
      return updateParticleFwd_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    public static final int UPDATE_PARTICLE_ORIENT_FIELD_NUMBER = 9;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient updateParticleOrient_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
     * </pre>
     */
    public boolean hasUpdateParticleOrient() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient getUpdateParticleOrient() {
      return updateParticleOrient_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrientOrBuilder getUpdateParticleOrientOrBuilder() {
      return updateParticleOrient_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    public static final int UPDATE_PARTICLE_FALLBACK_FIELD_NUMBER = 10;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback updateParticleFallback_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
     * </pre>
     */
    public boolean hasUpdateParticleFallback() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback getUpdateParticleFallback() {
      return updateParticleFallback_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallbackOrBuilder getUpdateParticleFallbackOrBuilder() {
      return updateParticleFallback_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    public static final int UPDATE_PARTICLE_OFFSET_FIELD_NUMBER = 11;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset updateParticleOffset_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
     * </pre>
     */
    public boolean hasUpdateParticleOffset() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset getUpdateParticleOffset() {
      return updateParticleOffset_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffsetOrBuilder getUpdateParticleOffsetOrBuilder() {
      return updateParticleOffset_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    public static final int UPDATE_PARTICLE_ENT_FIELD_NUMBER = 12;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt updateParticleEnt_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
     * </pre>
     */
    public boolean hasUpdateParticleEnt() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt getUpdateParticleEnt() {
      return updateParticleEnt_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEntOrBuilder getUpdateParticleEntOrBuilder() {
      return updateParticleEnt_;
    }

    // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;
    public static final int UPDATE_PARTICLE_LATENCY_FIELD_NUMBER = 13;
    private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency updateParticleLatency_;
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
     * </pre>
     */
    public boolean hasUpdateParticleLatency() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency getUpdateParticleLatency() {
      return updateParticleLatency_;
    }
    /**
     * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
     *
     * <pre>
     * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
     * </pre>
     */
    public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatencyOrBuilder getUpdateParticleLatencyOrBuilder() {
      return updateParticleLatency_;
    }

    private void initFields() {
      type_ = com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE.DOTA_PARTICLE_MANAGER_EVENT_CREATE;
      index_ = 0;
      releaseParticleIndex_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.getDefaultInstance();
      createParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.getDefaultInstance();
      destroyParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.getDefaultInstance();
      destroyParticleInvolving_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.getDefaultInstance();
      updateParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.getDefaultInstance();
      updateParticleFwd_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.getDefaultInstance();
      updateParticleOrient_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.getDefaultInstance();
      updateParticleFallback_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.getDefaultInstance();
      updateParticleOffset_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.getDefaultInstance();
      updateParticleEnt_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.getDefaultInstance();
      updateParticleLatency_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, index_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, releaseParticleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, createParticle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, destroyParticle_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, destroyParticleInvolving_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, updateParticle_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, updateParticleFwd_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, updateParticleOrient_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, updateParticleFallback_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, updateParticleOffset_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, updateParticleEnt_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, updateParticleLatency_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, index_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, releaseParticleIndex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, createParticle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, destroyParticle_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, destroyParticleInvolving_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, updateParticle_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, updateParticleFwd_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, updateParticleOrient_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, updateParticleFallback_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, updateParticleOffset_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, updateParticleEnt_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, updateParticleLatency_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_ParticleManager}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManagerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getReleaseParticleIndexFieldBuilder();
          getCreateParticleFieldBuilder();
          getDestroyParticleFieldBuilder();
          getDestroyParticleInvolvingFieldBuilder();
          getUpdateParticleFieldBuilder();
          getUpdateParticleFwdFieldBuilder();
          getUpdateParticleOrientFieldBuilder();
          getUpdateParticleFallbackFieldBuilder();
          getUpdateParticleOffsetFieldBuilder();
          getUpdateParticleEntFieldBuilder();
          getUpdateParticleLatencyFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE.DOTA_PARTICLE_MANAGER_EVENT_CREATE;
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (releaseParticleIndexBuilder_ == null) {
          releaseParticleIndex_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.getDefaultInstance();
        } else {
          releaseParticleIndexBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (createParticleBuilder_ == null) {
          createParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.getDefaultInstance();
        } else {
          createParticleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (destroyParticleBuilder_ == null) {
          destroyParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.getDefaultInstance();
        } else {
          destroyParticleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (destroyParticleInvolvingBuilder_ == null) {
          destroyParticleInvolving_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.getDefaultInstance();
        } else {
          destroyParticleInvolvingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (updateParticleBuilder_ == null) {
          updateParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.getDefaultInstance();
        } else {
          updateParticleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (updateParticleFwdBuilder_ == null) {
          updateParticleFwd_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.getDefaultInstance();
        } else {
          updateParticleFwdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (updateParticleOrientBuilder_ == null) {
          updateParticleOrient_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.getDefaultInstance();
        } else {
          updateParticleOrientBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (updateParticleFallbackBuilder_ == null) {
          updateParticleFallback_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.getDefaultInstance();
        } else {
          updateParticleFallbackBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (updateParticleOffsetBuilder_ == null) {
          updateParticleOffset_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.getDefaultInstance();
        } else {
          updateParticleOffsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (updateParticleEntBuilder_ == null) {
          updateParticleEnt_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.getDefaultInstance();
        } else {
          updateParticleEntBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (updateParticleLatencyBuilder_ == null) {
          updateParticleLatency_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.getDefaultInstance();
        } else {
          updateParticleLatencyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (releaseParticleIndexBuilder_ == null) {
          result.releaseParticleIndex_ = releaseParticleIndex_;
        } else {
          result.releaseParticleIndex_ = releaseParticleIndexBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (createParticleBuilder_ == null) {
          result.createParticle_ = createParticle_;
        } else {
          result.createParticle_ = createParticleBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (destroyParticleBuilder_ == null) {
          result.destroyParticle_ = destroyParticle_;
        } else {
          result.destroyParticle_ = destroyParticleBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (destroyParticleInvolvingBuilder_ == null) {
          result.destroyParticleInvolving_ = destroyParticleInvolving_;
        } else {
          result.destroyParticleInvolving_ = destroyParticleInvolvingBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (updateParticleBuilder_ == null) {
          result.updateParticle_ = updateParticle_;
        } else {
          result.updateParticle_ = updateParticleBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (updateParticleFwdBuilder_ == null) {
          result.updateParticleFwd_ = updateParticleFwd_;
        } else {
          result.updateParticleFwd_ = updateParticleFwdBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (updateParticleOrientBuilder_ == null) {
          result.updateParticleOrient_ = updateParticleOrient_;
        } else {
          result.updateParticleOrient_ = updateParticleOrientBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (updateParticleFallbackBuilder_ == null) {
          result.updateParticleFallback_ = updateParticleFallback_;
        } else {
          result.updateParticleFallback_ = updateParticleFallbackBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (updateParticleOffsetBuilder_ == null) {
          result.updateParticleOffset_ = updateParticleOffset_;
        } else {
          result.updateParticleOffset_ = updateParticleOffsetBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (updateParticleEntBuilder_ == null) {
          result.updateParticleEnt_ = updateParticleEnt_;
        } else {
          result.updateParticleEnt_ = updateParticleEntBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (updateParticleLatencyBuilder_ == null) {
          result.updateParticleLatency_ = updateParticleLatency_;
        } else {
          result.updateParticleLatency_ = updateParticleLatencyBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasReleaseParticleIndex()) {
          mergeReleaseParticleIndex(other.getReleaseParticleIndex());
        }
        if (other.hasCreateParticle()) {
          mergeCreateParticle(other.getCreateParticle());
        }
        if (other.hasDestroyParticle()) {
          mergeDestroyParticle(other.getDestroyParticle());
        }
        if (other.hasDestroyParticleInvolving()) {
          mergeDestroyParticleInvolving(other.getDestroyParticleInvolving());
        }
        if (other.hasUpdateParticle()) {
          mergeUpdateParticle(other.getUpdateParticle());
        }
        if (other.hasUpdateParticleFwd()) {
          mergeUpdateParticleFwd(other.getUpdateParticleFwd());
        }
        if (other.hasUpdateParticleOrient()) {
          mergeUpdateParticleOrient(other.getUpdateParticleOrient());
        }
        if (other.hasUpdateParticleFallback()) {
          mergeUpdateParticleFallback(other.getUpdateParticleFallback());
        }
        if (other.hasUpdateParticleOffset()) {
          mergeUpdateParticleOffset(other.getUpdateParticleOffset());
        }
        if (other.hasUpdateParticleEnt()) {
          mergeUpdateParticleEnt(other.getUpdateParticleEnt());
        }
        if (other.hasUpdateParticleLatency()) {
          mergeUpdateParticleLatency(other.getUpdateParticleLatency());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;
      private com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE type_ = com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE.DOTA_PARTICLE_MANAGER_EVENT_CREATE;
      /**
       * <code>required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;</code>
       */
      public com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE getType() {
        return type_;
      }
      /**
       * <code>required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;</code>
       */
      public Builder setType(com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.valve.dota2.DOTA_PARTICLE_MESSAGE type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.valve.dota2.DotaUsermessages.DOTA_PARTICLE_MESSAGE.DOTA_PARTICLE_MANAGER_EVENT_CREATE;
        onChanged();
        return this;
      }

      // required uint32 index = 2;
      private int index_ ;
      /**
       * <code>required uint32 index = 2;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 index = 2;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required uint32 index = 2;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000002;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 index = 2;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        index_ = 0;
        onChanged();
        return this;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex releaseParticleIndex_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndexOrBuilder> releaseParticleIndexBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
       * </pre>
       */
      public boolean hasReleaseParticleIndex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex getReleaseParticleIndex() {
        if (releaseParticleIndexBuilder_ == null) {
          return releaseParticleIndex_;
        } else {
          return releaseParticleIndexBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
       * </pre>
       */
      public Builder setReleaseParticleIndex(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex value) {
        if (releaseParticleIndexBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          releaseParticleIndex_ = value;
          onChanged();
        } else {
          releaseParticleIndexBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
       * </pre>
       */
      public Builder setReleaseParticleIndex(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.Builder builderForValue) {
        if (releaseParticleIndexBuilder_ == null) {
          releaseParticleIndex_ = builderForValue.build();
          onChanged();
        } else {
          releaseParticleIndexBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
       * </pre>
       */
      public Builder mergeReleaseParticleIndex(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex value) {
        if (releaseParticleIndexBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              releaseParticleIndex_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.getDefaultInstance()) {
            releaseParticleIndex_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.newBuilder(releaseParticleIndex_).mergeFrom(value).buildPartial();
          } else {
            releaseParticleIndex_ = value;
          }
          onChanged();
        } else {
          releaseParticleIndexBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
       * </pre>
       */
      public Builder clearReleaseParticleIndex() {
        if (releaseParticleIndexBuilder_ == null) {
          releaseParticleIndex_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.getDefaultInstance();
          onChanged();
        } else {
          releaseParticleIndexBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.Builder getReleaseParticleIndexBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getReleaseParticleIndexFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndexOrBuilder getReleaseParticleIndexOrBuilder() {
        if (releaseParticleIndexBuilder_ != null) {
          return releaseParticleIndexBuilder_.getMessageOrBuilder();
        } else {
          return releaseParticleIndex_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_RELEASE
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndexOrBuilder> 
          getReleaseParticleIndexFieldBuilder() {
        if (releaseParticleIndexBuilder_ == null) {
          releaseParticleIndexBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.ReleaseParticleIndexOrBuilder>(
                  releaseParticleIndex_,
                  getParentForChildren(),
                  isClean());
          releaseParticleIndex_ = null;
        }
        return releaseParticleIndexBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle createParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticleOrBuilder> createParticleBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_CREATE
       * </pre>
       */
      public boolean hasCreateParticle() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_CREATE
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle getCreateParticle() {
        if (createParticleBuilder_ == null) {
          return createParticle_;
        } else {
          return createParticleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_CREATE
       * </pre>
       */
      public Builder setCreateParticle(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle value) {
        if (createParticleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          createParticle_ = value;
          onChanged();
        } else {
          createParticleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_CREATE
       * </pre>
       */
      public Builder setCreateParticle(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.Builder builderForValue) {
        if (createParticleBuilder_ == null) {
          createParticle_ = builderForValue.build();
          onChanged();
        } else {
          createParticleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_CREATE
       * </pre>
       */
      public Builder mergeCreateParticle(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle value) {
        if (createParticleBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              createParticle_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.getDefaultInstance()) {
            createParticle_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.newBuilder(createParticle_).mergeFrom(value).buildPartial();
          } else {
            createParticle_ = value;
          }
          onChanged();
        } else {
          createParticleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_CREATE
       * </pre>
       */
      public Builder clearCreateParticle() {
        if (createParticleBuilder_ == null) {
          createParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.getDefaultInstance();
          onChanged();
        } else {
          createParticleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_CREATE
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.Builder getCreateParticleBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getCreateParticleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_CREATE
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticleOrBuilder getCreateParticleOrBuilder() {
        if (createParticleBuilder_ != null) {
          return createParticleBuilder_.getMessageOrBuilder();
        } else {
          return createParticle_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_CREATE
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticleOrBuilder> 
          getCreateParticleFieldBuilder() {
        if (createParticleBuilder_ == null) {
          createParticleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticle.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.CreateParticleOrBuilder>(
                  createParticle_,
                  getParentForChildren(),
                  isClean());
          createParticle_ = null;
        }
        return createParticleBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle destroyParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleOrBuilder> destroyParticleBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
       * </pre>
       */
      public boolean hasDestroyParticle() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle getDestroyParticle() {
        if (destroyParticleBuilder_ == null) {
          return destroyParticle_;
        } else {
          return destroyParticleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
       * </pre>
       */
      public Builder setDestroyParticle(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle value) {
        if (destroyParticleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          destroyParticle_ = value;
          onChanged();
        } else {
          destroyParticleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
       * </pre>
       */
      public Builder setDestroyParticle(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.Builder builderForValue) {
        if (destroyParticleBuilder_ == null) {
          destroyParticle_ = builderForValue.build();
          onChanged();
        } else {
          destroyParticleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
       * </pre>
       */
      public Builder mergeDestroyParticle(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle value) {
        if (destroyParticleBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              destroyParticle_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.getDefaultInstance()) {
            destroyParticle_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.newBuilder(destroyParticle_).mergeFrom(value).buildPartial();
          } else {
            destroyParticle_ = value;
          }
          onChanged();
        } else {
          destroyParticleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
       * </pre>
       */
      public Builder clearDestroyParticle() {
        if (destroyParticleBuilder_ == null) {
          destroyParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.getDefaultInstance();
          onChanged();
        } else {
          destroyParticleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.Builder getDestroyParticleBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getDestroyParticleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleOrBuilder getDestroyParticleOrBuilder() {
        if (destroyParticleBuilder_ != null) {
          return destroyParticleBuilder_.getMessageOrBuilder();
        } else {
          return destroyParticle_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleOrBuilder> 
          getDestroyParticleFieldBuilder() {
        if (destroyParticleBuilder_ == null) {
          destroyParticleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticle.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleOrBuilder>(
                  destroyParticle_,
                  getParentForChildren(),
                  isClean());
          destroyParticle_ = null;
        }
        return destroyParticleBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroyParticleInvolving_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolvingOrBuilder> destroyParticleInvolvingBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
       * </pre>
       */
      public boolean hasDestroyParticleInvolving() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving getDestroyParticleInvolving() {
        if (destroyParticleInvolvingBuilder_ == null) {
          return destroyParticleInvolving_;
        } else {
          return destroyParticleInvolvingBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
       * </pre>
       */
      public Builder setDestroyParticleInvolving(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving value) {
        if (destroyParticleInvolvingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          destroyParticleInvolving_ = value;
          onChanged();
        } else {
          destroyParticleInvolvingBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
       * </pre>
       */
      public Builder setDestroyParticleInvolving(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.Builder builderForValue) {
        if (destroyParticleInvolvingBuilder_ == null) {
          destroyParticleInvolving_ = builderForValue.build();
          onChanged();
        } else {
          destroyParticleInvolvingBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
       * </pre>
       */
      public Builder mergeDestroyParticleInvolving(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving value) {
        if (destroyParticleInvolvingBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              destroyParticleInvolving_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.getDefaultInstance()) {
            destroyParticleInvolving_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.newBuilder(destroyParticleInvolving_).mergeFrom(value).buildPartial();
          } else {
            destroyParticleInvolving_ = value;
          }
          onChanged();
        } else {
          destroyParticleInvolvingBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
       * </pre>
       */
      public Builder clearDestroyParticleInvolving() {
        if (destroyParticleInvolvingBuilder_ == null) {
          destroyParticleInvolving_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.getDefaultInstance();
          onChanged();
        } else {
          destroyParticleInvolvingBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.Builder getDestroyParticleInvolvingBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getDestroyParticleInvolvingFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolvingOrBuilder getDestroyParticleInvolvingOrBuilder() {
        if (destroyParticleInvolvingBuilder_ != null) {
          return destroyParticleInvolvingBuilder_.getMessageOrBuilder();
        } else {
          return destroyParticleInvolving_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolvingOrBuilder> 
          getDestroyParticleInvolvingFieldBuilder() {
        if (destroyParticleInvolvingBuilder_ == null) {
          destroyParticleInvolvingBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.DestroyParticleInvolvingOrBuilder>(
                  destroyParticleInvolving_,
                  getParentForChildren(),
                  isClean());
          destroyParticleInvolving_ = null;
        }
        return destroyParticleInvolvingBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle updateParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrBuilder> updateParticleBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
       * </pre>
       */
      public boolean hasUpdateParticle() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle getUpdateParticle() {
        if (updateParticleBuilder_ == null) {
          return updateParticle_;
        } else {
          return updateParticleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
       * </pre>
       */
      public Builder setUpdateParticle(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle value) {
        if (updateParticleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          updateParticle_ = value;
          onChanged();
        } else {
          updateParticleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
       * </pre>
       */
      public Builder setUpdateParticle(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.Builder builderForValue) {
        if (updateParticleBuilder_ == null) {
          updateParticle_ = builderForValue.build();
          onChanged();
        } else {
          updateParticleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
       * </pre>
       */
      public Builder mergeUpdateParticle(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle value) {
        if (updateParticleBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              updateParticle_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.getDefaultInstance()) {
            updateParticle_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.newBuilder(updateParticle_).mergeFrom(value).buildPartial();
          } else {
            updateParticle_ = value;
          }
          onChanged();
        } else {
          updateParticleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
       * </pre>
       */
      public Builder clearUpdateParticle() {
        if (updateParticleBuilder_ == null) {
          updateParticle_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.getDefaultInstance();
          onChanged();
        } else {
          updateParticleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.Builder getUpdateParticleBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getUpdateParticleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrBuilder getUpdateParticleOrBuilder() {
        if (updateParticleBuilder_ != null) {
          return updateParticleBuilder_.getMessageOrBuilder();
        } else {
          return updateParticle_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrBuilder> 
          getUpdateParticleFieldBuilder() {
        if (updateParticleBuilder_ == null) {
          updateParticleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticle.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrBuilder>(
                  updateParticle_,
                  getParentForChildren(),
                  isClean());
          updateParticle_ = null;
        }
        return updateParticleBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd updateParticleFwd_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwdOrBuilder> updateParticleFwdBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
       * </pre>
       */
      public boolean hasUpdateParticleFwd() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd getUpdateParticleFwd() {
        if (updateParticleFwdBuilder_ == null) {
          return updateParticleFwd_;
        } else {
          return updateParticleFwdBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
       * </pre>
       */
      public Builder setUpdateParticleFwd(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd value) {
        if (updateParticleFwdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          updateParticleFwd_ = value;
          onChanged();
        } else {
          updateParticleFwdBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
       * </pre>
       */
      public Builder setUpdateParticleFwd(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.Builder builderForValue) {
        if (updateParticleFwdBuilder_ == null) {
          updateParticleFwd_ = builderForValue.build();
          onChanged();
        } else {
          updateParticleFwdBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
       * </pre>
       */
      public Builder mergeUpdateParticleFwd(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd value) {
        if (updateParticleFwdBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              updateParticleFwd_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.getDefaultInstance()) {
            updateParticleFwd_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.newBuilder(updateParticleFwd_).mergeFrom(value).buildPartial();
          } else {
            updateParticleFwd_ = value;
          }
          onChanged();
        } else {
          updateParticleFwdBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
       * </pre>
       */
      public Builder clearUpdateParticleFwd() {
        if (updateParticleFwdBuilder_ == null) {
          updateParticleFwd_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.getDefaultInstance();
          onChanged();
        } else {
          updateParticleFwdBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.Builder getUpdateParticleFwdBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getUpdateParticleFwdFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwdOrBuilder getUpdateParticleFwdOrBuilder() {
        if (updateParticleFwdBuilder_ != null) {
          return updateParticleFwdBuilder_.getMessageOrBuilder();
        } else {
          return updateParticleFwd_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwdOrBuilder> 
          getUpdateParticleFwdFieldBuilder() {
        if (updateParticleFwdBuilder_ == null) {
          updateParticleFwdBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFwdOrBuilder>(
                  updateParticleFwd_,
                  getParentForChildren(),
                  isClean());
          updateParticleFwd_ = null;
        }
        return updateParticleFwdBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient updateParticleOrient_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrientOrBuilder> updateParticleOrientBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
       * </pre>
       */
      public boolean hasUpdateParticleOrient() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient getUpdateParticleOrient() {
        if (updateParticleOrientBuilder_ == null) {
          return updateParticleOrient_;
        } else {
          return updateParticleOrientBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
       * </pre>
       */
      public Builder setUpdateParticleOrient(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient value) {
        if (updateParticleOrientBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          updateParticleOrient_ = value;
          onChanged();
        } else {
          updateParticleOrientBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
       * </pre>
       */
      public Builder setUpdateParticleOrient(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.Builder builderForValue) {
        if (updateParticleOrientBuilder_ == null) {
          updateParticleOrient_ = builderForValue.build();
          onChanged();
        } else {
          updateParticleOrientBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
       * </pre>
       */
      public Builder mergeUpdateParticleOrient(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient value) {
        if (updateParticleOrientBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              updateParticleOrient_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.getDefaultInstance()) {
            updateParticleOrient_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.newBuilder(updateParticleOrient_).mergeFrom(value).buildPartial();
          } else {
            updateParticleOrient_ = value;
          }
          onChanged();
        } else {
          updateParticleOrientBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
       * </pre>
       */
      public Builder clearUpdateParticleOrient() {
        if (updateParticleOrientBuilder_ == null) {
          updateParticleOrient_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.getDefaultInstance();
          onChanged();
        } else {
          updateParticleOrientBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.Builder getUpdateParticleOrientBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getUpdateParticleOrientFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrientOrBuilder getUpdateParticleOrientOrBuilder() {
        if (updateParticleOrientBuilder_ != null) {
          return updateParticleOrientBuilder_.getMessageOrBuilder();
        } else {
          return updateParticleOrient_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrientOrBuilder> 
          getUpdateParticleOrientFieldBuilder() {
        if (updateParticleOrientBuilder_ == null) {
          updateParticleOrientBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOrientOrBuilder>(
                  updateParticleOrient_,
                  getParentForChildren(),
                  isClean());
          updateParticleOrient_ = null;
        }
        return updateParticleOrientBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback updateParticleFallback_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallbackOrBuilder> updateParticleFallbackBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
       * </pre>
       */
      public boolean hasUpdateParticleFallback() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback getUpdateParticleFallback() {
        if (updateParticleFallbackBuilder_ == null) {
          return updateParticleFallback_;
        } else {
          return updateParticleFallbackBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
       * </pre>
       */
      public Builder setUpdateParticleFallback(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback value) {
        if (updateParticleFallbackBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          updateParticleFallback_ = value;
          onChanged();
        } else {
          updateParticleFallbackBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
       * </pre>
       */
      public Builder setUpdateParticleFallback(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.Builder builderForValue) {
        if (updateParticleFallbackBuilder_ == null) {
          updateParticleFallback_ = builderForValue.build();
          onChanged();
        } else {
          updateParticleFallbackBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
       * </pre>
       */
      public Builder mergeUpdateParticleFallback(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback value) {
        if (updateParticleFallbackBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              updateParticleFallback_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.getDefaultInstance()) {
            updateParticleFallback_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.newBuilder(updateParticleFallback_).mergeFrom(value).buildPartial();
          } else {
            updateParticleFallback_ = value;
          }
          onChanged();
        } else {
          updateParticleFallbackBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
       * </pre>
       */
      public Builder clearUpdateParticleFallback() {
        if (updateParticleFallbackBuilder_ == null) {
          updateParticleFallback_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.getDefaultInstance();
          onChanged();
        } else {
          updateParticleFallbackBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.Builder getUpdateParticleFallbackBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getUpdateParticleFallbackFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallbackOrBuilder getUpdateParticleFallbackOrBuilder() {
        if (updateParticleFallbackBuilder_ != null) {
          return updateParticleFallbackBuilder_.getMessageOrBuilder();
        } else {
          return updateParticleFallback_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallbackOrBuilder> 
          getUpdateParticleFallbackFieldBuilder() {
        if (updateParticleFallbackBuilder_ == null) {
          updateParticleFallbackBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleFallbackOrBuilder>(
                  updateParticleFallback_,
                  getParentForChildren(),
                  isClean());
          updateParticleFallback_ = null;
        }
        return updateParticleFallbackBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset updateParticleOffset_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffsetOrBuilder> updateParticleOffsetBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
       * </pre>
       */
      public boolean hasUpdateParticleOffset() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset getUpdateParticleOffset() {
        if (updateParticleOffsetBuilder_ == null) {
          return updateParticleOffset_;
        } else {
          return updateParticleOffsetBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
       * </pre>
       */
      public Builder setUpdateParticleOffset(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset value) {
        if (updateParticleOffsetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          updateParticleOffset_ = value;
          onChanged();
        } else {
          updateParticleOffsetBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
       * </pre>
       */
      public Builder setUpdateParticleOffset(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.Builder builderForValue) {
        if (updateParticleOffsetBuilder_ == null) {
          updateParticleOffset_ = builderForValue.build();
          onChanged();
        } else {
          updateParticleOffsetBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
       * </pre>
       */
      public Builder mergeUpdateParticleOffset(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset value) {
        if (updateParticleOffsetBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              updateParticleOffset_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.getDefaultInstance()) {
            updateParticleOffset_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.newBuilder(updateParticleOffset_).mergeFrom(value).buildPartial();
          } else {
            updateParticleOffset_ = value;
          }
          onChanged();
        } else {
          updateParticleOffsetBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
       * </pre>
       */
      public Builder clearUpdateParticleOffset() {
        if (updateParticleOffsetBuilder_ == null) {
          updateParticleOffset_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.getDefaultInstance();
          onChanged();
        } else {
          updateParticleOffsetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.Builder getUpdateParticleOffsetBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getUpdateParticleOffsetFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffsetOrBuilder getUpdateParticleOffsetOrBuilder() {
        if (updateParticleOffsetBuilder_ != null) {
          return updateParticleOffsetBuilder_.getMessageOrBuilder();
        } else {
          return updateParticleOffset_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffsetOrBuilder> 
          getUpdateParticleOffsetFieldBuilder() {
        if (updateParticleOffsetBuilder_ == null) {
          updateParticleOffsetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleOffsetOrBuilder>(
                  updateParticleOffset_,
                  getParentForChildren(),
                  isClean());
          updateParticleOffset_ = null;
        }
        return updateParticleOffsetBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt updateParticleEnt_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEntOrBuilder> updateParticleEntBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
       * </pre>
       */
      public boolean hasUpdateParticleEnt() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt getUpdateParticleEnt() {
        if (updateParticleEntBuilder_ == null) {
          return updateParticleEnt_;
        } else {
          return updateParticleEntBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
       * </pre>
       */
      public Builder setUpdateParticleEnt(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt value) {
        if (updateParticleEntBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          updateParticleEnt_ = value;
          onChanged();
        } else {
          updateParticleEntBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
       * </pre>
       */
      public Builder setUpdateParticleEnt(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.Builder builderForValue) {
        if (updateParticleEntBuilder_ == null) {
          updateParticleEnt_ = builderForValue.build();
          onChanged();
        } else {
          updateParticleEntBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
       * </pre>
       */
      public Builder mergeUpdateParticleEnt(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt value) {
        if (updateParticleEntBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              updateParticleEnt_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.getDefaultInstance()) {
            updateParticleEnt_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.newBuilder(updateParticleEnt_).mergeFrom(value).buildPartial();
          } else {
            updateParticleEnt_ = value;
          }
          onChanged();
        } else {
          updateParticleEntBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
       * </pre>
       */
      public Builder clearUpdateParticleEnt() {
        if (updateParticleEntBuilder_ == null) {
          updateParticleEnt_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.getDefaultInstance();
          onChanged();
        } else {
          updateParticleEntBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.Builder getUpdateParticleEntBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getUpdateParticleEntFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEntOrBuilder getUpdateParticleEntOrBuilder() {
        if (updateParticleEntBuilder_ != null) {
          return updateParticleEntBuilder_.getMessageOrBuilder();
        } else {
          return updateParticleEnt_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEntOrBuilder> 
          getUpdateParticleEntFieldBuilder() {
        if (updateParticleEntBuilder_ == null) {
          updateParticleEntBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleEntOrBuilder>(
                  updateParticleEnt_,
                  getParentForChildren(),
                  isClean());
          updateParticleEnt_ = null;
        }
        return updateParticleEntBuilder_;
      }

      // optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;
      private com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency updateParticleLatency_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatencyOrBuilder> updateParticleLatencyBuilder_;
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
       * </pre>
       */
      public boolean hasUpdateParticleLatency() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency getUpdateParticleLatency() {
        if (updateParticleLatencyBuilder_ == null) {
          return updateParticleLatency_;
        } else {
          return updateParticleLatencyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
       * </pre>
       */
      public Builder setUpdateParticleLatency(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency value) {
        if (updateParticleLatencyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          updateParticleLatency_ = value;
          onChanged();
        } else {
          updateParticleLatencyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
       * </pre>
       */
      public Builder setUpdateParticleLatency(
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.Builder builderForValue) {
        if (updateParticleLatencyBuilder_ == null) {
          updateParticleLatency_ = builderForValue.build();
          onChanged();
        } else {
          updateParticleLatencyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
       * </pre>
       */
      public Builder mergeUpdateParticleLatency(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency value) {
        if (updateParticleLatencyBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              updateParticleLatency_ != com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.getDefaultInstance()) {
            updateParticleLatency_ =
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.newBuilder(updateParticleLatency_).mergeFrom(value).buildPartial();
          } else {
            updateParticleLatency_ = value;
          }
          onChanged();
        } else {
          updateParticleLatencyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
       * </pre>
       */
      public Builder clearUpdateParticleLatency() {
        if (updateParticleLatencyBuilder_ == null) {
          updateParticleLatency_ = com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.getDefaultInstance();
          onChanged();
        } else {
          updateParticleLatencyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.Builder getUpdateParticleLatencyBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getUpdateParticleLatencyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
       * </pre>
       */
      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatencyOrBuilder getUpdateParticleLatencyOrBuilder() {
        if (updateParticleLatencyBuilder_ != null) {
          return updateParticleLatencyBuilder_.getMessageOrBuilder();
        } else {
          return updateParticleLatency_;
        }
      }
      /**
       * <code>optional .com.valve.dota2.CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;</code>
       *
       * <pre>
       * DOTA_PARTICLE_MANAGER_EVENT_LATENCY
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatencyOrBuilder> 
          getUpdateParticleLatencyFieldBuilder() {
        if (updateParticleLatencyBuilder_ == null) {
          updateParticleLatencyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatency.Builder, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_ParticleManager.UpdateParticleLatencyOrBuilder>(
                  updateParticleLatency_,
                  getParentForChildren(),
                  isClean());
          updateParticleLatency_ = null;
        }
        return updateParticleLatencyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager)
    }

    static {
      defaultInstance = new CDOTAUserMsg_ParticleManager(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_ParticleManager)
  }

  public interface CDOTAUserMsg_OverheadEventOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;
    /**
     * <code>required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;</code>
     */
    boolean hasMessageType();
    /**
     * <code>required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;</code>
     */
    com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT getMessageType();

    // optional int32 value = 2;
    /**
     * <code>optional int32 value = 2;</code>
     */
    boolean hasValue();
    /**
     * <code>optional int32 value = 2;</code>
     */
    int getValue();

    // optional int32 target_player_entindex = 3;
    /**
     * <code>optional int32 target_player_entindex = 3;</code>
     */
    boolean hasTargetPlayerEntindex();
    /**
     * <code>optional int32 target_player_entindex = 3;</code>
     */
    int getTargetPlayerEntindex();

    // optional int32 target_entindex = 4;
    /**
     * <code>optional int32 target_entindex = 4;</code>
     */
    boolean hasTargetEntindex();
    /**
     * <code>optional int32 target_entindex = 4;</code>
     */
    int getTargetEntindex();

    // optional int32 source_player_entindex = 5;
    /**
     * <code>optional int32 source_player_entindex = 5;</code>
     */
    boolean hasSourcePlayerEntindex();
    /**
     * <code>optional int32 source_player_entindex = 5;</code>
     */
    int getSourcePlayerEntindex();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_OverheadEvent}
   */
  public static final class CDOTAUserMsg_OverheadEvent extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_OverheadEventOrBuilder {
    // Use CDOTAUserMsg_OverheadEvent.newBuilder() to construct.
    private CDOTAUserMsg_OverheadEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_OverheadEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_OverheadEvent defaultInstance;
    public static CDOTAUserMsg_OverheadEvent getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_OverheadEvent getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_OverheadEvent(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT value = com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                messageType_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              value_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              targetPlayerEntindex_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              targetEntindex_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              sourcePlayerEntindex_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_OverheadEvent> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_OverheadEvent>() {
      public CDOTAUserMsg_OverheadEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_OverheadEvent(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_OverheadEvent> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;
    public static final int MESSAGE_TYPE_FIELD_NUMBER = 1;
    private com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT messageType_;
    /**
     * <code>required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;</code>
     */
    public boolean hasMessageType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;</code>
     */
    public com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT getMessageType() {
      return messageType_;
    }

    // optional int32 value = 2;
    public static final int VALUE_FIELD_NUMBER = 2;
    private int value_;
    /**
     * <code>optional int32 value = 2;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 value = 2;</code>
     */
    public int getValue() {
      return value_;
    }

    // optional int32 target_player_entindex = 3;
    public static final int TARGET_PLAYER_ENTINDEX_FIELD_NUMBER = 3;
    private int targetPlayerEntindex_;
    /**
     * <code>optional int32 target_player_entindex = 3;</code>
     */
    public boolean hasTargetPlayerEntindex() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 target_player_entindex = 3;</code>
     */
    public int getTargetPlayerEntindex() {
      return targetPlayerEntindex_;
    }

    // optional int32 target_entindex = 4;
    public static final int TARGET_ENTINDEX_FIELD_NUMBER = 4;
    private int targetEntindex_;
    /**
     * <code>optional int32 target_entindex = 4;</code>
     */
    public boolean hasTargetEntindex() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 target_entindex = 4;</code>
     */
    public int getTargetEntindex() {
      return targetEntindex_;
    }

    // optional int32 source_player_entindex = 5;
    public static final int SOURCE_PLAYER_ENTINDEX_FIELD_NUMBER = 5;
    private int sourcePlayerEntindex_;
    /**
     * <code>optional int32 source_player_entindex = 5;</code>
     */
    public boolean hasSourcePlayerEntindex() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 source_player_entindex = 5;</code>
     */
    public int getSourcePlayerEntindex() {
      return sourcePlayerEntindex_;
    }

    private void initFields() {
      messageType_ = com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_GOLD;
      value_ = 0;
      targetPlayerEntindex_ = 0;
      targetEntindex_ = 0;
      sourcePlayerEntindex_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasMessageType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, messageType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, targetPlayerEntindex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, targetEntindex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, sourcePlayerEntindex_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, messageType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, targetPlayerEntindex_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, targetEntindex_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, sourcePlayerEntindex_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_OverheadEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        messageType_ = com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_GOLD;
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        targetPlayerEntindex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        targetEntindex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        sourcePlayerEntindex_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.messageType_ = messageType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.targetPlayerEntindex_ = targetPlayerEntindex_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.targetEntindex_ = targetEntindex_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.sourcePlayerEntindex_ = sourcePlayerEntindex_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent.getDefaultInstance()) return this;
        if (other.hasMessageType()) {
          setMessageType(other.getMessageType());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasTargetPlayerEntindex()) {
          setTargetPlayerEntindex(other.getTargetPlayerEntindex());
        }
        if (other.hasTargetEntindex()) {
          setTargetEntindex(other.getTargetEntindex());
        }
        if (other.hasSourcePlayerEntindex()) {
          setSourcePlayerEntindex(other.getSourcePlayerEntindex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMessageType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_OverheadEvent) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;
      private com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT messageType_ = com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_GOLD;
      /**
       * <code>required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;</code>
       */
      public boolean hasMessageType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;</code>
       */
      public com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT getMessageType() {
        return messageType_;
      }
      /**
       * <code>required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;</code>
       */
      public Builder setMessageType(com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        messageType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.valve.dota2.DOTA_OVERHEAD_ALERT message_type = 1;</code>
       */
      public Builder clearMessageType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        messageType_ = com.valve.dota2.DotaUsermessages.DOTA_OVERHEAD_ALERT.OVERHEAD_ALERT_GOLD;
        onChanged();
        return this;
      }

      // optional int32 value = 2;
      private int value_ ;
      /**
       * <code>optional int32 value = 2;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 value = 2;</code>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional int32 value = 2;</code>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 value = 2;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0;
        onChanged();
        return this;
      }

      // optional int32 target_player_entindex = 3;
      private int targetPlayerEntindex_ ;
      /**
       * <code>optional int32 target_player_entindex = 3;</code>
       */
      public boolean hasTargetPlayerEntindex() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 target_player_entindex = 3;</code>
       */
      public int getTargetPlayerEntindex() {
        return targetPlayerEntindex_;
      }
      /**
       * <code>optional int32 target_player_entindex = 3;</code>
       */
      public Builder setTargetPlayerEntindex(int value) {
        bitField0_ |= 0x00000004;
        targetPlayerEntindex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 target_player_entindex = 3;</code>
       */
      public Builder clearTargetPlayerEntindex() {
        bitField0_ = (bitField0_ & ~0x00000004);
        targetPlayerEntindex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 target_entindex = 4;
      private int targetEntindex_ ;
      /**
       * <code>optional int32 target_entindex = 4;</code>
       */
      public boolean hasTargetEntindex() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 target_entindex = 4;</code>
       */
      public int getTargetEntindex() {
        return targetEntindex_;
      }
      /**
       * <code>optional int32 target_entindex = 4;</code>
       */
      public Builder setTargetEntindex(int value) {
        bitField0_ |= 0x00000008;
        targetEntindex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 target_entindex = 4;</code>
       */
      public Builder clearTargetEntindex() {
        bitField0_ = (bitField0_ & ~0x00000008);
        targetEntindex_ = 0;
        onChanged();
        return this;
      }

      // optional int32 source_player_entindex = 5;
      private int sourcePlayerEntindex_ ;
      /**
       * <code>optional int32 source_player_entindex = 5;</code>
       */
      public boolean hasSourcePlayerEntindex() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 source_player_entindex = 5;</code>
       */
      public int getSourcePlayerEntindex() {
        return sourcePlayerEntindex_;
      }
      /**
       * <code>optional int32 source_player_entindex = 5;</code>
       */
      public Builder setSourcePlayerEntindex(int value) {
        bitField0_ |= 0x00000010;
        sourcePlayerEntindex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 source_player_entindex = 5;</code>
       */
      public Builder clearSourcePlayerEntindex() {
        bitField0_ = (bitField0_ & ~0x00000010);
        sourcePlayerEntindex_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_OverheadEvent)
    }

    static {
      defaultInstance = new CDOTAUserMsg_OverheadEvent(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_OverheadEvent)
  }

  public interface CDOTAUserMsg_TutorialTipInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional string name = 1;
    /**
     * <code>optional string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // optional int32 progress = 2;
    /**
     * <code>optional int32 progress = 2;</code>
     */
    boolean hasProgress();
    /**
     * <code>optional int32 progress = 2;</code>
     */
    int getProgress();
  }
  /**
   * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_TutorialTipInfo}
   */
  public static final class CDOTAUserMsg_TutorialTipInfo extends
      com.google.protobuf.GeneratedMessage
      implements CDOTAUserMsg_TutorialTipInfoOrBuilder {
    // Use CDOTAUserMsg_TutorialTipInfo.newBuilder() to construct.
    private CDOTAUserMsg_TutorialTipInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CDOTAUserMsg_TutorialTipInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CDOTAUserMsg_TutorialTipInfo defaultInstance;
    public static CDOTAUserMsg_TutorialTipInfo getDefaultInstance() {
      return defaultInstance;
    }

    public CDOTAUserMsg_TutorialTipInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CDOTAUserMsg_TutorialTipInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              progress_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<CDOTAUserMsg_TutorialTipInfo> PARSER =
        new com.google.protobuf.AbstractParser<CDOTAUserMsg_TutorialTipInfo>() {
      public CDOTAUserMsg_TutorialTipInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CDOTAUserMsg_TutorialTipInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CDOTAUserMsg_TutorialTipInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int32 progress = 2;
    public static final int PROGRESS_FIELD_NUMBER = 2;
    private int progress_;
    /**
     * <code>optional int32 progress = 2;</code>
     */
    public boolean hasProgress() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 progress = 2;</code>
     */
    public int getProgress() {
      return progress_;
    }

    private void initFields() {
      name_ = "";
      progress_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, progress_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, progress_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.valve.dota2.CDOTAUserMsg_TutorialTipInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo.class, com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo.Builder.class);
      }

      // Construct using com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        progress_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.valve.dota2.DotaUsermessages.internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_descriptor;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo getDefaultInstanceForType() {
        return com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo.getDefaultInstance();
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo build() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo buildPartial() {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo result = new com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.progress_ = progress_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo) {
          return mergeFrom((com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo other) {
        if (other == com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasProgress()) {
          setProgress(other.getProgress());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.valve.dota2.DotaUsermessages.CDOTAUserMsg_TutorialTipInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // optional int32 progress = 2;
      private int progress_ ;
      /**
       * <code>optional int32 progress = 2;</code>
       */
      public boolean hasProgress() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 progress = 2;</code>
       */
      public int getProgress() {
        return progress_;
      }
      /**
       * <code>optional int32 progress = 2;</code>
       */
      public Builder setProgress(int value) {
        bitField0_ |= 0x00000002;
        progress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 progress = 2;</code>
       */
      public Builder clearProgress() {
        bitField0_ = (bitField0_ & ~0x00000002);
        progress_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.valve.dota2.CDOTAUserMsg_TutorialTipInfo)
    }

    static {
      defaultInstance = new CDOTAUserMsg_TutorialTipInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.valve.dota2.CDOTAUserMsg_TutorialTipInfo)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_Ping_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_Ping_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_HudError_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_HudError_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\027dota_usermessages.proto\022\017com.valve.dot" +
      "a2\032 google/protobuf/descriptor.proto\032\021ne" +
      "tmessages.proto\032\021ai_activity.proto\032\031dota" +
      "_commonmessages.proto\"+\n\030CDOTAUserMsg_AI" +
      "DebugLine\022\017\n\007message\030\001 \001(\t\"$\n\021CDOTAUserM" +
      "sg_Ping\022\017\n\007message\030\001 \001(\t\"\351\001\n\026CDOTAUserMs" +
      "g_ChatEvent\0220\n\004type\030\001 \002(\0162\".com.valve.do" +
      "ta2.DOTA_CHAT_MESSAGE\022\r\n\005value\030\002 \001(\r\022\026\n\n" +
      "playerid_1\030\003 \001(\021:\002-1\022\026\n\nplayerid_2\030\004 \001(\021" +
      ":\002-1\022\026\n\nplayerid_3\030\005 \001(\021:\002-1\022\026\n\nplayerid",
      "_4\030\006 \001(\021:\002-1\022\026\n\nplayerid_5\030\007 \001(\021:\002-1\022\026\n\n" +
      "playerid_6\030\010 \001(\021:\002-1\"\317\001\n\032CDOTAUserMsg_Co" +
      "mbatLogData\022\014\n\004type\030\001 \001(\r\022\023\n\013target_name" +
      "\030\002 \001(\r\022\025\n\rattacker_name\030\003 \001(\r\022\031\n\021attacke" +
      "r_illusion\030\004 \001(\010\022\027\n\017target_illusion\030\005 \001(" +
      "\010\022\026\n\016inflictor_name\030\006 \001(\r\022\r\n\005value\030\007 \001(\005" +
      "\022\016\n\006health\030\010 \001(\005\022\014\n\004time\030\t \001(\002\"!\n\037CDOTAU" +
      "serMsg_CombatLogShowDeath\"Z\n\024CDOTAUserMs" +
      "g_BotChat\022\021\n\tplayer_id\030\001 \001(\r\022\016\n\006format\030\002" +
      " \001(\t\022\017\n\007message\030\003 \001(\t\022\016\n\006target\030\004 \001(\t\"\201\001",
      "\n CDOTAUserMsg_CombatHeroPositions\022\r\n\005in" +
      "dex\030\001 \001(\r\022\014\n\004time\030\002 \001(\005\0220\n\tworld_pos\030\003 \001" +
      "(\0132\035.com.valve.dota2.CMsgVector2D\022\016\n\006hea" +
      "lth\030\004 \001(\005\"\235\002\n\034CDOTAUserMsg_MiniKillCamIn" +
      "fo\022I\n\tattackers\030\001 \003(\01326.com.valve.dota2." +
      "CDOTAUserMsg_MiniKillCamInfo.Attacker\032\261\001" +
      "\n\010Attacker\022\020\n\010attacker\030\001 \001(\r\022\024\n\014total_da" +
      "mage\030\002 \001(\005\022Q\n\tabilities\030\003 \003(\0132>.com.valv" +
      "e.dota2.CDOTAUserMsg_MiniKillCamInfo.Att" +
      "acker.Ability\032*\n\007Ability\022\017\n\007ability\030\001 \001(",
      "\r\022\016\n\006damage\030\002 \001(\005\"@\n\035CDOTAUserMsg_Global" +
      "LightColor\022\r\n\005color\030\001 \001(\r\022\020\n\010duration\030\002 " +
      "\001(\002\"e\n!CDOTAUserMsg_GlobalLightDirection" +
      "\022.\n\tdirection\030\001 \001(\0132\033.com.valve.dota2.CM" +
      "sgVector\022\020\n\010duration\030\002 \001(\002\"m\n\031CDOTAUserM" +
      "sg_LocationPing\022\021\n\tplayer_id\030\001 \001(\r\022=\n\rlo" +
      "cation_ping\030\002 \001(\0132&.com.valve.dota2.CDOT" +
      "AMsg_LocationPing\"n\n\031CDOTAUserMsg_Minima" +
      "pEvent\022\022\n\nevent_type\030\001 \001(\005\022\025\n\rentity_han" +
      "dle\030\002 \001(\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\020\n\010durat",
      "ion\030\005 \001(\005\"]\n\024CDOTAUserMsg_MapLine\022\021\n\tpla" +
      "yer_id\030\001 \001(\005\0222\n\007mapline\030\002 \001(\0132!.com.valv" +
      "e.dota2.CDOTAMsg_MapLine\"~\n\036CDOTAUserMsg" +
      "_MinimapDebugPoint\022-\n\010location\030\001 \001(\0132\033.c" +
      "om.valve.dota2.CMsgVector\022\r\n\005color\030\002 \001(\r" +
      "\022\014\n\004size\030\003 \001(\005\022\020\n\010duration\030\004 \001(\002\"\316\001\n#CDO" +
      "TAUserMsg_CreateLinearProjectile\022+\n\006orig" +
      "in\030\001 \001(\0132\033.com.valve.dota2.CMsgVector\022/\n" +
      "\010velocity\030\002 \001(\0132\035.com.valve.dota2.CMsgVe" +
      "ctor2D\022\017\n\007latency\030\003 \001(\005\022\020\n\010entindex\030\004 \001(",
      "\005\022\026\n\016particle_index\030\005 \001(\005\022\016\n\006handle\030\006 \001(" +
      "\005\"6\n$CDOTAUserMsg_DestroyLinearProjectil" +
      "e\022\016\n\006handle\030\001 \001(\005\"9\n%CDOTAUserMsg_DodgeT" +
      "rackingProjectiles\022\020\n\010entindex\030\001 \002(\005\"_\n!" +
      "CDOTAUserMsg_SpectatorPlayerClick\022\020\n\010ent" +
      "index\030\001 \002(\005\022\022\n\norder_type\030\002 \001(\005\022\024\n\014targe" +
      "t_index\030\003 \001(\005\"r\n\035CDOTAUserMsg_NevermoreR" +
      "equiem\022\025\n\rentity_handle\030\001 \001(\005\022\r\n\005lines\030\002" +
      " \001(\005\022+\n\006origin\030\003 \001(\0132\033.com.valve.dota2.C" +
      "MsgVector\".\n\033CDOTAUserMsg_InvalidCommand",
      "\022\017\n\007message\030\001 \001(\t\")\n\025CDOTAUserMsg_HudErr" +
      "or\022\020\n\010order_id\030\001 \001(\005\"c\n\033CDOTAUserMsg_Sha" +
      "redCooldown\022\020\n\010entindex\030\001 \001(\005\022\014\n\004name\030\002 " +
      "\001(\t\022\020\n\010cooldown\030\003 \001(\002\022\022\n\nname_index\030\004 \001(" +
      "\005\"/\n\037CDOTAUserMsg_SetNextAutobuyItem\022\014\n\004" +
      "name\030\001 \001(\t\"\303\007\n\026CDOTAUserMsg_UnitEvent\0226\n" +
      "\010msg_type\030\001 \002(\0162$.com.valve.dota2.EDotaE" +
      "ntityMessages\022\024\n\014entity_index\030\002 \002(\005\022>\n\006s" +
      "peech\030\003 \001(\0132..com.valve.dota2.CDOTAUserM" +
      "sg_UnitEvent.Speech\022G\n\013speech_mute\030\004 \001(\013",
      "22.com.valve.dota2.CDOTAUserMsg_UnitEven" +
      "t.SpeechMute\022G\n\013add_gesture\030\005 \001(\01322.com." +
      "valve.dota2.CDOTAUserMsg_UnitEvent.AddGe" +
      "sture\022M\n\016remove_gesture\030\006 \001(\01325.com.valv" +
      "e.dota2.CDOTAUserMsg_UnitEvent.RemoveGes" +
      "ture\022I\n\014blood_impact\030\007 \001(\01323.com.valve.d" +
      "ota2.CDOTAUserMsg_UnitEvent.BloodImpact\022" +
      "I\n\014fade_gesture\030\010 \001(\01323.com.valve.dota2." +
      "CDOTAUserMsg_UnitEvent.FadeGesture\032R\n\006Sp" +
      "eech\022\017\n\007concept\030\001 \001(\005\022\020\n\010response\030\002 \001(\t\022",
      "\026\n\016recipient_type\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\032 " +
      "\n\nSpeechMute\022\022\n\005delay\030\001 \001(\002:\0030.5\032r\n\nAddG" +
      "esture\022+\n\010activity\030\001 \001(\0162\031.com.valve.dot" +
      "a2.Activity\022\014\n\004slot\030\002 \001(\005\022\022\n\007fade_in\030\003 \001" +
      "(\002:\0010\022\025\n\010fade_out\030\004 \001(\002:\0030.1\032<\n\rRemoveGe" +
      "sture\022+\n\010activity\030\001 \001(\0162\031.com.valve.dota" +
      "2.Activity\032@\n\013BloodImpact\022\r\n\005scale\030\001 \001(\005" +
      "\022\020\n\010x_normal\030\002 \001(\005\022\020\n\010y_normal\030\003 \001(\005\032:\n\013" +
      "FadeGesture\022+\n\010activity\030\001 \001(\0162\031.com.valv" +
      "e.dota2.Activity\"0\n\032CDOTAUserMsg_ItemPur",
      "chased\022\022\n\nitem_index\030\001 \001(\005\"j\n\026CDOTAUserM" +
      "sg_ItemFound\022\016\n\006player\030\001 \001(\005\022\017\n\007quality\030" +
      "\002 \001(\005\022\016\n\006rarity\030\003 \001(\005\022\016\n\006method\030\004 \001(\005\022\017\n" +
      "\007itemdef\030\005 \001(\005\"\213\021\n\034CDOTAUserMsg_Particle" +
      "Manager\0224\n\004type\030\001 \002(\0162&.com.valve.dota2." +
      "DOTA_PARTICLE_MESSAGE\022\r\n\005index\030\002 \002(\r\022b\n\026" +
      "release_particle_index\030\003 \001(\0132B.com.valve" +
      ".dota2.CDOTAUserMsg_ParticleManager.Rele" +
      "aseParticleIndex\022U\n\017create_particle\030\004 \001(" +
      "\0132<.com.valve.dota2.CDOTAUserMsg_Particl",
      "eManager.CreateParticle\022W\n\020destroy_parti" +
      "cle\030\005 \001(\0132=.com.valve.dota2.CDOTAUserMsg" +
      "_ParticleManager.DestroyParticle\022j\n\032dest" +
      "roy_particle_involving\030\006 \001(\0132F.com.valve" +
      ".dota2.CDOTAUserMsg_ParticleManager.Dest" +
      "royParticleInvolving\022U\n\017update_particle\030" +
      "\007 \001(\0132<.com.valve.dota2.CDOTAUserMsg_Par" +
      "ticleManager.UpdateParticle\022\\\n\023update_pa" +
      "rticle_fwd\030\010 \001(\0132?.com.valve.dota2.CDOTA" +
      "UserMsg_ParticleManager.UpdateParticleFw",
      "d\022b\n\026update_particle_orient\030\t \001(\0132B.com." +
      "valve.dota2.CDOTAUserMsg_ParticleManager" +
      ".UpdateParticleOrient\022f\n\030update_particle" +
      "_fallback\030\n \001(\0132D.com.valve.dota2.CDOTAU" +
      "serMsg_ParticleManager.UpdateParticleFal" +
      "lback\022b\n\026update_particle_offset\030\013 \001(\0132B." +
      "com.valve.dota2.CDOTAUserMsg_ParticleMan" +
      "ager.UpdateParticleOffset\022\\\n\023update_part" +
      "icle_ent\030\014 \001(\0132?.com.valve.dota2.CDOTAUs" +
      "erMsg_ParticleManager.UpdateParticleEnt\022",
      "d\n\027update_particle_latency\030\r \001(\0132C.com.v" +
      "alve.dota2.CDOTAUserMsg_ParticleManager." +
      "UpdateParticleLatency\032\026\n\024ReleaseParticle" +
      "Index\032Y\n\016CreateParticle\022\033\n\023particle_name" +
      "_index\030\001 \001(\005\022\023\n\013attach_type\030\002 \001(\005\022\025\n\rent" +
      "ity_handle\030\003 \001(\005\032.\n\017DestroyParticle\022\033\n\023d" +
      "estroy_immediately\030\001 \001(\010\032N\n\030DestroyParti" +
      "cleInvolving\022\033\n\023destroy_immediately\030\001 \001(" +
      "\010\022\025\n\rentity_handle\030\003 \001(\005\032V\n\016UpdatePartic" +
      "le\022\025\n\rcontrol_point\030\001 \001(\005\022-\n\010position\030\002 ",
      "\001(\0132\033.com.valve.dota2.CMsgVector\032X\n\021Upda" +
      "teParticleFwd\022\025\n\rcontrol_point\030\001 \001(\005\022,\n\007" +
      "forward\030\002 \001(\0132\033.com.valve.dota2.CMsgVect" +
      "or\032\260\001\n\024UpdateParticleOrient\022\025\n\rcontrol_p" +
      "oint\030\001 \001(\005\022,\n\007forward\030\002 \001(\0132\033.com.valve." +
      "dota2.CMsgVector\022*\n\005right\030\003 \001(\0132\033.com.va" +
      "lve.dota2.CMsgVector\022\'\n\002up\030\004 \001(\0132\033.com.v" +
      "alve.dota2.CMsgVector\032^\n\026UpdateParticleF" +
      "allback\022\025\n\rcontrol_point\030\001 \001(\005\022-\n\010positi" +
      "on\030\002 \001(\0132\033.com.valve.dota2.CMsgVector\032a\n",
      "\024UpdateParticleOffset\022\025\n\rcontrol_point\030\001" +
      " \001(\005\0222\n\rorigin_offset\030\002 \001(\0132\033.com.valve." +
      "dota2.CMsgVector\032\242\001\n\021UpdateParticleEnt\022\025" +
      "\n\rcontrol_point\030\001 \001(\005\022\025\n\rentity_handle\030\002" +
      " \001(\005\022\023\n\013attach_type\030\003 \001(\005\022\022\n\nattachment\030" +
      "\004 \001(\005\0226\n\021fallback_position\030\005 \001(\0132\033.com.v" +
      "alve.dota2.CMsgVector\032=\n\025UpdateParticleL" +
      "atency\022\026\n\016player_latency\030\001 \001(\005\022\014\n\004tick\030\002" +
      " \001(\005\"\300\001\n\032CDOTAUserMsg_OverheadEvent\022:\n\014m" +
      "essage_type\030\001 \002(\0162$.com.valve.dota2.DOTA",
      "_OVERHEAD_ALERT\022\r\n\005value\030\002 \001(\005\022\036\n\026target" +
      "_player_entindex\030\003 \001(\005\022\027\n\017target_entinde" +
      "x\030\004 \001(\005\022\036\n\026source_player_entindex\030\005 \001(\005\"" +
      ">\n\034CDOTAUserMsg_TutorialTipInfo\022\014\n\004name\030" +
      "\001 \001(\t\022\020\n\010progress\030\002 \001(\005*\346\006\n\021EDotaUserMes" +
      "sages\022\036\n\032DOTA_UM_AddUnitToSelection\020@\022\027\n" +
      "\023DOTA_UM_AIDebugLine\020A\022\025\n\021DOTA_UM_ChatEv" +
      "ent\020B\022\037\n\033DOTA_UM_CombatHeroPositions\020C\022\031" +
      "\n\025DOTA_UM_CombatLogData\020D\022\036\n\032DOTA_UM_Com" +
      "batLogShowDeath\020F\022\"\n\036DOTA_UM_CreateLinea",
      "rProjectile\020G\022#\n\037DOTA_UM_DestroyLinearPr" +
      "ojectile\020H\022$\n DOTA_UM_DodgeTrackingProje" +
      "ctiles\020I\022\034\n\030DOTA_UM_GlobalLightColor\020J\022 " +
      "\n\034DOTA_UM_GlobalLightDirection\020K\022\032\n\026DOTA" +
      "_UM_InvalidCommand\020L\022\030\n\024DOTA_UM_Location" +
      "Ping\020M\022\023\n\017DOTA_UM_MapLine\020N\022\033\n\027DOTA_UM_M" +
      "iniKillCamInfo\020O\022\035\n\031DOTA_UM_MinimapDebug" +
      "Point\020P\022\030\n\024DOTA_UM_MinimapEvent\020Q\022\034\n\030DOT" +
      "A_UM_NevermoreRequiem\020R\022\031\n\025DOTA_UM_Overh" +
      "eadEvent\020S\022\036\n\032DOTA_UM_SetNextAutobuyItem",
      "\020T\022\032\n\026DOTA_UM_SharedCooldown\020U\022 \n\034DOTA_U" +
      "M_SpectatorPlayerClick\020V\022\033\n\027DOTA_UM_Tuto" +
      "rialTipInfo\020W\022\025\n\021DOTA_UM_UnitEvent\020X\022\033\n\027" +
      "DOTA_UM_ParticleManager\020Y\022\023\n\017DOTA_UM_Bot" +
      "Chat\020Z\022\024\n\020DOTA_UM_HudError\020[\022\031\n\025DOTA_UM_" +
      "ItemPurchased\020\\\022\020\n\014DOTA_UM_Ping\020]\022\025\n\021DOT" +
      "A_UM_ItemFound\020^*\252\014\n\021DOTA_CHAT_MESSAGE\022!" +
      "\n\024CHAT_MESSAGE_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\032\n\026CHA" +
      "T_MESSAGE_HERO_KILL\020\000\022\032\n\026CHAT_MESSAGE_HE" +
      "RO_DENY\020\001\022\036\n\032CHAT_MESSAGE_BARRACKS_KILL\020",
      "\002\022\033\n\027CHAT_MESSAGE_TOWER_KILL\020\003\022\033\n\027CHAT_M" +
      "ESSAGE_TOWER_DENY\020\004\022\033\n\027CHAT_MESSAGE_FIRS" +
      "TBLOOD\020\005\022\034\n\030CHAT_MESSAGE_STREAK_KILL\020\006\022\030" +
      "\n\024CHAT_MESSAGE_BUYBACK\020\007\022\026\n\022CHAT_MESSAGE" +
      "_AEGIS\020\010\022\034\n\030CHAT_MESSAGE_ROSHAN_KILL\020\t\022\035" +
      "\n\031CHAT_MESSAGE_COURIER_LOST\020\n\022\"\n\036CHAT_ME" +
      "SSAGE_COURIER_RESPAWNED\020\013\022\033\n\027CHAT_MESSAG" +
      "E_GLYPH_USED\020\014\022\036\n\032CHAT_MESSAGE_ITEM_PURC" +
      "HASE\020\r\022\030\n\024CHAT_MESSAGE_CONNECT\020\016\022\033\n\027CHAT" +
      "_MESSAGE_DISCONNECT\020\017\022.\n*CHAT_MESSAGE_DI",
      "SCONNECT_WAIT_FOR_RECONNECT\020\020\022*\n&CHAT_ME" +
      "SSAGE_DISCONNECT_TIME_REMAINING\020\021\0221\n-CHA" +
      "T_MESSAGE_DISCONNECT_TIME_REMAINING_PLUR" +
      "AL\020\022\022\032\n\026CHAT_MESSAGE_RECONNECT\020\023\022\030\n\024CHAT" +
      "_MESSAGE_ABANDON\020\024\022\036\n\032CHAT_MESSAGE_SAFE_" +
      "TO_LEAVE\020\025\022\034\n\030CHAT_MESSAGE_RUNE_PICKUP\020\026" +
      "\022\034\n\030CHAT_MESSAGE_RUNE_BOTTLE\020\027\022\031\n\025CHAT_M" +
      "ESSAGE_INTHEBAG\020\030\022\033\n\027CHAT_MESSAGE_SECRET" +
      "SHOP\020\031\022#\n\037CHAT_MESSAGE_ITEM_AUTOPURCHASE" +
      "D\020\032\022\037\n\033CHAT_MESSAGE_ITEMS_COMBINED\020\033\022\035\n\031",
      "CHAT_MESSAGE_SUPER_CREEPS\020\034\022%\n!CHAT_MESS" +
      "AGE_CANT_USE_ACTION_ITEM\020\035\022\"\n\036CHAT_MESSA" +
      "GE_CHARGES_EXHAUSTED\020\036\022\032\n\026CHAT_MESSAGE_C" +
      "ANTPAUSE\020\037\022\035\n\031CHAT_MESSAGE_NOPAUSESLEFT\020" +
      " \022\035\n\031CHAT_MESSAGE_CANTPAUSEYET\020!\022\027\n\023CHAT" +
      "_MESSAGE_PAUSED\020\"\022\"\n\036CHAT_MESSAGE_UNPAUS" +
      "E_COUNTDOWN\020#\022\031\n\025CHAT_MESSAGE_UNPAUSED\020$" +
      "\022\036\n\032CHAT_MESSAGE_AUTO_UNPAUSED\020%\022\032\n\026CHAT" +
      "_MESSAGE_YOUPAUSED\020&\022 \n\034CHAT_MESSAGE_CAN" +
      "TUNPAUSETEAM\020\'\022(\n$CHAT_MESSAGE_SAFE_TO_L",
      "EAVE_ABANDONER\020(\022\"\n\036CHAT_MESSAGE_VOICE_T" +
      "EXT_BANNED\020)\022.\n*CHAT_MESSAGE_SPECTATORS_" +
      "WATCHING_THIS_GAME\020*\022 \n\034CHAT_MESSAGE_REP" +
      "ORT_REMINDER\020+\022\032\n\026CHAT_MESSAGE_ECON_ITEM" +
      "\020,\022\026\n\022CHAT_MESSAGE_TAUNT\020-\022\027\n\023CHAT_MESSA" +
      "GE_RANDOM\020.\022\030\n\024CHAT_MESSAGE_RD_TURN\020/*\276\001" +
      "\n\023EDotaEntityMessages\022\024\n\020DOTA_UNIT_SPEEC" +
      "H\020\000\022\031\n\025DOTA_UNIT_SPEECH_MUTE\020\001\022\031\n\025DOTA_U" +
      "NIT_ADD_GESTURE\020\002\022\034\n\030DOTA_UNIT_REMOVE_GE" +
      "STURE\020\003\022!\n\035DOTA_UNIT_REMOVE_ALL_GESTURES",
      "\020\004\022\032\n\026DOTA_UNIT_FADE_GESTURE\020\006*\205\004\n\025DOTA_" +
      "PARTICLE_MESSAGE\022&\n\"DOTA_PARTICLE_MANAGE" +
      "R_EVENT_CREATE\020\000\022&\n\"DOTA_PARTICLE_MANAGE" +
      "R_EVENT_UPDATE\020\001\022.\n*DOTA_PARTICLE_MANAGE" +
      "R_EVENT_UPDATE_FORWARD\020\002\0222\n.DOTA_PARTICL" +
      "E_MANAGER_EVENT_UPDATE_ORIENTATION\020\003\022/\n+" +
      "DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLB" +
      "ACK\020\004\022*\n&DOTA_PARTICLE_MANAGER_EVENT_UPD" +
      "ATE_ENT\020\005\022-\n)DOTA_PARTICLE_MANAGER_EVENT" +
      "_UPDATE_OFFSET\020\006\022\'\n#DOTA_PARTICLE_MANAGE",
      "R_EVENT_DESTROY\020\007\0221\n-DOTA_PARTICLE_MANAG" +
      "ER_EVENT_DESTROY_INVOLVING\020\010\022\'\n#DOTA_PAR" +
      "TICLE_MANAGER_EVENT_RELEASE\020\t\022\'\n#DOTA_PA" +
      "RTICLE_MANAGER_EVENT_LATENCY\020\n*\262\002\n\023DOTA_" +
      "OVERHEAD_ALERT\022\027\n\023OVERHEAD_ALERT_GOLD\020\000\022" +
      "\027\n\023OVERHEAD_ALERT_DENY\020\001\022\033\n\027OVERHEAD_ALE" +
      "RT_CRITICAL\020\002\022\025\n\021OVERHEAD_ALERT_XP\020\003\022%\n!" +
      "OVERHEAD_ALERT_BONUS_SPELL_DAMAGE\020\004\022\027\n\023O" +
      "VERHEAD_ALERT_MISS\020\005\022\031\n\025OVERHEAD_ALERT_D" +
      "AMAGE\020\006\022\030\n\024OVERHEAD_ALERT_EVADE\020\007\022\030\n\024OVE",
      "RHEAD_ALERT_BLOCK\020\010\022&\n\"OVERHEAD_ALERT_BO" +
      "NUS_POISON_DAMAGE\020\tB\005H\001\200\001\000"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_AIDebugLine_descriptor,
              new java.lang.String[] { "Message", });
          internal_static_com_valve_dota2_CDOTAUserMsg_Ping_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_valve_dota2_CDOTAUserMsg_Ping_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_Ping_descriptor,
              new java.lang.String[] { "Message", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ChatEvent_descriptor,
              new java.lang.String[] { "Type", "Value", "Playerid1", "Playerid2", "Playerid3", "Playerid4", "Playerid5", "Playerid6", });
          internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogData_descriptor,
              new java.lang.String[] { "Type", "TargetName", "AttackerName", "AttackerIllusion", "TargetIllusion", "InflictorName", "Value", "Health", "Time", });
          internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_CombatLogShowDeath_descriptor,
              new java.lang.String[] { });
          internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_BotChat_descriptor,
              new java.lang.String[] { "PlayerId", "Format", "Message", "Target", });
          internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_CombatHeroPositions_descriptor,
              new java.lang.String[] { "Index", "Time", "WorldPos", "Health", });
          internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_descriptor,
              new java.lang.String[] { "Attackers", });
          internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_descriptor.getNestedTypes().get(0);
          internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor,
              new java.lang.String[] { "Attacker", "TotalDamage", "Abilities", });
          internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor.getNestedTypes().get(0);
          internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor,
              new java.lang.String[] { "Ability", "Damage", });
          internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightColor_descriptor,
              new java.lang.String[] { "Color", "Duration", });
          internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_GlobalLightDirection_descriptor,
              new java.lang.String[] { "Direction", "Duration", });
          internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_LocationPing_descriptor,
              new java.lang.String[] { "PlayerId", "LocationPing", });
          internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_MinimapEvent_descriptor,
              new java.lang.String[] { "EventType", "EntityHandle", "X", "Y", "Duration", });
          internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_MapLine_descriptor,
              new java.lang.String[] { "PlayerId", "Mapline", });
          internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_MinimapDebugPoint_descriptor,
              new java.lang.String[] { "Location", "Color", "Size", "Duration", });
          internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_CreateLinearProjectile_descriptor,
              new java.lang.String[] { "Origin", "Velocity", "Latency", "Entindex", "ParticleIndex", "Handle", });
          internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_DestroyLinearProjectile_descriptor,
              new java.lang.String[] { "Handle", });
          internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_DodgeTrackingProjectiles_descriptor,
              new java.lang.String[] { "Entindex", });
          internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_SpectatorPlayerClick_descriptor,
              new java.lang.String[] { "Entindex", "OrderType", "TargetIndex", });
          internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_NevermoreRequiem_descriptor,
              new java.lang.String[] { "EntityHandle", "Lines", "Origin", });
          internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_descriptor =
            getDescriptor().getMessageTypes().get(19);
          internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_InvalidCommand_descriptor,
              new java.lang.String[] { "Message", });
          internal_static_com_valve_dota2_CDOTAUserMsg_HudError_descriptor =
            getDescriptor().getMessageTypes().get(20);
          internal_static_com_valve_dota2_CDOTAUserMsg_HudError_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_HudError_descriptor,
              new java.lang.String[] { "OrderId", });
          internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_descriptor =
            getDescriptor().getMessageTypes().get(21);
          internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_SharedCooldown_descriptor,
              new java.lang.String[] { "Entindex", "Name", "Cooldown", "NameIndex", });
          internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_descriptor =
            getDescriptor().getMessageTypes().get(22);
          internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_SetNextAutobuyItem_descriptor,
              new java.lang.String[] { "Name", });
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor =
            getDescriptor().getMessageTypes().get(23);
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor,
              new java.lang.String[] { "MsgType", "EntityIndex", "Speech", "SpeechMute", "AddGesture", "RemoveGesture", "BloodImpact", "FadeGesture", });
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor.getNestedTypes().get(0);
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_Speech_descriptor,
              new java.lang.String[] { "Concept", "Response", "RecipientType", "Level", });
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor.getNestedTypes().get(1);
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_SpeechMute_descriptor,
              new java.lang.String[] { "Delay", });
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor.getNestedTypes().get(2);
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_AddGesture_descriptor,
              new java.lang.String[] { "Activity", "Slot", "FadeIn", "FadeOut", });
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor.getNestedTypes().get(3);
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor,
              new java.lang.String[] { "Activity", });
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor.getNestedTypes().get(4);
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_BloodImpact_descriptor,
              new java.lang.String[] { "Scale", "XNormal", "YNormal", });
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_descriptor.getNestedTypes().get(5);
          internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_UnitEvent_FadeGesture_descriptor,
              new java.lang.String[] { "Activity", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_descriptor =
            getDescriptor().getMessageTypes().get(24);
          internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ItemPurchased_descriptor,
              new java.lang.String[] { "ItemIndex", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_descriptor =
            getDescriptor().getMessageTypes().get(25);
          internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ItemFound_descriptor,
              new java.lang.String[] { "Player", "Quality", "Rarity", "Method", "Itemdef", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor =
            getDescriptor().getMessageTypes().get(26);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor,
              new java.lang.String[] { "Type", "Index", "ReleaseParticleIndex", "CreateParticle", "DestroyParticle", "DestroyParticleInvolving", "UpdateParticle", "UpdateParticleFwd", "UpdateParticleOrient", "UpdateParticleFallback", "UpdateParticleOffset", "UpdateParticleEnt", "UpdateParticleLatency", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(0);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor,
              new java.lang.String[] { });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(1);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_CreateParticle_descriptor,
              new java.lang.String[] { "ParticleNameIndex", "AttachType", "EntityHandle", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(2);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor,
              new java.lang.String[] { "DestroyImmediately", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(3);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor,
              new java.lang.String[] { "DestroyImmediately", "EntityHandle", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(4);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor,
              new java.lang.String[] { "ControlPoint", "Position", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(5);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor,
              new java.lang.String[] { "ControlPoint", "Forward", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(6);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor,
              new java.lang.String[] { "ControlPoint", "Forward", "Right", "Up", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(7);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor,
              new java.lang.String[] { "ControlPoint", "Position", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(8);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor,
              new java.lang.String[] { "ControlPoint", "OriginOffset", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(9);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor,
              new java.lang.String[] { "ControlPoint", "EntityHandle", "AttachType", "Attachment", "FallbackPosition", });
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor =
            internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_descriptor.getNestedTypes().get(10);
          internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor,
              new java.lang.String[] { "PlayerLatency", "Tick", });
          internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_descriptor =
            getDescriptor().getMessageTypes().get(27);
          internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_OverheadEvent_descriptor,
              new java.lang.String[] { "MessageType", "Value", "TargetPlayerEntindex", "TargetEntindex", "SourcePlayerEntindex", });
          internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_descriptor =
            getDescriptor().getMessageTypes().get(28);
          internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_valve_dota2_CDOTAUserMsg_TutorialTipInfo_descriptor,
              new java.lang.String[] { "Name", "Progress", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
          com.valve.dota2.Netmessages.getDescriptor(),
          com.valve.dota2.AiActivity.getDescriptor(),
          com.valve.dota2.DotaCommonmessages.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
